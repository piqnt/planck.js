{"version":3,"file":"planck.min.js","sources":["../node_modules/tslib/tslib.es6.js","../src/util/options.ts","../src/common/Math.ts","../src/common/Vec2.ts","../src/collision/AABB.ts","../src/Settings.ts","../src/util/Pool.ts","../src/collision/DynamicTree.ts","../src/collision/BroadPhase.ts","../src/common/Rot.ts","../src/common/Transform.ts","../src/common/Sweep.ts","../src/dynamics/Velocity.ts","../src/dynamics/Position.ts","../src/collision/Shape.ts","../src/dynamics/Fixture.ts","../src/dynamics/Body.ts","../src/dynamics/Joint.ts","../src/util/stats.ts","../src/util/Timer.ts","../src/collision/Distance.ts","../src/collision/TimeOfImpact.ts","../src/dynamics/Solver.ts","../src/common/Mat22.ts","../src/collision/Manifold.ts","../src/dynamics/Contact.ts","../src/dynamics/World.ts","../src/common/Vec3.ts","../src/collision/shape/EdgeShape.ts","../src/collision/shape/ChainShape.ts","../src/collision/shape/PolygonShape.ts","../src/collision/shape/BoxShape.ts","../src/collision/shape/CircleShape.ts","../src/dynamics/joint/DistanceJoint.ts","../src/dynamics/joint/FrictionJoint.ts","../src/common/Mat33.ts","../src/dynamics/joint/RevoluteJoint.ts","../src/dynamics/joint/PrismaticJoint.ts","../src/dynamics/joint/GearJoint.ts","../src/dynamics/joint/MotorJoint.ts","../src/dynamics/joint/MouseJoint.ts","../src/dynamics/joint/PulleyJoint.ts","../src/dynamics/joint/RopeJoint.ts","../src/dynamics/joint/WeldJoint.ts","../src/dynamics/joint/WheelJoint.ts","../src/serializer/index.ts","../src/collision/shape/CollideCircle.ts","../src/collision/shape/CollideEdgeCircle.ts","../src/collision/shape/CollidePolygon.ts","../src/collision/shape/CollideCirclePolygon.ts","../src/collision/shape/CollideEdgePolygon.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export const options = function<T>(input: T, defaults: object): T {\n  if (input === null || typeof input === 'undefined') {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    input = {} as T;\n  }\n\n  const output = {...input};\n\n  // tslint:disable-next-line:no-for-in\n  for (const key in defaults) {\n    if (defaults.hasOwnProperty(key) && typeof input[key] === 'undefined') {\n      output[key] = defaults[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    const symbols = Object.getOwnPropertySymbols(defaults);\n    for (let i = 0; i < symbols.length; i++) {\n      const symbol = symbols[i];\n      if (defaults.propertyIsEnumerable(symbol) && typeof input[symbol] === 'undefined') {\n        output[symbol] = defaults[symbol];\n      }\n    }\n  }\n\n  return output;\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexport const math = Object.assign(Object.create(Math) as typeof Math, {\n  EPSILON: 1e-9, // TODO\n\n  /**\n   * This function is used to ensure that a floating point number is not a NaN or\n   * infinity.\n   */\n  isFinite: function(x: unknown): boolean {\n    return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n  },\n\n  assert: function(x: any): void {\n    _ASSERT && console.assert(!math.isFinite(x), 'Invalid Number!', x);\n  },\n\n  /**\n   * Next Largest Power of 2 Given a binary integer value x, the next largest\n   * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n   * upper bits into the lower bits. This process yields a bit vector with the\n   * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n   * yields the next largest power of 2. For a 32-bit value:\n   */\n  nextPowerOfTwo: function(x: number): number {\n    // TODO\n    x |= (x >> 1);\n    x |= (x >> 2);\n    x |= (x >> 4);\n    x |= (x >> 8);\n    x |= (x >> 16);\n    return x + 1;\n  },\n\n  isPowerOfTwo: function(x: number): boolean {\n    return x > 0 && (x & (x - 1)) === 0;\n  },\n\n  mod: function(num: number, min?: number, max?: number): number {\n    if (typeof min === 'undefined') {\n      max = 1;\n      min = 0;\n    } else if (typeof max === 'undefined') {\n      max = min;\n      min = 0;\n    }\n    if (max > min) {\n      num = (num - min) % (max - min);\n      return num + (num < 0 ? max : min);\n    } else {\n      num = (num - max) % (min - max);\n      return num + (num <= 0 ? min : max);\n    }\n  },\n  /**\n   * Returns a min if num is less than min, and max if more than max, otherwise returns num.\n   */\n  clamp: function(num: number, min: number, max: number): number {\n    if (num < min) {\n      return min;\n    } else if (num > max) {\n      return max;\n    } else {\n      return num;\n    }\n  },\n  /**\n   * Returns a random number between min and max when two arguments are provided.\n   * If one arg is provided between 0 to max.\n   * If one arg is passed between 0 to 1.\n   */\n  random: function(min?: number, max?: number): number {\n    if (typeof min === 'undefined') {\n      max = 1;\n      min = 0;\n    } else if (typeof max === 'undefined') {\n      max = min;\n      min = 0;\n    }\n    return min === max ? min : Math.random() * (max - min) + min;\n  }\n});\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from './Math';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nexport interface Vec2Value {\n  x: number;\n  y: number;\n}\n\nexport class Vec2 {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number);\n  constructor(obj: { x: number, y: number });\n  constructor();\n  // tslint:disable-next-line:typedef\n  constructor(x?, y?) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof Vec2)) {\n      return new Vec2(x, y);\n    }\n    if (typeof x === 'undefined') {\n      this.x = 0;\n      this.y = 0;\n    } else if (typeof x === 'object') {\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      this.x = x;\n      this.y = y;\n    }\n    _ASSERT && Vec2.assert(this);\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any): Vec2 {\n    const obj = Object.create(Vec2.prototype);\n    obj.x = data.x;\n    obj.y = data.y;\n    return obj;\n  }\n\n  static zero(): Vec2 {\n    const obj = Object.create(Vec2.prototype);\n    obj.x = 0;\n    obj.y = 0;\n    return obj;\n  }\n\n  /** @internal */\n  static neo(x: number, y: number): Vec2 {\n    const obj = Object.create(Vec2.prototype);\n    obj.x = x;\n    obj.y = y;\n    return obj;\n  }\n\n  static clone(v: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(v.x, v.y);\n  }\n\n  /** @internal */\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Does this vector contain finite coordinates?\n   */\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Math.isFinite(obj.x) && Math.isFinite(obj.y);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Vec2.isValid(o), 'Invalid Vec2!', o);\n  }\n\n  clone(): Vec2 {\n    return Vec2.clone(this);\n  }\n\n  /**\n   * Set this vector to all zeros.\n   *\n   * @returns this\n   */\n  setZero(): Vec2 {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  set(x: number, y: number): Vec2;\n  set(value: Vec2Value): Vec2;\n  /**\n   * Set this vector to some specified coordinates.\n   *\n   * @returns this\n   */\n  // tslint:disable-next-line:typedef\n  set(x, y?) {\n    if (typeof x === 'object') {\n      _ASSERT && Vec2.assert(x);\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      _ASSERT && Math.assert(x);\n      _ASSERT && Math.assert(y);\n      this.x = x;\n      this.y = y;\n    }\n    return this;\n  }\n\n  /**\n   * Set this vector to some specified coordinates.\n   *\n   * @returns this\n   */\n   setNum(x: number, y: number) {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n\n    return this;\n  }\n\n  /**\n   * Set this vector to some specified coordinates.\n   *\n   * @returns this\n   */\n  setVec2(value: Vec2Value) {\n    _ASSERT && Vec2.assert(value);\n    this.x = value.x;\n    this.y = value.y;\n\n    return this;\n  }\n\n  /**\n   * @internal\n   * @deprecated Use setCombine or setMul\n   */\n  wSet(a: number, v: Vec2Value, b?: number, w?: Vec2Value): Vec2 {\n    if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n      return this.setCombine(a, v, b, w);\n    } else {\n      return this.setMul(a, v);\n    }\n  }\n\n  /**\n   * Set linear combination of v and w: `a * v + b * w`\n   */\n  setCombine(a: number, v: Vec2Value, b: number, w: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(b);\n    _ASSERT && Vec2.assert(w);\n    const x = a * v.x + b * w.x;\n    const y = a * v.y + b * w.y;\n\n    // `this` may be `w`\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setMul(a: number, v: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    const x = a * v.x;\n    const y = a * v.y;\n\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Add a vector to this vector.\n   *\n   * @returns this\n   */\n  add(w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(w);\n    this.x += w.x;\n    this.y += w.y;\n    return this;\n  }\n\n  /**\n   * @internal\n   * @deprecated Use addCombine or addMul\n   */\n  wAdd(a: number, v: Vec2Value, b?: number, w?: Vec2Value): Vec2 {\n    if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n      return this.addCombine(a, v, b, w);\n    } else {\n      return this.addMul(a, v);\n    }\n  }\n\n  /**\n   * Add linear combination of v and w: `a * v + b * w`\n   */\n  addCombine(a: number, v: Vec2Value, b: number, w: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(b);\n    _ASSERT && Vec2.assert(w);\n\n    const x = a * v.x + b * w.x;\n    const y = a * v.y + b * w.y;\n\n    // `this` may be `w`\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  addMul(a: number, v: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    const x = a * v.x;\n    const y = a * v.y;\n\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /**\n   * @deprecated Use subCombine or subMul\n   */\n  wSub(a: number, v: Vec2Value, b?: number, w?: Vec2Value): Vec2 {\n    if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n      return this.subCombine(a, v, b, w);\n    } else {\n      return this.subMul(a, v);\n    }}\n\n  /**\n   * Subtract linear combination of v and w: `a * v + b * w`\n   */\n  subCombine(a: number, v: Vec2Value, b: number, w: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(b);\n    _ASSERT && Vec2.assert(w);\n    const x = a * v.x + b * w.x;\n    const y = a * v.y + b * w.y;\n\n    // `this` may be `w`\n    this.x -= x;\n    this.y -= y;\n    return this;\n  }\n\n  subMul(a: number, v: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(v);\n    const x = a * v.x;\n    const y = a * v.y;\n\n    this.x -= x;\n    this.y -= y;\n    return this;\n  }\n\n  /**\n   * Subtract a vector from this vector\n   *\n   * @returns this\n   */\n  sub(w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(w);\n    this.x -= w.x;\n    this.y -= w.y;\n    return this;\n  }\n\n  /**\n   * Multiply this vector by a scalar.\n   *\n   * @returns this\n   */\n  mul(m: number): Vec2 {\n    _ASSERT && Math.assert(m);\n    this.x *= m;\n    this.y *= m;\n    return this;\n  }\n\n  /**\n   * Get the length of this vector (the norm).\n   *\n   * For performance, use this instead of lengthSquared (if possible).\n   */\n  length(): number {\n    return Vec2.lengthOf(this);\n  }\n\n  /**\n   * Get the length squared.\n   */\n  lengthSquared(): number {\n    return Vec2.lengthSquared(this);\n  }\n\n  /**\n   * Convert this vector into a unit vector.\n   *\n   * @returns old length\n   */\n  normalize(): number {\n    const length = this.length();\n    if (length < Math.EPSILON) {\n      return 0.0;\n    }\n    const invLength = 1.0 / length;\n    this.x *= invLength;\n    this.y *= invLength;\n    return length;\n  }\n\n  /**\n   * Get the length of this vector (the norm).\n   *\n   * For performance, use this instead of lengthSquared (if possible).\n   */\n  static lengthOf(v: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n  }\n\n  /**\n   * Get the length squared.\n   */\n  static lengthSquared(v: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    return v.x * v.x + v.y * v.y;\n  }\n\n  static distance(v: Vec2Value, w: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    const dx = v.x - w.x;\n    const dy = v.y - w.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  static distanceSquared(v: Vec2Value, w: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    const dx = v.x - w.x;\n    const dy = v.y - w.y;\n    return dx * dx + dy * dy;\n  }\n\n  static areEqual(v: Vec2Value, w: Vec2Value): boolean {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v === w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n  }\n\n  /**\n   * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n   */\n  static skew(v: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(-v.y, v.x);\n  }\n\n  /**\n   * Perform the dot product on two vectors.\n   */\n  static dot(v: Vec2Value, w: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.x + v.y * w.y;\n  }\n\n  static cross(v: Vec2Value, w: Vec2Value): number;\n  static cross(v: Vec2Value, w: number): Vec2;\n  static cross(v: number, w: Vec2Value): Vec2;\n  /**\n   * Perform the cross product on two vectors. In 2D this produces a scalar.\n   *\n   * Perform the cross product on a vector and a scalar. In 2D this produces a\n   * vector.\n   */\n  // tslint:disable-next-line:typedef\n  static cross(v, w) {\n    if (typeof w === 'number') {\n      _ASSERT && Vec2.assert(v);\n      _ASSERT && Math.assert(w);\n      return Vec2.neo(w * v.y, -w * v.x);\n\n    } else if (typeof v === 'number') {\n      _ASSERT && Math.assert(v);\n      _ASSERT && Vec2.assert(w);\n      return Vec2.neo(-v * w.y, v * w.x);\n\n    } else {\n      _ASSERT && Vec2.assert(v);\n      _ASSERT && Vec2.assert(w);\n      return v.x * w.y - v.y * w.x;\n    }\n  }\n\n  /**\n   * Perform the cross product on two vectors. In 2D this produces a scalar.\n   */\n  static crossVec2Vec2(v: Vec2Value, w: Vec2Value): number {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x;\n  }\n\n  /**\n   * Perform the cross product on a vector and a scalar. In 2D this produces a\n   * vector.\n   */\n  static crossVec2Num(v: Vec2Value, w: number): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n  }\n\n  /**\n   * Perform the cross product on a vector and a scalar. In 2D this produces a\n   * vector.\n   */\n  static crossNumVec2(v: number, w: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n  }\n\n  static addCross(a: Vec2Value, v: Vec2Value, w: number): Vec2;\n  static addCross(a: Vec2Value, v: number, w: Vec2Value): Vec2;\n  /**\n   * Returns `a + (v x w)`\n   */\n  // tslint:disable-next-line:typedef\n  static addCross(a, v, w) {\n    if (typeof w === 'number') {\n      _ASSERT && Vec2.assert(v);\n      _ASSERT && Math.assert(w);\n      return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n    } else if (typeof v === 'number') {\n      _ASSERT && Math.assert(v);\n      _ASSERT && Vec2.assert(w);\n      return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n    }\n\n    _ASSERT && console.assert(false);\n  }\n\n  /**\n   * Returns `a + (v x w)`\n   */\n  static addCrossVec2Num(a: Vec2Value, v: Vec2Value, w: number): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n  }\n\n  /**\n   * Returns `a + (v x w)`\n   */\n  static addCrossNumVec2(a: Vec2Value, v: number, w: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  static add(v: Vec2Value, w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(v.x + w.x, v.y + w.y);\n  }\n\n  /** @internal @deprecated */\n  static wAdd(a: number, v: Vec2, b: number, w: Vec2): Vec2 {\n    if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n      return Vec2.combine(a, v, b, w);\n    } else {\n      return Vec2.mulNumVec2(a, v);\n    }\n  }\n\n  static combine(a: number, v: Vec2, b: number, w: Vec2): Vec2 {\n    return Vec2.zero().setCombine(a, v, b, w);\n  }\n\n  static sub(v: Vec2Value, w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(v.x - w.x, v.y - w.y);\n  }\n\n  static mul(a: Vec2Value, b: number): Vec2;\n  static mul(a: number, b: Vec2Value): Vec2;\n  // tslint:disable-next-line:typedef\n  static mul(a, b) {\n    if (typeof a === 'object') {\n      _ASSERT && Vec2.assert(a);\n      _ASSERT && Math.assert(b);\n      return Vec2.neo(a.x * b, a.y * b);\n\n    } else if (typeof b === 'object') {\n      _ASSERT && Math.assert(a);\n      _ASSERT && Vec2.assert(b);\n      return Vec2.neo(a * b.x, a * b.y);\n    }\n  }\n\n  static mulVec2Num(a: Vec2Value, b: number): Vec2 {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n  }\n\n  static mulNumVec2(a: number, b: Vec2Value): Vec2 {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n\n  neg(): Vec2 {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  static neg(v: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(-v.x, -v.y);\n  }\n\n  static abs(v: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n  }\n\n  static mid(v: Vec2Value, w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n  }\n\n  static upper(v: Vec2Value, w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n  }\n\n  static lower(v: Vec2Value, w: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n  }\n\n  clamp(max: number): Vec2 {\n    const lengthSqr = this.x * this.x + this.y * this.y;\n    if (lengthSqr > max * max) {\n      const scale = max / Math.sqrt(lengthSqr);\n      this.x *= scale;\n      this.y *= scale;\n    }\n    return this;\n  }\n\n  static clamp(v: Vec2Value, max: number): Vec2 {\n    const r = Vec2.neo(v.x, v.y);\n    r.clamp(max);\n    return r;\n  }\n\n  /**  @internal @deprecated */\n  // tslint:disable-next-line:typedef\n  static scaleFn(x: number, y: number) {\n    return function(v: Vec2): Vec2 {\n      return Vec2.neo(v.x * x, v.y * y);\n    };\n  }\n\n  /**  @internal @deprecated */\n  // tslint:disable-next-line:typedef\n  static translateFn(x: number, y: number) {\n    return function(v: Vec2): Vec2 {\n      return Vec2.neo(v.x + x, v.y + y);\n    };\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from '../common/Math';\nimport { Vec2, Vec2Value } from '../common/Vec2';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`.\n */\nexport interface RayCastInput {\n  p1: Vec2;\n  p2: Vec2;\n  maxFraction: number;\n}\n\nexport type RayCastCallback = (subInput: RayCastInput, id: number) => number;\n\n/**\n * Ray-cast output data. The ray hits at `p1 + fraction * (p2 - p1)`,\n * where `p1` and `p2` come from RayCastInput.\n */\nexport interface RayCastOutput {\n  normal: Vec2;\n  fraction: number;\n}\n\nexport class AABB {\n  lowerBound: Vec2;\n  upperBound: Vec2;\n\n  constructor(lower?: Vec2Value, upper?: Vec2Value) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof AABB)) {\n      return new AABB(lower, upper);\n    }\n\n    this.lowerBound = Vec2.zero();\n    this.upperBound = Vec2.zero();\n\n    if (typeof lower === 'object') {\n      this.lowerBound.setVec2(lower);\n    }\n    if (typeof upper === 'object') {\n      this.upperBound.setVec2(upper);\n    } else if (typeof lower === 'object') {\n      this.upperBound.setVec2(lower);\n    }\n  }\n\n  /**\n   * Verify that the bounds are sorted.\n   */\n  isValid(): boolean {\n    return AABB.isValid(this);\n  }\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Vec2.isValid(obj.lowerBound) && Vec2.isValid(obj.upperBound) && Vec2.sub(obj.upperBound, obj.lowerBound).lengthSquared() >= 0;\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!AABB.isValid(o), 'Invalid AABB!', o);\n  }\n\n  /**\n   * Get the center of the AABB.\n   */\n  getCenter(): Vec2 {\n    return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n  }\n\n  /**\n   * Get the extents of the AABB (half-widths).\n   */\n  getExtents(): Vec2 {\n    return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n  }\n\n  /**\n   * Get the perimeter length.\n   */\n  getPerimeter(): number {\n    return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n  }\n\n  /**\n   * Combine one or two AABB into this one.\n   */\n  combine(a: AABB, b?: AABB): void {\n    b = b || this;\n\n    const lowerA = a.lowerBound;\n    const upperA = a.upperBound;\n    const lowerB = b.lowerBound;\n    const upperB = b.upperBound;\n\n    const lowerX = Math.min(lowerA.x, lowerB.x);\n    const lowerY = Math.min(lowerA.y, lowerB.y);\n    const upperX = Math.max(upperB.x, upperA.x);\n    const upperY = Math.max(upperB.y, upperA.y);\n\n    this.lowerBound.setNum(lowerX, lowerY);\n    this.upperBound.setNum(upperX, upperY);\n  }\n\n  combinePoints(a: Vec2Value, b: Vec2Value): void {\n    this.lowerBound.setNum(Math.min(a.x, b.x), Math.min(a.y, b.y));\n    this.upperBound.setNum(Math.max(a.x, b.x), Math.max(a.y, b.y));\n  }\n\n  set(aabb: AABB): void {\n    this.lowerBound.setNum(aabb.lowerBound.x, aabb.lowerBound.y);\n    this.upperBound.setNum(aabb.upperBound.x, aabb.upperBound.y);\n  }\n\n  contains(aabb: AABB): boolean {\n    let result = true;\n    result = result && this.lowerBound.x <= aabb.lowerBound.x;\n    result = result && this.lowerBound.y <= aabb.lowerBound.y;\n    result = result && aabb.upperBound.x <= this.upperBound.x;\n    result = result && aabb.upperBound.y <= this.upperBound.y;\n    return result;\n  }\n\n  extend(value: number): AABB {\n    AABB.extend(this, value);\n    return this;\n  }\n\n  static extend(aabb: AABB, value: number): void {\n    aabb.lowerBound.x -= value;\n    aabb.lowerBound.y -= value;\n    aabb.upperBound.x += value;\n    aabb.upperBound.y += value;\n  }\n\n  static testOverlap(a: AABB, b: AABB): boolean {\n    const d1x = b.lowerBound.x - a.upperBound.x;\n    const d2x = a.lowerBound.x - b.upperBound.x;\n\n    const d1y = b.lowerBound.y - a.upperBound.y;\n    const d2y = a.lowerBound.y - b.upperBound.y;\n\n    if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  static areEqual(a: AABB, b: AABB): boolean {\n    return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n  }\n\n  static diff(a: AABB, b: AABB): number {\n    const wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x));\n    const hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n    const wA = a.upperBound.x - a.lowerBound.x;\n    const hA = a.upperBound.y - a.lowerBound.y;\n\n    const wB = b.upperBound.x - b.lowerBound.x;\n    const hB = b.upperBound.y - b.lowerBound.y;\n\n    return wA * hA + wB * hB - wD * hD;\n  }\n\n  rayCast(output: RayCastOutput, input: RayCastInput): boolean {\n    // From Real-time Collision Detection, p179.\n\n    let tmin = -Infinity;\n    let tmax = Infinity;\n\n    const p = input.p1;\n    const d = Vec2.sub(input.p2, input.p1);\n    const absD = Vec2.abs(d);\n\n    const normal = Vec2.zero();\n\n    for (let f: 'x' | 'y' = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n      if (absD.x < Math.EPSILON) {\n        // Parallel.\n        if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n          return false;\n        }\n      } else {\n        const inv_d = 1.0 / d[f];\n        let t1 = (this.lowerBound[f] - p[f]) * inv_d;\n        let t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n        // Sign of the normal vector.\n        let s = -1.0;\n\n        if (t1 > t2) {\n          const temp = t1;\n          t1 = t2;\n          t2 = temp;\n          s = 1.0;\n        }\n\n        // Push the min up\n        if (t1 > tmin) {\n          normal.setZero();\n          normal[f] = s;\n          tmin = t1;\n        }\n\n        // Pull the max down\n        tmax = Math.min(tmax, t2);\n\n        if (tmin > tmax) {\n          return false;\n        }\n      }\n    }\n\n    // Does the ray start inside the box?\n    // Does the ray intersect beyond the max fraction?\n    if (tmin < 0.0 || input.maxFraction < tmin) {\n      return false;\n    }\n\n    // Intersection.\n    output.fraction = tmin;\n    output.normal = normal;\n    return true;\n  }\n\n  /** @internal */\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// TODO merge with World options?\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n// tslint:disable-next-line:no-unnecessary-class\nexport class Settings {\n  // Collision\n  /**\n   * The maximum number of contact points between two convex shapes. Do not change\n   * this value.\n   */\n  static maxManifoldPoints: number = 2;\n\n  /**\n   * The maximum number of vertices on a convex polygon. You cannot increase this\n   * too much because BlockAllocator has a maximum object size.\n   */\n  static maxPolygonVertices: number = 12;\n\n  /**\n   * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n   * by a small amount without triggering a tree adjustment. This is in meters.\n   */\n  static aabbExtension: number = 0.1;\n\n  /**\n   * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n   * future position based on the current displacement. This is a dimensionless\n   * multiplier.\n   */\n  static aabbMultiplier: number = 2.0;\n\n  /**\n   * A small length used as a collision and constraint tolerance. Usually it is\n   * chosen to be numerically significant, but visually insignificant.\n   */\n  static linearSlop: number = 0.005;\n  static get linearSlopSquared(): number { return Settings.linearSlop * Settings.linearSlop; }\n\n  /**\n   * A small angle used as a collision and constraint tolerance. Usually it is\n   * chosen to be numerically significant, but visually insignificant.\n   */\n  static angularSlop: number = (2.0 / 180.0 * Math.PI);\n\n  /**\n   * The radius of the polygon/edge shape skin. This should not be modified.\n   * Making this smaller means polygons will have an insufficient buffer for\n   * continuous collision. Making it larger may create artifacts for vertex\n   * collision.\n   */\n  static get polygonRadius(): number { return 2.0 * Settings.linearSlop; }\n\n  /**\n   * Maximum number of sub-steps per contact in continuous physics simulation.\n   */\n  static maxSubSteps: number = 8;\n\n// Dynamics\n\n  /**\n   * Maximum number of contacts to be handled to solve a TOI impact.\n   */\n  static maxTOIContacts: number = 32;\n\n  /**\n   * Maximum iterations to solve a TOI.\n   */\n  static maxTOIIterations: number = 20;\n\n  /**\n   * Maximum iterations to find Distance.\n   */\n  static maxDistnceIterations: number = 20;\n\n  /**\n   * A velocity threshold for elastic collisions. Any collision with a relative\n   * linear velocity below this threshold will be treated as inelastic.\n   */\n  static velocityThreshold: number = 1.0;\n\n  /**\n   * The maximum linear position correction used when solving constraints. This\n   * helps to prevent overshoot.\n   */\n  static maxLinearCorrection: number = 0.2;\n\n  /**\n   * The maximum angular position correction used when solving constraints. This\n   * helps to prevent overshoot.\n   */\n  static maxAngularCorrection: number = (8.0 / 180.0 * Math.PI);\n\n  /**\n   * The maximum linear velocity of a body. This limit is very large and is used\n   * to prevent numerical problems. You shouldn't need to adjust Settings.\n   */\n  static maxTranslation: number = 2.0;\n  static get maxTranslationSquared(): number { return Settings.maxTranslation * Settings.maxTranslation; }\n\n  /**\n   * The maximum angular velocity of a body. This limit is very large and is used\n   * to prevent numerical problems. You shouldn't need to adjust Settings.\n   */\n  static maxRotation: number = (0.5 * Math.PI);\n  static get maxRotationSquared(): number { return Settings.maxRotation * Settings.maxRotation; }\n\n  /**\n   * This scale factor controls how fast overlap is resolved. Ideally this would\n   * be 1 so that overlap is removed in one time step. However using values close\n   * to 1 often lead to overshoot.\n   */\n  static baumgarte: number = 0.2;\n  static toiBaugarte: number = 0.75;\n\n  // Sleep\n\n  /**\n   * The time that a body must be still before it will go to sleep.\n   */\n  static timeToSleep: number = 0.5;\n\n  /**\n   * A body cannot sleep if its linear velocity is above this tolerance.\n   */\n  static linearSleepTolerance: number = 0.01;\n  static get linearSleepToleranceSqr(): number { return Math.pow(Settings.linearSleepTolerance, 2); }\n\n  /**\n   * A body cannot sleep if its angular velocity is above this tolerance.\n   */\n  static angularSleepTolerance: number = (2.0 / 180.0 * Math.PI);\n  static get angularSleepToleranceSqr(): number { return Math.pow(Settings.angularSleepTolerance, 2); }\n\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nexport class Pool<T> {\n  _list: T[] = [];\n  _max: number = Infinity;\n\n  _createFn: () => T;\n  _outFn: (item: T) => void;\n  _inFn: (item: T) => void;\n  _discardFn: (item: T) => T;\n\n  _createCount: number = 0;\n  _outCount: number = 0;\n  _inCount: number = 0;\n  _discardCount: number = 0;\n\n  constructor(opts: {\n    max?: number,\n    create?: () => T,\n    allocate?: (item: T) => void,\n    release?: (item: T) => void,\n    discard?: (item: T) => T,\n  }) {\n    this._list = [];\n    this._max = opts.max || this._max;\n\n    this._createFn = opts.create;\n    this._outFn = opts.allocate;\n    this._inFn = opts.release;\n    this._discardFn = opts.discard;\n  }\n\n  max(n?: number): number | Pool<T> {\n    if (typeof n === 'number') {\n      this._max = n;\n      return this;\n    }\n    return this._max;\n  }\n\n  size(): number {\n    return this._list.length;\n  }\n\n  allocate(): T {\n    let item: T;\n    if (this._list.length > 0) {\n      item = this._list.shift();\n    } else {\n      this._createCount++;\n      if (typeof this._createFn === 'function') {\n        item = this._createFn();\n      } else {\n        // tslint:disable-next-line:no-object-literal-type-assertion\n        item = {} as T;\n      }\n    }\n    this._outCount++;\n    if (typeof this._outFn === 'function') {\n      this._outFn(item);\n    }\n    return item;\n  }\n\n  release(item: T): void {\n    if (this._list.length < this._max) {\n      this._inCount++;\n      if (typeof this._inFn === 'function') {\n        this._inFn(item);\n      }\n      this._list.push(item);\n    } else {\n      this._discardCount++;\n      if (typeof this._discardFn === 'function') {\n        item = this._discardFn(item);\n      }\n    }\n  }\n\n  /** @internal */\n  toString(): string {\n    return \" +\" + this._createCount + \" >\" + this._outCount + \" <\" + this._inCount + \" -\"\n      + this._discardCount + \" =\" + this._list.length + \"/\" + this._max;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Settings } from '../Settings';\nimport { Pool } from '../util/Pool';\nimport { Vec2 } from '../common/Vec2';\nimport { math as Math } from '../common/Math';\nimport { AABB, RayCastCallback, RayCastInput } from './AABB';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nexport type DynamicTreeQueryCallback = (nodeId: number) => boolean;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n */\nexport class TreeNode<T> {\n  id: number;\n  /** Enlarged AABB */\n  aabb: AABB = new AABB();\n  userData: T = null;\n  parent: TreeNode<T> = null;\n  child1: TreeNode<T> = null;\n  child2: TreeNode<T> = null;\n  /** 0: leaf, -1: free node */\n  height: number = -1;\n\n  constructor(id?: number) {\n    this.id = id;\n  }\n\n  /** @internal */\n  toString(): string {\n    return this.id + \": \" + this.userData;\n  }\n\n  isLeaf(): boolean {\n    return this.child1 == null;\n  }\n}\n\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n *\n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nexport class DynamicTree<T> {\n  m_root: TreeNode<T>;\n  m_lastProxyId: number;\n  m_nodes: {\n    [id: number]: TreeNode<T>\n  };\n  m_pool: Pool<TreeNode<T>>;\n\n  constructor() {\n    this.m_root = null;\n    this.m_nodes = {};\n    this.m_lastProxyId = 0;\n\n    this.m_pool = new Pool<TreeNode<T>>({\n      create(): TreeNode<T> {\n        return new TreeNode();\n      }\n    });\n  }\n\n  /**\n   * Get proxy user data.\n   *\n   * @return the proxy user data or 0 if the id is invalid.\n   */\n  getUserData(id: number): T {\n    const node = this.m_nodes[id];\n    _ASSERT && console.assert(!!node);\n    return node.userData;\n  }\n\n  /**\n   * Get the fat AABB for a node id.\n   *\n   * @return the proxy user data or 0 if the id is invalid.\n   */\n  getFatAABB(id: number): AABB {\n    const node = this.m_nodes[id];\n    _ASSERT && console.assert(!!node);\n    return node.aabb;\n  }\n\n  allocateNode(): TreeNode<T> {\n    const node = this.m_pool.allocate();\n    node.id = ++this.m_lastProxyId;\n    node.userData = null;\n    node.parent = null;\n    node.child1 = null;\n    node.child2 = null;\n    node.height = -1;\n    this.m_nodes[node.id] = node;\n    return node;\n  }\n\n  freeNode(node: TreeNode<T>): void {\n    this.m_pool.release(node);\n    node.height = -1;\n    // tslint:disable-next-line:no-dynamic-delete\n    delete this.m_nodes[node.id];\n  }\n\n  /**\n   * Create a proxy in the tree as a leaf node. We return the index of the node\n   * instead of a pointer so that we can grow the node pool.\n   *\n   * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n   */\n  createProxy(aabb: AABB, userData: T): number {\n    _ASSERT && console.assert(AABB.isValid(aabb));\n\n    const node = this.allocateNode();\n\n    node.aabb.set(aabb);\n\n    // Fatten the aabb.\n    AABB.extend(node.aabb, Settings.aabbExtension);\n\n    node.userData = userData;\n    node.height = 0;\n\n    this.insertLeaf(node);\n\n    return node.id;\n  }\n\n  /**\n   * Destroy a proxy. This asserts if the id is invalid.\n   */\n  destroyProxy(id: number): void {\n    const node = this.m_nodes[id];\n\n    _ASSERT && console.assert(!!node);\n    _ASSERT && console.assert(node.isLeaf());\n\n    this.removeLeaf(node);\n    this.freeNode(node);\n  }\n\n  /**\n   * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n   * fattened AABB, then the proxy is removed from the tree and re-inserted.\n   * Otherwise the function returns immediately.\n   *\n   * @param d Displacement\n   *\n   * @return true if the proxy was re-inserted.\n   */\n  moveProxy(id: number, aabb: AABB, d: Vec2): boolean {\n    _ASSERT && console.assert(AABB.isValid(aabb));\n    _ASSERT && console.assert(!d || Vec2.isValid(d));\n\n    const node = this.m_nodes[id];\n\n    _ASSERT && console.assert(!!node);\n    _ASSERT && console.assert(node.isLeaf());\n\n    if (node.aabb.contains(aabb)) {\n      return false;\n    }\n\n    this.removeLeaf(node);\n\n    node.aabb.set(aabb);\n\n    // Extend AABB.\n    aabb = node.aabb;\n    AABB.extend(aabb, Settings.aabbExtension);\n\n    // Predict AABB displacement.\n    // const d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n    if (d.x < 0.0) {\n      aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n    } else {\n      aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n    }\n\n    if (d.y < 0.0) {\n      aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n    } else {\n      aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n    }\n\n    this.insertLeaf(node);\n\n    return true;\n  }\n\n  insertLeaf(leaf: TreeNode<T>): void {\n    _ASSERT && console.assert(AABB.isValid(leaf.aabb));\n\n    if (this.m_root == null) {\n      this.m_root = leaf;\n      this.m_root.parent = null;\n      return;\n    }\n\n    // Find the best sibling for this node\n    const leafAABB = leaf.aabb;\n    let index = this.m_root;\n    while (!index.isLeaf()) {\n      const child1 = index.child1;\n      const child2 = index.child2;\n\n      const area = index.aabb.getPerimeter();\n\n      const combinedAABB = new AABB();\n      combinedAABB.combine(index.aabb, leafAABB);\n      const combinedArea = combinedAABB.getPerimeter();\n\n      // Cost of creating a new parent for this node and the new leaf\n      const cost = 2.0 * combinedArea;\n\n      // Minimum cost of pushing the leaf further down the tree\n      const inheritanceCost = 2.0 * (combinedArea - area);\n\n      // Cost of descending into child1\n      let cost1;\n      if (child1.isLeaf()) {\n        const aabb = new AABB();\n        aabb.combine(leafAABB, child1.aabb);\n        cost1 = aabb.getPerimeter() + inheritanceCost;\n      } else {\n        const aabb = new AABB();\n        aabb.combine(leafAABB, child1.aabb);\n        const oldArea = child1.aabb.getPerimeter();\n        const newArea = aabb.getPerimeter();\n        cost1 = (newArea - oldArea) + inheritanceCost;\n      }\n\n      // Cost of descending into child2\n      let cost2;\n      if (child2.isLeaf()) {\n        const aabb = new AABB();\n        aabb.combine(leafAABB, child2.aabb);\n        cost2 = aabb.getPerimeter() + inheritanceCost;\n      } else {\n        const aabb = new AABB();\n        aabb.combine(leafAABB, child2.aabb);\n        const oldArea = child2.aabb.getPerimeter();\n        const newArea = aabb.getPerimeter();\n        cost2 = newArea - oldArea + inheritanceCost;\n      }\n\n      // Descend according to the minimum cost.\n      if (cost < cost1 && cost < cost2) {\n        break;\n      }\n\n      // Descend\n      if (cost1 < cost2) {\n        index = child1;\n      } else {\n        index = child2;\n      }\n    }\n\n    const sibling = index;\n\n    // Create a new parent.\n    const oldParent = sibling.parent;\n    const newParent = this.allocateNode();\n    newParent.parent = oldParent;\n    newParent.userData = null;\n    newParent.aabb.combine(leafAABB, sibling.aabb);\n    newParent.height = sibling.height + 1;\n\n    if (oldParent != null) {\n      // The sibling was not the root.\n      if (oldParent.child1 === sibling) {\n        oldParent.child1 = newParent;\n      } else {\n        oldParent.child2 = newParent;\n      }\n\n      newParent.child1 = sibling;\n      newParent.child2 = leaf;\n      sibling.parent = newParent;\n      leaf.parent = newParent;\n    } else {\n      // The sibling was the root.\n      newParent.child1 = sibling;\n      newParent.child2 = leaf;\n      sibling.parent = newParent;\n      leaf.parent = newParent;\n      this.m_root = newParent;\n    }\n\n    // Walk back up the tree fixing heights and AABBs\n    index = leaf.parent;\n    while (index != null) {\n      index = this.balance(index);\n\n      const child1 = index.child1;\n      const child2 = index.child2;\n\n      _ASSERT && console.assert(child1 != null);\n      _ASSERT && console.assert(child2 != null);\n\n      index.height = 1 + Math.max(child1.height, child2.height);\n      index.aabb.combine(child1.aabb, child2.aabb);\n\n      index = index.parent;\n    }\n\n    // validate();\n  }\n\n  removeLeaf(leaf: TreeNode<T>): void {\n    if (leaf === this.m_root) {\n      this.m_root = null;\n      return;\n    }\n\n    const parent = leaf.parent;\n    const grandParent = parent.parent;\n    let sibling;\n    if (parent.child1 === leaf) {\n      sibling = parent.child2;\n    } else {\n      sibling = parent.child1;\n    }\n\n    if (grandParent != null) {\n      // Destroy parent and connect sibling to grandParent.\n      if (grandParent.child1 === parent) {\n        grandParent.child1 = sibling;\n      } else {\n        grandParent.child2 = sibling;\n      }\n      sibling.parent = grandParent;\n      this.freeNode(parent);\n\n      // Adjust ancestor bounds.\n      let index = grandParent;\n      while (index != null) {\n        index = this.balance(index);\n\n        const child1 = index.child1;\n        const child2 = index.child2;\n\n        index.aabb.combine(child1.aabb, child2.aabb);\n        index.height = 1 + Math.max(child1.height, child2.height);\n\n        index = index.parent;\n      }\n    } else {\n      this.m_root = sibling;\n      sibling.parent = null;\n      this.freeNode(parent);\n    }\n\n    // validate();\n  }\n\n  /**\n   * Perform a left or right rotation if node A is imbalanced. Returns the new\n   * root index.\n   */\n  balance(iA: TreeNode<T>): TreeNode<T> {\n    _ASSERT && console.assert(iA != null);\n\n    const A = iA;\n    if (A.isLeaf() || A.height < 2) {\n      return iA;\n    }\n\n    const B = A.child1;\n    const C = A.child2;\n\n    const balance = C.height - B.height;\n\n    // Rotate C up\n    if (balance > 1) {\n      const F = C.child1;\n      const G = C.child2;\n\n      // Swap A and C\n      C.child1 = A;\n      C.parent = A.parent;\n      A.parent = C;\n\n      // A's old parent should point to C\n      if (C.parent != null) {\n        if (C.parent.child1 === iA) {\n          C.parent.child1 = C;\n        } else {\n          C.parent.child2 = C;\n        }\n      } else {\n        this.m_root = C;\n      }\n\n      // Rotate\n      if (F.height > G.height) {\n        C.child2 = F;\n        A.child2 = G;\n        G.parent = A;\n        A.aabb.combine(B.aabb, G.aabb);\n        C.aabb.combine(A.aabb, F.aabb);\n\n        A.height = 1 + Math.max(B.height, G.height);\n        C.height = 1 + Math.max(A.height, F.height);\n      } else {\n        C.child2 = G;\n        A.child2 = F;\n        F.parent = A;\n        A.aabb.combine(B.aabb, F.aabb);\n        C.aabb.combine(A.aabb, G.aabb);\n\n        A.height = 1 + Math.max(B.height, F.height);\n        C.height = 1 + Math.max(A.height, G.height);\n      }\n\n      return C;\n    }\n\n    // Rotate B up\n    if (balance < -1) {\n      const D = B.child1;\n      const E = B.child2;\n\n      // Swap A and B\n      B.child1 = A;\n      B.parent = A.parent;\n      A.parent = B;\n\n      // A's old parent should point to B\n      if (B.parent != null) {\n        if (B.parent.child1 === A) {\n          B.parent.child1 = B;\n        } else {\n          B.parent.child2 = B;\n        }\n      } else {\n        this.m_root = B;\n      }\n\n      // Rotate\n      if (D.height > E.height) {\n        B.child2 = D;\n        A.child1 = E;\n        E.parent = A;\n        A.aabb.combine(C.aabb, E.aabb);\n        B.aabb.combine(A.aabb, D.aabb);\n\n        A.height = 1 + Math.max(C.height, E.height);\n        B.height = 1 + Math.max(A.height, D.height);\n      } else {\n        B.child2 = E;\n        A.child1 = D;\n        D.parent = A;\n        A.aabb.combine(C.aabb, D.aabb);\n        B.aabb.combine(A.aabb, E.aabb);\n\n        A.height = 1 + Math.max(C.height, D.height);\n        B.height = 1 + Math.max(A.height, E.height);\n      }\n\n      return B;\n    }\n\n    return A;\n  }\n\n  /**\n   * Compute the height of the binary tree in O(N) time. Should not be called\n   * often.\n   */\n  getHeight(): number {\n    if (this.m_root == null) {\n      return 0;\n    }\n\n    return this.m_root.height;\n  }\n\n  /**\n   * Get the ratio of the sum of the node areas to the root area.\n   */\n  getAreaRatio(): number {\n    if (this.m_root == null) {\n      return 0.0;\n    }\n\n    const root = this.m_root;\n    const rootArea = root.aabb.getPerimeter();\n\n    let totalArea = 0.0;\n    let node;\n    const it = this.iteratorPool.allocate().preorder(this.m_root);\n    while (node = it.next()) {\n      if (node.height < 0) {\n        // Free node in pool\n        continue;\n      }\n\n      totalArea += node.aabb.getPerimeter();\n    }\n\n    this.iteratorPool.release(it);\n\n    return totalArea / rootArea;\n  }\n\n  /**\n   * Compute the height of a sub-tree.\n   */\n  computeHeight(id?: number): number {\n    let node;\n    if (typeof id !== 'undefined') {\n      node = this.m_nodes[id];\n    } else {\n      node = this.m_root;\n    }\n\n    // _ASSERT && console.assert(0 <= id && id < this.m_nodeCapacity);\n\n    if (node.isLeaf()) {\n      return 0;\n    }\n\n    const height1 = this.computeHeight(node.child1.id);\n    const height2 = this.computeHeight(node.child2.id);\n    return 1 + Math.max(height1, height2);\n  }\n\n  validateStructure(node: TreeNode<T>): void {\n    if (node == null) {\n      return;\n    }\n\n    if (node === this.m_root) {\n      _ASSERT && console.assert(node.parent == null);\n    }\n\n    const child1 = node.child1;\n    const child2 = node.child2;\n\n    if (node.isLeaf()) {\n      _ASSERT && console.assert(child1 == null);\n      _ASSERT && console.assert(child2 == null);\n      _ASSERT && console.assert(node.height === 0);\n      return;\n    }\n\n    // _ASSERT && console.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n    // _ASSERT && console.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n    _ASSERT && console.assert(child1.parent === node);\n    _ASSERT && console.assert(child2.parent === node);\n\n    this.validateStructure(child1);\n    this.validateStructure(child2);\n  }\n\n  validateMetrics(node: TreeNode<T>): void {\n    if (node == null) {\n      return;\n    }\n\n    const child1 = node.child1;\n    const child2 = node.child2;\n\n    if (node.isLeaf()) {\n      _ASSERT && console.assert(child1 == null);\n      _ASSERT && console.assert(child2 == null);\n      _ASSERT && console.assert(node.height === 0);\n      return;\n    }\n\n    // _ASSERT && console.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n    // _ASSERT && console.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n    const height1 = child1.height;\n    const height2 = child2.height;\n    const height = 1 + Math.max(height1, height2);\n    _ASSERT && console.assert(node.height === height);\n\n    const aabb = new AABB();\n    aabb.combine(child1.aabb, child2.aabb);\n\n    _ASSERT && console.assert(AABB.areEqual(aabb, node.aabb));\n\n    this.validateMetrics(child1);\n    this.validateMetrics(child2);\n  }\n\n  /**\n   * Validate this tree. For testing.\n   */\n  validate(): void {\n    this.validateStructure(this.m_root);\n    this.validateMetrics(this.m_root);\n    _ASSERT && console.assert(this.getHeight() === this.computeHeight());\n  }\n\n  /**\n   * Get the maximum balance of an node in the tree. The balance is the difference\n   * in height of the two children of a node.\n   */\n  getMaxBalance(): number {\n    let maxBalance = 0;\n    let node;\n    const it = this.iteratorPool.allocate().preorder(this.m_root);\n    while (node = it.next()) {\n      if (node.height <= 1) {\n        continue;\n      }\n\n      _ASSERT && console.assert(!node.isLeaf());\n\n      const balance = Math.abs(node.child2.height - node.child1.height);\n      maxBalance = Math.max(maxBalance, balance);\n    }\n    this.iteratorPool.release(it);\n\n    return maxBalance;\n  }\n\n  /**\n   * Build an optimal tree. Very expensive. For testing.\n   */\n  rebuildBottomUp(): void {\n    const nodes = [];\n    let count = 0;\n\n    // Build array of leaves. Free the rest.\n    let node;\n    const it = this.iteratorPool.allocate().preorder(this.m_root);\n    while (node = it.next()) {\n      if (node.height < 0) {\n        // free node in pool\n        continue;\n      }\n\n      if (node.isLeaf()) {\n        node.parent = null;\n        nodes[count] = node;\n        ++count;\n      } else {\n        this.freeNode(node);\n      }\n    }\n    this.iteratorPool.release(it);\n\n    while (count > 1) {\n      let minCost = Infinity;\n      let iMin = -1;\n      let jMin = -1;\n      for (let i = 0; i < count; ++i) {\n        const aabbi = nodes[i].aabb;\n        for (let j = i + 1; j < count; ++j) {\n          const aabbj = nodes[j].aabb;\n          const b = new AABB();\n          b.combine(aabbi, aabbj);\n          const cost = b.getPerimeter();\n          if (cost < minCost) {\n            iMin = i;\n            jMin = j;\n            minCost = cost;\n          }\n        }\n      }\n\n      const child1 = nodes[iMin];\n      const child2 = nodes[jMin];\n\n      const parent = this.allocateNode();\n      parent.child1 = child1;\n      parent.child2 = child2;\n      parent.height = 1 + Math.max(child1.height, child2.height);\n      parent.aabb.combine(child1.aabb, child2.aabb);\n      parent.parent = null;\n\n      child1.parent = parent;\n      child2.parent = parent;\n\n      nodes[jMin] = nodes[count - 1];\n      nodes[iMin] = parent;\n      --count;\n    }\n\n    this.m_root = nodes[0];\n\n    _ASSERT && this.validate();\n  }\n\n  /**\n   * Shift the world origin. Useful for large worlds. The shift formula is:\n   * position -= newOrigin\n   *\n   * @param newOrigin The new origin with respect to the old origin\n   */\n  shiftOrigin(newOrigin: Vec2): void {\n    // Build array of leaves. Free the rest.\n    let node;\n    const it = this.iteratorPool.allocate().preorder(this.m_root);\n    while (node = it.next()) {\n      const aabb = node.aabb;\n      aabb.lowerBound.x -= newOrigin.x;\n      aabb.lowerBound.y -= newOrigin.y;\n      aabb.upperBound.x -= newOrigin.x;\n      aabb.upperBound.y -= newOrigin.y;\n    }\n    this.iteratorPool.release(it);\n  }\n\n  /**\n   * Query an AABB for overlapping proxies. The callback class is called for each\n   * proxy that overlaps the supplied AABB.\n   */\n  query(aabb: AABB, queryCallback: DynamicTreeQueryCallback): void {\n    _ASSERT && console.assert(typeof queryCallback === 'function');\n    const stack = this.stackPool.allocate();\n\n    stack.push(this.m_root);\n    while (stack.length > 0) {\n      const node = stack.pop();\n      if (node == null) {\n        continue;\n      }\n\n      if (AABB.testOverlap(node.aabb, aabb)) {\n        if (node.isLeaf()) {\n          const proceed = queryCallback(node.id);\n          if (proceed === false) {\n            return;\n          }\n        } else {\n          stack.push(node.child1);\n          stack.push(node.child2);\n        }\n      }\n    }\n\n    this.stackPool.release(stack);\n  }\n\n  /**\n   * Ray-cast against the proxies in the tree. This relies on the callback to\n   * perform a exact ray-cast in the case were the proxy contains a shape. The\n   * callback also performs the any collision filtering. This has performance\n   * roughly equal to k * log(n), where k is the number of collisions and n is the\n   * number of proxies in the tree.\n   *\n   * @param input The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`.\n   * @param rayCastCallback A function that is called for each proxy that is hit by the ray.\n   */\n  rayCast(input: RayCastInput, rayCastCallback: RayCastCallback): void {\n    // TODO: GC\n    _ASSERT && console.assert(typeof rayCastCallback === 'function');\n    const p1 = input.p1;\n    const p2 = input.p2;\n    const r = Vec2.sub(p2, p1);\n    _ASSERT && console.assert(r.lengthSquared() > 0.0);\n    r.normalize();\n\n    // v is perpendicular to the segment.\n    const v = Vec2.crossNumVec2(1.0, r);\n    const abs_v = Vec2.abs(v);\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n\n    let maxFraction = input.maxFraction;\n\n    // Build a bounding box for the segment.\n    const segmentAABB = new AABB();\n    let t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n    segmentAABB.combinePoints(p1, t);\n\n    const stack = this.stackPool.allocate();\n    const subInput = this.inputPool.allocate();\n\n    stack.push(this.m_root);\n    while (stack.length > 0) {\n      const node = stack.pop();\n      if (node == null) {\n        continue;\n      }\n\n      if (AABB.testOverlap(node.aabb, segmentAABB) === false) {\n        continue;\n      }\n\n      // Separating axis for segment (Gino, p80).\n      // |dot(v, p1 - c)| > dot(|v|, h)\n      const c = node.aabb.getCenter();\n      const h = node.aabb.getExtents();\n      const separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c))) - Vec2.dot(abs_v, h);\n      if (separation > 0.0) {\n        continue;\n      }\n\n      if (node.isLeaf()) {\n        subInput.p1 = Vec2.clone(input.p1);\n        subInput.p2 = Vec2.clone(input.p2);\n        subInput.maxFraction = maxFraction;\n\n        const value = rayCastCallback(subInput, node.id);\n\n        if (value === 0.0) {\n          // The client has terminated the ray cast.\n          return;\n        }\n\n        if (value > 0.0) {\n          // update segment bounding box.\n          maxFraction = value;\n          t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n          segmentAABB.combinePoints(p1, t);\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n    this.stackPool.release(stack);\n    this.inputPool.release(subInput);\n  }\n\n  private inputPool: Pool<RayCastInput> = new Pool<RayCastInput>({\n    create(): RayCastInput {\n      // tslint:disable-next-line:no-object-literal-type-assertion\n      return {} as RayCastInput;\n    },\n    release(stack: RayCastInput): void {\n    }\n  });\n\n  private stackPool: Pool<Array<TreeNode<T>>> = new Pool<Array<TreeNode<T>>>({\n    create(): Array<TreeNode<T>> {\n      return [];\n    },\n    release(stack: Array<TreeNode<T>>): void {\n      stack.length = 0;\n    }\n  });\n\n  private iteratorPool: Pool<Iterator<T>> = new Pool<Iterator<T>>({\n    create(): Iterator<T> {\n      return new Iterator();\n    },\n    release(iterator: Iterator<T>): void {\n      iterator.close();\n    }\n  });\n\n}\n\nclass Iterator<T> {\n  parents: Array<TreeNode<T>> = [];\n  states: number[] = [];\n  preorder(root: TreeNode<T>): Iterator<T> {\n    this.parents.length = 0;\n    this.parents.push(root);\n    this.states.length = 0;\n    this.states.push(0);\n    return this;\n  }\n  next(): TreeNode<T> {\n    while (this.parents.length > 0) {\n      const i = this.parents.length - 1;\n      const node = this.parents[i];\n      if (this.states[i] === 0) {\n        this.states[i] = 1;\n        return node;\n      }\n      if (this.states[i] === 1) {\n        this.states[i] = 2;\n        if (node.child1) {\n          this.parents.push(node.child1);\n          this.states.push(1);\n          return node.child1;\n        }\n      }\n      if (this.states[i] === 2) {\n        this.states[i] = 3;\n        if (node.child2) {\n          this.parents.push(node.child2);\n          this.states.push(1);\n          return node.child2;\n        }\n      }\n      this.parents.pop();\n      this.states.pop();\n    }\n  }\n  close(): void {\n    this.parents.length = 0;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from '../common/Vec2';\nimport { math as Math } from '../common/Math';\nimport { AABB, RayCastCallback, RayCastInput } from './AABB';\nimport { DynamicTree, DynamicTreeQueryCallback } from './DynamicTree';\nimport { FixtureProxy } from \"../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n * objects and query them on update.\n */\nexport class BroadPhase {\n  m_tree: DynamicTree<FixtureProxy> = new DynamicTree<FixtureProxy>();\n  m_proxyCount: number = 0;\n  m_moveBuffer: number[] = [];\n\n  m_callback: (userDataA: any, userDataB: any) => void;\n  m_queryProxyId: number;\n\n  /**\n   * Get user data from a proxy. Returns null if the id is invalid.\n   */\n  getUserData(proxyId: number): FixtureProxy {\n    return this.m_tree.getUserData(proxyId);\n  }\n\n  /**\n   * Test overlap of fat AABBs.\n   */\n  testOverlap(proxyIdA: number, proxyIdB: number): boolean {\n    const aabbA = this.m_tree.getFatAABB(proxyIdA);\n    const aabbB = this.m_tree.getFatAABB(proxyIdB);\n    return AABB.testOverlap(aabbA, aabbB);\n  }\n\n  /**\n   * Get the fat AABB for a proxy.\n   */\n  getFatAABB(proxyId: number): AABB {\n    return this.m_tree.getFatAABB(proxyId);\n  }\n\n  /**\n   * Get the number of proxies.\n   */\n  getProxyCount(): number {\n    return this.m_proxyCount;\n  }\n\n  /**\n   * Get the height of the embedded tree.\n   */\n  getTreeHeight(): number {\n    return this.m_tree.getHeight();\n  }\n\n  /**\n   * Get the balance (integer) of the embedded tree.\n   */\n  getTreeBalance(): number {\n    return this.m_tree.getMaxBalance();\n  }\n\n  /**\n   * Get the quality metric of the embedded tree.\n   */\n  getTreeQuality(): number {\n    return this.m_tree.getAreaRatio();\n  }\n\n  /**\n   * Query an AABB for overlapping proxies. The callback class is called for each\n   * proxy that overlaps the supplied AABB.\n   */\n  query = (aabb: AABB, queryCallback: DynamicTreeQueryCallback): void => {\n    this.m_tree.query(aabb, queryCallback);\n  }\n\n  /**\n   * Ray-cast against the proxies in the tree. This relies on the callback to\n   * perform a exact ray-cast in the case were the proxy contains a shape. The\n   * callback also performs the any collision filtering. This has performance\n   * roughly equal to k * log(n), where k is the number of collisions and n is the\n   * number of proxies in the tree.\n   *\n   * @param input The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`.\n   * @param rayCastCallback A function that is called for each proxy that is hit by the ray.\n   */\n  rayCast(input: RayCastInput, rayCastCallback: RayCastCallback): void {\n    this.m_tree.rayCast(input, rayCastCallback);\n  }\n\n  /**\n   * Shift the world origin. Useful for large worlds. The shift formula is:\n   * position -= newOrigin\n   *\n   * @param newOrigin The new origin with respect to the old origin\n   */\n  shiftOrigin(newOrigin: Vec2): void {\n    this.m_tree.shiftOrigin(newOrigin);\n  }\n\n  /**\n   * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n   * is called.\n   */\n  createProxy(aabb: AABB, userData: FixtureProxy): number {\n    _ASSERT && console.assert(AABB.isValid(aabb));\n    const proxyId = this.m_tree.createProxy(aabb, userData);\n    this.m_proxyCount++;\n    this.bufferMove(proxyId);\n    return proxyId;\n  }\n\n  /**\n   * Destroy a proxy. It is up to the client to remove any pairs.\n   */\n  destroyProxy(proxyId: number): void {\n    this.unbufferMove(proxyId);\n    this.m_proxyCount--;\n    this.m_tree.destroyProxy(proxyId);\n  }\n\n  /**\n   * Call moveProxy as many times as you like, then when you are done call\n   * UpdatePairs to finalized the proxy pairs (for your time step).\n   */\n  moveProxy(proxyId: number, aabb: AABB, displacement: Vec2): void {\n    _ASSERT && console.assert(AABB.isValid(aabb));\n    const changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n    if (changed) {\n      this.bufferMove(proxyId);\n    }\n  }\n\n  /**\n   * Call to trigger a re-processing of it's pairs on the next call to\n   * UpdatePairs.\n   */\n  touchProxy(proxyId: number): void {\n    this.bufferMove(proxyId);\n  }\n\n  bufferMove(proxyId: number): void {\n    this.m_moveBuffer.push(proxyId);\n  }\n\n  unbufferMove(proxyId: number): void {\n    for (let i = 0; i < this.m_moveBuffer.length; ++i) {\n      if (this.m_moveBuffer[i] === proxyId) {\n        this.m_moveBuffer[i] = null;\n      }\n    }\n  }\n\n  /**\n   * Update the pairs. This results in pair callbacks. This can only add pairs.\n   */\n  updatePairs(addPairCallback: (userDataA: FixtureProxy, userDataB: FixtureProxy) => void): void {\n    _ASSERT && console.assert(typeof addPairCallback === 'function');\n    this.m_callback = addPairCallback;\n\n    // Perform tree queries for all moving proxies.\n    while (this.m_moveBuffer.length > 0) {\n      this.m_queryProxyId = this.m_moveBuffer.pop();\n      if (this.m_queryProxyId === null) {\n        continue;\n      }\n\n      // We have to query the tree with the fat AABB so that\n      // we don't fail to create a pair that may touch later.\n      const fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n      // Query tree, create pairs and add them pair buffer.\n      this.m_tree.query(fatAABB, this.queryCallback);\n    }\n\n    // Try to keep the tree balanced.\n    // this.m_tree.rebalance(4);\n  }\n\n  queryCallback = (proxyId: number): boolean => {\n    // A proxy cannot form a pair with itself.\n    if (proxyId === this.m_queryProxyId) {\n      return true;\n    }\n\n    const proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n    const proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n    // TODO: Skip any duplicate pairs.\n\n    const userDataA = this.m_tree.getUserData(proxyIdA);\n    const userDataB = this.m_tree.getUserData(proxyIdB);\n\n    // Send the pairs back to the client.\n    this.m_callback(userDataA, userDataB);\n\n    return true;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2, Vec2Value } from './Vec2';\nimport { math as Math } from './Math';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nexport class Rot {\n  s: number;\n  c: number;\n\n  /** Initialize from an angle in radians. */\n  constructor(angle?: number | Rot) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof Rot)) {\n      return new Rot(angle);\n    }\n    if (typeof angle === 'number') {\n      this.setAngle(angle);\n    } else if (typeof angle === 'object') {\n      this.setRot(angle);\n    } else {\n      this.setIdentity();\n    }\n  }\n\n  /** @internal */\n  static neo(angle: number): Rot {\n    const obj = Object.create(Rot.prototype);\n    obj.setAngle(angle);\n    return obj;\n  }\n\n  static clone(rot: Rot): Rot {\n    _ASSERT && Rot.assert(rot);\n    const obj = Object.create(Rot.prototype);\n    obj.s = rot.s;\n    obj.c = rot.c;\n    return obj;\n  }\n\n  static identity(): Rot {\n    const obj = Object.create(Rot.prototype);\n    obj.s = 0.0;\n    obj.c = 1.0;\n    return obj;\n  }\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Math.isFinite(obj.s) && Math.isFinite(obj.c);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Rot.isValid(o), 'Invalid Rot!', o);\n  }\n\n  /** Set to the identity rotation. */\n  setIdentity(): void {\n    this.s = 0.0;\n    this.c = 1.0;\n  }\n\n  set(angle: number | Rot): void {\n    if (typeof angle === 'object') {\n      _ASSERT && Rot.assert(angle);\n      this.s = angle.s;\n      this.c = angle.c;\n\n    } else {\n      _ASSERT && Math.assert(angle);\n      // TODO_ERIN optimize\n      this.s = Math.sin(angle);\n      this.c = Math.cos(angle);\n    }\n  }\n\n  setRot(angle: Rot): void {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n  }\n\n  /** Set using an angle in radians. */\n  setAngle(angle: number): void {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n\n  /** Get the angle in radians. */\n  getAngle(): number {\n    return Math.atan2(this.s, this.c);\n  }\n\n  /** Get the x-axis. */\n  getXAxis(): Vec2 {\n    return Vec2.neo(this.c, this.s);\n  }\n\n  /** Get the u-axis. */\n  getYAxis(): Vec2 {\n    return Vec2.neo(-this.s, this.c);\n  }\n\n  /** Multiply two rotations: q * r */\n  static mul(rot: Rot, m: Rot): Rot;\n  /** Rotate a vector */\n  static mul(rot: Rot, m: Vec2): Vec2;\n  // tslint:disable-next-line:typedef\n  static mul(rot, m) {\n    _ASSERT && Rot.assert(rot);\n    if ('c' in m && 's' in m) {\n      _ASSERT && Rot.assert(m);\n      // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n      // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n      // s = qs * rc + qc * rs\n      // c = qc * rc - qs * rs\n      const qr = Rot.identity();\n      qr.s = rot.s * m.c + rot.c * m.s;\n      qr.c = rot.c * m.c - rot.s * m.s;\n      return qr;\n\n    } else if ('x' in m && 'y' in m) {\n      _ASSERT && Vec2.assert(m);\n      return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n    }\n  }\n\n  /** Multiply two rotations: q * r */\n  static mulRot(rot: Rot, m: Rot): Rot {\n    _ASSERT && Rot.assert(rot);\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    const qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n  }\n\n  /** Rotate a vector */\n  static mulVec2(rot: Rot, m: Vec2): Vec2 {\n    _ASSERT && Rot.assert(rot);\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n\n  static mulSub(rot: Rot, v: Vec2, w: Vec2): Vec2 {\n    const x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n    const y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n    return Vec2.neo(x, y);\n  }\n\n  /** Transpose multiply two rotations: qT * r */\n  static mulT(rot: Rot, m: Rot): Rot;\n  /** Inverse rotate a vector */\n  static mulT(rot: Rot, m: Vec2): Vec2;\n  // tslint:disable-next-line:typedef\n  static mulT(rot, m) {\n    if ('c' in m && 's' in m) {\n      _ASSERT && Rot.assert(m);\n      // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n      // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n      // s = qc * rs - qs * rc\n      // c = qc * rc + qs * rs\n      const qr = Rot.identity();\n      qr.s = rot.c * m.s - rot.s * m.c;\n      qr.c = rot.c * m.c + rot.s * m.s;\n      return qr;\n\n    } else if ('x' in m && 'y' in m) {\n      _ASSERT && Vec2.assert(m);\n      return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n    }\n  }\n\n  /** Transpose multiply two rotations: qT * r */\n  static mulTRot(rot: Rot, m: Rot): Rot {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    const qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n  }\n\n  /** Inverse rotate a vector */\n  static mulTVec2(rot: Rot, m: Vec2Value): Vec2 {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2, Vec2Value } from './Vec2';\nimport { Rot } from './Rot';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n */\nexport class Transform {\n  /** position */\n  p: Vec2;\n\n  /** rotation */\n  q: Rot;\n\n  constructor(position?: Vec2Value, rotation?: number) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof Transform)) {\n      return new Transform(position, rotation);\n    }\n    this.p = Vec2.zero();\n    this.q = Rot.identity();\n    if (typeof position !== 'undefined') {\n      this.p.setVec2(position);\n    }\n    if (typeof rotation !== 'undefined') {\n      this.q.setAngle(rotation);\n    }\n  }\n\n  static clone(xf: Transform): Transform {\n    const obj = Object.create(Transform.prototype);\n    obj.p = Vec2.clone(xf.p);\n    obj.q = Rot.clone(xf.q);\n    return obj;\n  }\n\n  /** @internal */\n  static neo(position: Vec2, rotation: Rot): Transform {\n    const obj = Object.create(Transform.prototype);\n    obj.p = Vec2.clone(position);\n    obj.q = Rot.clone(rotation);\n    return obj;\n  }\n\n  static identity(): Transform {\n    const obj = Object.create(Transform.prototype);\n    obj.p = Vec2.zero();\n    obj.q = Rot.identity();\n    return obj;\n  }\n\n  /**\n   * Set this to the identity transform.\n   */\n  setIdentity(): void {\n    this.p.setZero();\n    this.q.setIdentity();\n  }\n\n  set(position: Vec2, rotation: number): void;\n  set(xf: Transform): void;\n  /**\n   * Set this based on the position and angle.\n   */\n  // tslint:disable-next-line:typedef\n  set(a, b?) {\n    if (typeof b === 'undefined') {\n      this.p.set(a.p);\n      this.q.set(a.q);\n    } else {\n      this.p.set(a);\n      this.q.set(b);\n    }\n  }\n\n  /**\n   * Set this based on the position and angle.\n   */\n  setNum(position: Vec2, rotation: number) {\n    this.p.setVec2(position);\n    this.q.setAngle(rotation);\n  }\n\n  setTransform(xf: Transform): void {\n    this.p.setVec2(xf.p);\n    this.q.setRot(xf.q);\n  }\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Vec2.isValid(obj.p) && Rot.isValid(obj.q);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Transform.isValid(o), 'Invalid Transform!', o);\n  }\n\n  static mul(a: Transform, b: Vec2Value): Vec2;\n  static mul(a: Transform, b: Transform): Transform;\n  // static mul(a: Transform, b: Vec2Value[]): Vec2[];\n  // static mul(a: Transform, b: Transform[]): Transform[];\n  // tslint:disable-next-line:typedef\n  static mul(a, b) {\n    if (Array.isArray(b)) {\n      _ASSERT && Transform.assert(a);\n      const arr = [];\n      for (let i = 0; i < b.length; i++) {\n        arr[i] = Transform.mul(a, b[i]);\n      }\n      return arr;\n\n    } else if ('x' in b && 'y' in b) {\n      return Transform.mulVec2(a, b);\n\n    } else if ('p' in b && 'q' in b) {\n      return Transform.mulXf(a, b);\n    }\n  }\n\n  static mulAll(a: Transform, b: Vec2Value[]): Vec2[];\n  static mulAll(a: Transform, b: Transform[]): Transform[];\n  // tslint:disable-next-line:typedef\n  static mulAll(a: Transform, b) {\n    _ASSERT && Transform.assert(a);\n    const arr = [];\n    for (let i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n  }\n\n  /** @internal @deprecated */\n  // tslint:disable-next-line:typedef\n  static mulFn(a: Transform) {\n    _ASSERT && Transform.assert(a);\n    return function(b: Vec2Value): Vec2 {\n      return Transform.mul(a, b);\n    };\n  }\n\n  static mulVec2(a: Transform, b: Vec2Value): Vec2 {\n    _ASSERT && Transform.assert(a);\n    _ASSERT && Vec2.assert(b);\n    const x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    const y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n  }\n\n  static mulXf(a: Transform, b: Transform): Transform {\n    _ASSERT && Transform.assert(a);\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    const xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n\n  static mulT(a: Transform, b: Vec2Value): Vec2;\n  static mulT(a: Transform, b: Transform): Transform;\n  // tslint:disable-next-line:typedef\n  static mulT(a, b) {\n    if ('x' in b && 'y' in b) {\n      return Transform.mulTVec2(a, b);\n\n    } else if ('p' in b && 'q' in b) {\n      return Transform.mulTXf(a, b);\n    }\n  }\n\n  static mulTVec2(a: Transform, b: Vec2Value): Vec2 {\n    _ASSERT && Transform.assert(a);\n    _ASSERT && Vec2.assert(b);\n    const px = b.x - a.p.x;\n    const py = b.y - a.p.y;\n    const x = (a.q.c * px + a.q.s * py);\n    const y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n  }\n\n  static mulTXf(a: Transform, b: Transform): Transform {\n    _ASSERT && Transform.assert(a);\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    const xf = Transform.identity();\n    xf.q.setRot(Rot.mulTRot(a.q, b.q));\n    xf.p.setVec2(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from './Math';\nimport { Vec2 } from './Vec2';\nimport { Rot } from './Rot';\nimport { Transform } from './Transform';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n */\nexport class Sweep {\n  /** Local center of mass position */\n  localCenter: Vec2;\n\n  /** World center position */\n  c: Vec2;\n\n  /** World angle */\n  a: number;\n\n  /** Fraction of the current time step in the range [0,1], c0 and a0 are c and a at alpha0. */\n  alpha0: number;\n\n  c0: Vec2;\n  a0: number;\n\n  constructor(c?: Vec2, a?: number) {\n    _ASSERT && console.assert(typeof c === 'undefined');\n    _ASSERT && console.assert(typeof a === 'undefined');\n    this.localCenter = Vec2.zero();\n    this.c = Vec2.zero();\n    this.a = 0;\n    this.alpha0 = 0;\n    this.c0 = Vec2.zero();\n    this.a0 = 0;\n  }\n\n  setTransform(xf: Transform): void {\n    const c = Transform.mulVec2(xf, this.localCenter);\n    this.c.setVec2(c);\n    this.c0.setVec2(c);\n\n    this.a = xf.q.getAngle();\n    this.a0 = xf.q.getAngle();\n  }\n\n  setLocalCenter(localCenter: Vec2, xf: Transform): void {\n    this.localCenter.setVec2(localCenter);\n\n    const c = Transform.mulVec2(xf, this.localCenter);\n    this.c.setVec2(c);\n    this.c0.setVec2(c);\n  }\n\n  /**\n   * Get the interpolated transform at a specific time.\n   *\n   * @param xf\n   * @param beta A factor in [0,1], where 0 indicates alpha0\n   */\n  getTransform(xf: Transform, beta: number = 0): void {\n    xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n    xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n    // shift to origin\n    xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n  }\n\n  /**\n   * Advance the sweep forward, yielding a new initial state.\n   *\n   * @param alpha The new initial time\n   */\n  advance(alpha: number): void {\n    _ASSERT && console.assert(this.alpha0 < 1.0);\n    const beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n    this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n    this.a0 = beta * this.a + (1 - beta) * this.a0;\n    this.alpha0 = alpha;\n  }\n\n  forward(): void {\n    this.a0 = this.a;\n    this.c0.setVec2(this.c);\n  }\n\n  /**\n   * normalize the angles in radians to be between -pi and pi.\n   */\n  normalize(): void {\n    const a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n    this.a -= this.a0 - a0;\n    this.a0 = a0;\n  }\n\n  clone(): Sweep {\n    const clone = new Sweep();\n    clone.localCenter.setVec2(this.localCenter);\n    clone.alpha0 = this.alpha0;\n    clone.a0 = this.a0;\n    clone.a = this.a;\n    clone.c0.setVec2(this.c0);\n    clone.c.setVec2(this.c);\n    return clone;\n  }\n\n  set(that: Sweep): void {\n    this.localCenter.setVec2(that.localCenter);\n    this.alpha0 = that.alpha0;\n    this.a0 = that.a0;\n    this.a = that.a;\n    this.c0.setVec2(that.c0);\n    this.c.setVec2(that.c);\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from '../common/Vec2';\n\nexport class Velocity {\n  /** linear */\n  v: Vec2;\n\n  /** angular */\n  w: number;\n\n  constructor() {\n    this.v = Vec2.zero();\n    this.w = 0;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from '../common/Vec2';\nimport { Rot } from '../common/Rot';\nimport { Transform } from '../common/Transform';\n\n\nexport class Position {\n  /** location */\n  c: Vec2;\n\n  /** angle */\n  a: number;\n\n  constructor() {\n    this.c = Vec2.zero();\n    this.a = 0;\n  }\n\n  getTransform(xf: Transform, p: Vec2): Transform {\n    xf.q.setAngle(this.a);\n    xf.p.setVec2(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n    return xf;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { MassData } from '../dynamics/Body';\nimport { AABB, RayCastOutput, RayCastInput } from './AABB';\nimport { DistanceProxy } from './Distance';\nimport type { Transform }  from '../common/Transform';\nimport type { Vec2Value }  from '../common/Vec2';\n\n// todo make shape an interface\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nexport abstract class Shape {\n  m_type: ShapeType;\n  m_radius: number;\n\n  /** @internal */\n  abstract _reset(): void;\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return typeof obj.m_type === 'string' && typeof obj.m_radius === 'number';\n  }\n\n  abstract getRadius(): number;\n\n  /**\n   * Get the type of this shape. You can use this to down cast to the concrete\n   * shape.\n   *\n   * @return the shape type.\n   */\n  abstract getType(): ShapeType;\n\n  /**\n   * @internal\n   * @deprecated Shapes should be treated as immutable.\n   *\n   * clone the concrete shape.\n   */\n  abstract _clone(): Shape;\n\n  /**\n   * Get the number of child primitives.\n   */\n  abstract getChildCount(): number;\n\n  /**\n   * Test a point for containment in this shape. This only works for convex\n   * shapes.\n   *\n   * @param xf The shape world transform.\n   * @param p A point in world coordinates.\n   */\n  abstract testPoint(xf: Transform, p: Vec2Value): boolean;\n\n  /**\n   * Cast a ray against a child shape.\n   *\n   * @param output The ray-cast results.\n   * @param input The ray-cast input parameters.\n   * @param xf The transform to be applied to the shape.\n   * @param childIndex The child shape index\n   */\n  abstract rayCast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: number): boolean;\n\n  /**\n   * Given a transform, compute the associated axis aligned bounding box for a\n   * child shape.\n   *\n   * @param aabb Returns the axis aligned box.\n   * @param xf The world transform of the shape.\n   * @param childIndex The child shape\n   */\n  abstract computeAABB(aabb: AABB, xf: Transform, childIndex: number): void;\n\n  /**\n   * Compute the mass properties of this shape using its dimensions and density.\n   * The inertia tensor is computed about the local origin.\n   *\n   * @param massData Returns the mass data for this shape.\n   * @param density The density in kilograms per meter squared.\n   */\n  abstract computeMass(massData: MassData, density?: number): void;\n\n  abstract computeDistanceProxy(proxy: DistanceProxy, childIndex: number): void;\n\n}\n\nexport type ShapeType = \"circle\" | \"edge\" | \"polygon\" | \"chain\";\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../util/options';\nimport { math as Math } from '../common/Math';\nimport { Vec2, Vec2Value } from '../common/Vec2';\nimport { AABB, RayCastInput, RayCastOutput } from '../collision/AABB';\nimport { Shape, ShapeType } from '../collision/Shape';\nimport { Body, MassData } from \"./Body\";\nimport { BroadPhase } from \"../collision/BroadPhase\";\nimport { Transform } from \"../common/Transform\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n */\nexport interface FixtureOpt {\n  userData?: unknown;\n  /**\n   * The friction coefficient, usually in the range [0,1]\n   */\n  friction?: number;\n  /**\n   * The restitution (elasticity) usually in the range [0,1]\n   */\n  restitution?: number;\n  /**\n   * The density, usually in kg/m^2\n   */\n  density?: number;\n  /**\n   * A sensor shape collects contact information but never generates a collision response.\n   */\n  isSensor?: boolean;\n  /**\n   * Zero, positive or negative collision group.\n   * Fixtures with same positive groupIndex always collide and fixtures with same negative groupIndex never collide.\n   */\n  filterGroupIndex?: number;\n  /**\n   * Collision category bit or bits that this fixture belongs to.\n   * If groupIndex is zero or not matching, then at least one bit in this fixture categoryBits should match other fixture maskBits and vice versa.\n   */\n  filterCategoryBits?: number;\n  /**\n   * Collision category bit or bits that this fixture accept for collision.\n   */\n  filterMaskBits?: number;\n}\n\nexport interface FixtureDef extends FixtureOpt {\n  shape: Shape;\n}\n\nconst FixtureDefDefault: FixtureOpt = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nexport class FixtureProxy {\n  aabb: AABB;\n  fixture: Fixture;\n  childIndex: number;\n  proxyId: number;\n  constructor(fixture: Fixture, childIndex: number) {\n    this.aabb = new AABB();\n    this.fixture = fixture;\n    this.childIndex = childIndex;\n    this.proxyId;\n  }\n}\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc.\n *\n * To create a new Fixture use {@link Body.createFixture}.\n */\nexport class Fixture {\n  /** @internal */ m_body: Body;\n  /** @internal */ m_friction: number;\n  /** @internal */ m_restitution: number;\n  /** @internal */ m_density: number;\n  /** @internal */ m_isSensor: boolean;\n  /** @internal */ m_filterGroupIndex: number;\n  /** @internal */ m_filterCategoryBits: number;\n  /** @internal */ m_filterMaskBits: number;\n  /** @internal */ m_shape: Shape;\n  /** @internal */ m_next: Fixture | null;\n  /** @internal */ m_proxies: FixtureProxy[];\n  /** @internal */ m_proxyCount: number;\n  /** @internal */ m_userData: unknown;\n\n  constructor(body: Body, def: FixtureDef);\n  constructor(body: Body, shape: Shape, def?: FixtureOpt);\n  constructor(body: Body, shape: Shape, density?: number);\n  // tslint:disable-next-line:typedef\n  /** @internal */ constructor(body: Body, shape?, def?) {\n    if (shape.shape) {\n      def = shape;\n      shape = shape.shape;\n\n    } else if (typeof def === 'number') {\n      def = {density : def};\n    }\n\n    def = options(def, FixtureDefDefault);\n\n    this.m_body = body;\n\n    this.m_friction = def.friction;\n    this.m_restitution = def.restitution;\n    this.m_density = def.density;\n    this.m_isSensor = def.isSensor;\n\n    this.m_filterGroupIndex = def.filterGroupIndex;\n    this.m_filterCategoryBits = def.filterCategoryBits;\n    this.m_filterMaskBits = def.filterMaskBits;\n\n    // TODO validate shape\n    this.m_shape = shape; // .clone();\n\n    this.m_next = null;\n\n    this.m_proxies = [];\n    this.m_proxyCount = 0;\n\n    const childCount = this.m_shape.getChildCount();\n    for (let i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n\n    this.m_userData = def.userData;\n  }\n\n  /**\n   * Re-setup fixture.\n   * @internal\n   */\n  _reset(): void {\n    const body = this.getBody();\n    const broadPhase = body.m_world.m_broadPhase;\n    this.destroyProxies(broadPhase);\n    if (this.m_shape._reset) {\n      this.m_shape._reset();\n    }\n    const childCount = this.m_shape.getChildCount();\n    for (let i = 0; i < childCount; ++i) {\n      this.m_proxies[i] = new FixtureProxy(this, i);\n    }\n    this.createProxies(broadPhase, body.m_xf);\n    body.resetMassData();\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      friction: this.m_friction,\n      restitution: this.m_restitution,\n      density: this.m_density,\n      isSensor: this.m_isSensor,\n\n      filterGroupIndex: this.m_filterGroupIndex,\n      filterCategoryBits: this.m_filterCategoryBits,\n      filterMaskBits: this.m_filterMaskBits,\n\n      shape: this.m_shape,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, body: any, restore: any): Fixture {\n    const shape = restore(Shape, data.shape);\n    const fixture = shape && new Fixture(body, shape, data);\n    return fixture;\n  }\n\n  /**\n   * Get the type of the child shape. You can use this to down cast to the\n   * concrete shape.\n   */\n  getType(): ShapeType {\n    return this.m_shape.getType();\n  }\n\n  /**\n   * Get the child shape. You can modify the child shape, however you should not\n   * change the number of vertices because this will crash some collision caching\n   * mechanisms. Manipulating the shape may lead to non-physical behavior.\n   */\n  getShape(): Shape {\n    return this.m_shape;\n  }\n\n  /**\n   * A sensor shape collects contact information but never generates a collision\n   * response.\n   */\n  isSensor(): boolean {\n    return this.m_isSensor;\n  }\n\n  /**\n   * Set if this fixture is a sensor.\n   */\n  setSensor(sensor: boolean): void {\n    if (sensor != this.m_isSensor) {\n      this.m_body.setAwake(true);\n      this.m_isSensor = sensor;\n    }\n  }\n\n  // /**\n  //  * Get the contact filtering data.\n  //  */\n  // getFilterData() {\n  //   return this.m_filter;\n  // }\n\n  /**\n   * Get the user data that was assigned in the fixture definition. Use this to\n   * store your application specific data.\n   */\n  getUserData(): unknown {\n    return this.m_userData;\n  }\n\n  /**\n   * Set the user data. Use this to store your application specific data.\n   */\n  setUserData(data: unknown): void {\n    this.m_userData = data;\n  }\n\n  /**\n   * Get the parent body of this fixture. This is null if the fixture is not\n   * attached.\n   */\n  getBody(): Body {\n    return this.m_body;\n  }\n\n  /**\n   * Get the next fixture in the parent body's fixture list.\n   */\n  getNext(): Fixture | null {\n    return this.m_next;\n  }\n\n  /**\n   * Get the density of this fixture.\n   */\n  getDensity(): number {\n    return this.m_density;\n  }\n\n  /**\n   * Set the density of this fixture. This will _not_ automatically adjust the\n   * mass of the body. You must call Body.resetMassData to update the body's mass.\n   */\n  setDensity(density: number): void {\n    _ASSERT && console.assert(Math.isFinite(density) && density >= 0.0);\n    this.m_density = density;\n  }\n\n  /**\n   * Get the coefficient of friction, usually in the range [0,1].\n   */\n  getFriction(): number {\n    return this.m_friction;\n  }\n\n  /**\n   * Set the coefficient of friction. This will not change the friction of\n   * existing contacts.\n   */\n  setFriction(friction: number): void {\n    this.m_friction = friction;\n  }\n\n  /**\n   * Get the coefficient of restitution.\n   */\n  getRestitution(): number {\n    return this.m_restitution;\n  }\n\n  /**\n   * Set the coefficient of restitution. This will not change the restitution of\n   * existing contacts.\n   */\n  setRestitution(restitution: number): void {\n    this.m_restitution = restitution;\n  }\n\n  /**\n   * Test a point in world coordinates for containment in this fixture.\n   */\n  testPoint(p: Vec2Value): boolean {\n    return this.m_shape.testPoint(this.m_body.getTransform(), p);\n  }\n\n  /**\n   * Cast a ray against this shape.\n   */\n  rayCast(output: RayCastOutput, input: RayCastInput, childIndex: number): boolean {\n    return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n  }\n\n  /**\n   * Get the mass data for this fixture. The mass data is based on the density and\n   * the shape. The rotational inertia is about the shape's origin. This operation\n   * may be expensive.\n   */\n  getMassData(massData: MassData): void {\n    this.m_shape.computeMass(massData, this.m_density);\n  }\n\n  /**\n   * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n   * more accurate AABB, compute it using the shape and the body transform.\n   */\n  getAABB(childIndex: number): AABB {\n    _ASSERT && console.assert(0 <= childIndex && childIndex < this.m_proxies.length);\n    return this.m_proxies[childIndex].aabb;\n  }\n\n  /**\n   * These support body activation/deactivation.\n   */\n  createProxies(broadPhase: BroadPhase, xf: Transform): void {\n    _ASSERT && console.assert(this.m_proxyCount == 0);\n\n    // Create proxies in the broad-phase.\n    this.m_proxyCount = this.m_shape.getChildCount();\n\n    for (let i = 0; i < this.m_proxyCount; ++i) {\n      const proxy = this.m_proxies[i];\n      this.m_shape.computeAABB(proxy.aabb, xf, i);\n      proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n    }\n  }\n\n  destroyProxies(broadPhase: BroadPhase): void {\n    // Destroy proxies in the broad-phase.\n    for (let i = 0; i < this.m_proxyCount; ++i) {\n      const proxy = this.m_proxies[i];\n      broadPhase.destroyProxy(proxy.proxyId);\n      proxy.proxyId = null;\n    }\n\n    this.m_proxyCount = 0;\n  }\n\n  /**\n   * Updates this fixture proxy in broad-phase (with combined AABB of current and\n   * next transformation).\n   */\n  synchronize(broadPhase: BroadPhase, xf1: Transform, xf2: Transform): void {\n    for (let i = 0; i < this.m_proxyCount; ++i) {\n      const proxy = this.m_proxies[i];\n      // Compute an AABB that covers the swept shape (may miss some rotation\n      // effect).\n      const aabb1 = new AABB();\n      const aabb2 = new AABB();\n      this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n      this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n      proxy.aabb.combine(aabb1, aabb2);\n\n      const displacement = Vec2.sub(xf2.p, xf1.p);\n\n      broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n    }\n  }\n\n  /**\n   * Set the contact filtering data. This will not update contacts until the next\n   * time step when either parent body is active and awake. This automatically\n   * calls refilter.\n   */\n  setFilterData(filter: { groupIndex: number, categoryBits: number, maskBits: number }): void {\n    this.m_filterGroupIndex = filter.groupIndex;\n    this.m_filterCategoryBits = filter.categoryBits;\n    this.m_filterMaskBits = filter.maskBits;\n    this.refilter();\n  }\n\n  getFilterGroupIndex(): number {\n    return this.m_filterGroupIndex;\n  }\n\n  setFilterGroupIndex(groupIndex: number): void {\n    this.m_filterGroupIndex = groupIndex;\n  }\n\n  getFilterCategoryBits(): number {\n    return this.m_filterCategoryBits;\n  }\n\n  setFilterCategoryBits(categoryBits: number): void {\n    this.m_filterCategoryBits = categoryBits;\n  }\n\n  getFilterMaskBits(): number {\n    return this.m_filterMaskBits;\n  }\n\n  setFilterMaskBits(maskBits: number): void {\n    this.m_filterMaskBits = maskBits;\n  }\n\n  /**\n   * Call this if you want to establish collision that was previously disabled by\n   * ContactFilter.\n   */\n  refilter(): void {\n    if (this.m_body == null) {\n      return;\n    }\n\n    // Flag associated contacts for filtering.\n    let edge = this.m_body.getContactList();\n    while (edge) {\n      const contact = edge.contact;\n      const fixtureA = contact.getFixtureA();\n      const fixtureB = contact.getFixtureB();\n      if (fixtureA == this || fixtureB == this) {\n        contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n\n    const world = this.m_body.getWorld();\n\n    if (world == null) {\n      return;\n    }\n\n    // Touch each proxy so that new pairs may be created\n    const broadPhase = world.m_broadPhase;\n    for (let i = 0; i < this.m_proxyCount; ++i) {\n      broadPhase.touchProxy(this.m_proxies[i].proxyId);\n    }\n  }\n\n  /**\n   * Implement this method to provide collision filtering, if you want finer\n   * control over contact creation.\n   *\n   * Return true if contact calculations should be performed between these two\n   * fixtures.\n   *\n   * Warning: for performance reasons this is only called when the AABBs begin to\n   * overlap.\n   */\n  shouldCollide(that: Fixture): boolean {\n\n    if (that.m_filterGroupIndex === this.m_filterGroupIndex && that.m_filterGroupIndex !== 0) {\n      return that.m_filterGroupIndex > 0;\n    }\n\n    const collideA = (that.m_filterMaskBits & this.m_filterCategoryBits) !== 0;\n    const collideB = (that.m_filterCategoryBits & this.m_filterMaskBits) !== 0;\n    const collide = collideA && collideB;\n    return collide;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../util/options';\nimport { Vec2, Vec2Value } from '../common/Vec2';\nimport { Rot } from '../common/Rot';\nimport { math as Math } from '../common/Math';\nimport { Sweep } from '../common/Sweep';\nimport { Transform } from '../common/Transform';\nimport { Velocity } from './Velocity';\nimport { Position } from './Position';\nimport { Fixture, FixtureDef, FixtureOpt } from './Fixture';\nimport { Shape } from '../collision/Shape';\nimport { JointEdge } from \"./Joint\";\nimport { World } from \"./World\";\nimport { ContactEdge } from \"./Contact\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nexport type BodyType = 'static' | 'kinematic' | 'dynamic';\n\nconst STATIC = 'static';\nconst KINEMATIC = 'kinematic';\nconst DYNAMIC = 'dynamic';\n\nexport interface BodyDef {\n  /**\n   * Body types are static, kinematic, or dynamic. Note: if a dynamic\n   * body would have zero mass, the mass is set to one.\n   */\n  type?: BodyType;\n  /**\n   * The world position of the body. Avoid creating bodies at the\n   * origin since this can lead to many overlapping shapes.\n   */\n  position?: Vec2;\n  /**\n   * The world angle of the body in radians.\n   */\n  angle?: number;\n  /**\n   * The linear velocity of the body's origin in world co-ordinates.\n   */\n  linearVelocity?: Vec2;\n  angularVelocity?: number;\n  /**\n   * Linear damping is use to reduce the linear velocity. The\n   * damping parameter can be larger than 1.0 but the damping effect becomes\n   * sensitive to the time step when the damping parameter is large.\n   */\n  linearDamping?: number;\n  /**\n   * Angular damping is use to reduce the angular velocity.\n   * The damping parameter can be larger than 1.0 but the damping effect\n   * becomes sensitive to the time step when the damping parameter is large.\n   */\n  angularDamping?: number;\n  /**\n   * Should this body be prevented from rotating? Useful for characters.\n   */\n  fixedRotation?: boolean;\n  /**\n   * Is this a fast moving body that should be prevented from\n   * tunneling through other moving bodies? Note that all bodies are\n   * prevented from tunneling through kinematic and static bodies. This\n   * setting is only considered on dynamic bodies. Warning: You should use\n   * this flag sparingly since it increases processing time.\n   */\n  bullet?: boolean;\n  gravityScale?: number;\n  /**\n   * Set this flag to false if this body should never fall asleep. Note that this increases CPU usage.\n   */\n  allowSleep?: boolean;\n  /**\n   * Is this body initially awake or sleeping?\n   */\n  awake?: boolean;\n  /**\n   * Does this body start out active?\n   */\n  active?: boolean;\n  userData?: any;\n}\n\nconst BodyDefDefault: BodyDef = {\n  type : STATIC,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * MassData This holds the mass data computed for a shape.\n */\nexport class MassData {\n  /** The mass of the shape, usually in kilograms. */\n  mass: number = 0;\n  /** The position of the shape's centroid relative to the shape's origin. */\n  center: Vec2 = Vec2.zero();\n  /** The rotational inertia of the shape about the local origin. */\n  I: number = 0;\n}\n\n/**\n * A rigid body composed of one or more fixtures.\n *\n * To create a new Body use {@link World.createBody}.\n */\nexport class Body {\n  /**\n   * A static body does not move under simulation and behaves as if it has infinite mass.\n   * Internally, zero is stored for the mass and the inverse mass.\n   * Static bodies can be moved manually by the user.\n   * A static body has zero velocity.\n   * Static bodies do not collide with other static or kinematic bodies.\n   */\n  static readonly STATIC: BodyType = 'static';\n  /**\n   * A kinematic body moves under simulation according to its velocity.\n   * Kinematic bodies do not respond to forces.\n   * They can be moved manually by the user, but normally a kinematic body is moved by setting its velocity.\n   * A kinematic body behaves as if it has infinite mass, however, zero is stored for the mass and the inverse mass.\n   * Kinematic bodies do not collide with other kinematic or static bodies.\n   */\n  static readonly KINEMATIC: BodyType = 'kinematic';\n\n  /**\n   * A dynamic body is fully simulated.\n   * They can be moved manually by the user, but normally they move according to forces.\n   * A dynamic body can collide with all body types.\n   * A dynamic body always has finite, non-zero mass.\n   * If you try to set the mass of a dynamic body to zero, it will automatically acquire a mass of one kilogram and it won't rotate.\n   */\n  static readonly DYNAMIC: BodyType = 'dynamic';\n\n  /** @internal */ m_world: World;\n  /** @internal */ m_awakeFlag: boolean;\n  /** @internal */ m_autoSleepFlag: boolean;\n  /** @internal */ m_bulletFlag: boolean;\n  /** @internal */ m_fixedRotationFlag: boolean;\n  /** @internal */ m_activeFlag: boolean;\n  /** @internal */ m_islandFlag: boolean;\n  /** @internal */ m_toiFlag: boolean;\n  /** @internal */ m_userData: unknown;\n  /** @internal */ m_type: BodyType;\n  /** @internal */ m_mass: number;\n  /** @internal */ m_invMass: number;\n  /** @internal Rotational inertia about the center of mass. */\n  m_I: number;\n  /** @internal */ m_invI: number;\n  /** @internal the body origin transform */\n  m_xf: Transform;\n  /** @internal the swept motion for CCD */\n  m_sweep: Sweep;\n  // position and velocity correction\n  /** @internal */ c_velocity: Velocity;\n  /** @internal */ c_position: Position;\n  /** @internal */ m_force: Vec2;\n  /** @internal */ m_torque: number;\n  /** @internal */ m_linearVelocity: Vec2;\n  /** @internal */ m_angularVelocity: number;\n  /** @internal */ m_linearDamping: number;\n  /** @internal */ m_angularDamping: number;\n  /** @internal */ m_gravityScale: number;\n  /** @internal */ m_sleepTime: number;\n  /** @internal */ m_jointList: JointEdge | null;\n  /** @internal */ m_contactList: ContactEdge | null;\n  /** @internal */ m_fixtureList: Fixture | null;\n  /** @internal */ m_prev: Body | null;\n  /** @internal */ m_next: Body | null;\n  /** @internal */ m_destroyed: boolean;\n\n  /** @internal */\n  constructor(world: World, def: BodyDef) {\n    def = options(def, BodyDefDefault);\n\n    _ASSERT && console.assert(Vec2.isValid(def.position));\n    _ASSERT && console.assert(Vec2.isValid(def.linearVelocity));\n    _ASSERT && console.assert(Math.isFinite(def.angle));\n    _ASSERT && console.assert(Math.isFinite(def.angularVelocity));\n    _ASSERT && console.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n    _ASSERT && console.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n    this.m_world = world;\n\n    this.m_awakeFlag = def.awake;\n    this.m_autoSleepFlag = def.allowSleep;\n    this.m_bulletFlag = def.bullet;\n    this.m_fixedRotationFlag = def.fixedRotation;\n    this.m_activeFlag = def.active;\n\n    this.m_islandFlag = false;\n    this.m_toiFlag = false;\n\n    this.m_userData = def.userData;\n    this.m_type = def.type;\n\n    if (this.m_type == DYNAMIC) {\n      this.m_mass = 1.0;\n      this.m_invMass = 1.0;\n    } else {\n      this.m_mass = 0.0;\n      this.m_invMass = 0.0;\n    }\n\n    // Rotational inertia about the center of mass.\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n\n    // the body origin transform\n    this.m_xf = Transform.identity();\n    this.m_xf.p = Vec2.clone(def.position);\n    this.m_xf.q.setAngle(def.angle);\n\n    // the swept motion for CCD\n    this.m_sweep = new Sweep();\n    this.m_sweep.setTransform(this.m_xf);\n\n    // position and velocity correction\n    this.c_velocity = new Velocity();\n    this.c_position = new Position();\n\n    this.m_force = Vec2.zero();\n    this.m_torque = 0.0;\n\n    this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n    this.m_angularVelocity = def.angularVelocity;\n\n    this.m_linearDamping = def.linearDamping;\n    this.m_angularDamping = def.angularDamping;\n    this.m_gravityScale = def.gravityScale;\n\n    this.m_sleepTime = 0.0;\n\n    this.m_jointList = null;\n    this.m_contactList = null;\n    this.m_fixtureList = null;\n\n    this.m_prev = null;\n    this.m_next = null;\n\n    this.m_destroyed = false;\n  }\n\n  /** @internal */\n  _serialize(): object {\n    const fixtures = [];\n    for (let f = this.m_fixtureList; f; f = f.m_next) {\n      fixtures.push(f);\n    }\n    return {\n      type: this.m_type,\n      bullet: this.m_bulletFlag,\n      position: this.m_xf.p,\n      angle: this.m_xf.q.getAngle(),\n      linearVelocity: this.m_linearVelocity,\n      angularVelocity: this.m_angularVelocity,\n      fixtures,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): Body {\n    const body = new Body(world, data);\n\n    if (data.fixtures) {\n      for (let i = data.fixtures.length - 1; i >= 0; i--) {\n        const fixture = restore(Fixture, data.fixtures[i], body);\n        body._addFixture(fixture);\n      }\n    }\n    return body;\n  }\n\n  isWorldLocked(): boolean {\n    return this.m_world && this.m_world.isLocked() ? true : false;\n  }\n\n  getWorld(): World {\n    return this.m_world;\n  }\n\n  getNext(): Body | null {\n    return this.m_next;\n  }\n\n  setUserData(data: any): void {\n    this.m_userData = data;\n  }\n\n  getUserData(): unknown {\n    return this.m_userData;\n  }\n\n  getFixtureList(): Fixture | null {\n    return this.m_fixtureList;\n  }\n\n  getJointList(): JointEdge | null {\n    return this.m_jointList;\n  }\n\n  /**\n   * Warning: this list changes during the time step and you may miss some\n   * collisions if you don't use ContactListener.\n   */\n  getContactList(): ContactEdge | null {\n    return this.m_contactList;\n  }\n\n  isStatic(): boolean {\n    return this.m_type == STATIC;\n  }\n\n  isDynamic(): boolean {\n    return this.m_type == DYNAMIC;\n  }\n\n  isKinematic(): boolean {\n    return this.m_type == KINEMATIC;\n  }\n\n  /**\n   * This will alter the mass and velocity.\n   */\n  setStatic(): Body {\n    this.setType(STATIC);\n    return this;\n  }\n\n  setDynamic(): Body {\n    this.setType(DYNAMIC);\n    return this;\n  }\n\n  setKinematic(): Body {\n    this.setType(KINEMATIC);\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  getType(): BodyType {\n    return this.m_type;\n  }\n\n  /**\n   * @internal\n   */\n  setType(type: BodyType): void {\n    _ASSERT && console.assert(type === STATIC || type === KINEMATIC || type === DYNAMIC);\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n\n    if (this.isWorldLocked() == true) {\n      return;\n    }\n\n    if (this.m_type == type) {\n      return;\n    }\n\n    this.m_type = type;\n\n    this.resetMassData();\n\n    if (this.m_type == STATIC) {\n      this.m_linearVelocity.setZero();\n      this.m_angularVelocity = 0.0;\n      this.m_sweep.forward();\n      this.synchronizeFixtures();\n    }\n\n    this.setAwake(true);\n\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n\n    // Delete the attached contacts.\n    let ce = this.m_contactList;\n    while (ce) {\n      const ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n\n    // Touch the proxies so that new contacts will be created (when appropriate)\n    const broadPhase = this.m_world.m_broadPhase;\n    for (let f = this.m_fixtureList; f; f = f.m_next) {\n      const proxyCount = f.m_proxyCount;\n      for (let i = 0; i < proxyCount; ++i) {\n        broadPhase.touchProxy(f.m_proxies[i].proxyId);\n      }\n    }\n  }\n\n  isBullet(): boolean {\n    return this.m_bulletFlag;\n  }\n\n  /**\n   * Should this body be treated like a bullet for continuous collision detection?\n   */\n  setBullet(flag: boolean): void {\n    this.m_bulletFlag = !!flag;\n  }\n\n  isSleepingAllowed(): boolean {\n    return this.m_autoSleepFlag;\n  }\n\n  setSleepingAllowed(flag: boolean): void {\n    this.m_autoSleepFlag = !!flag;\n    if (this.m_autoSleepFlag == false) {\n      this.setAwake(true);\n    }\n  }\n\n  isAwake(): boolean {\n    return this.m_awakeFlag;\n  }\n\n  /**\n   * Set the sleep state of the body. A sleeping body has very low CPU cost.\n   *\n   * @param flag Set to true to wake the body, false to put it to sleep.\n   */\n  setAwake(flag: boolean): void {\n    if (flag) {\n      if (this.m_awakeFlag == false) {\n        this.m_awakeFlag = true;\n        this.m_sleepTime = 0.0;\n      }\n    } else {\n      this.m_awakeFlag = false;\n      this.m_sleepTime = 0.0;\n      this.m_linearVelocity.setZero();\n      this.m_angularVelocity = 0.0;\n      this.m_force.setZero();\n      this.m_torque = 0.0;\n    }\n  }\n\n  isActive(): boolean {\n    return this.m_activeFlag;\n  }\n\n  /**\n   * Set the active state of the body. An inactive body is not simulated and\n   * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n   * will be added to the broad-phase. If you pass a flag of false, all fixtures\n   * will be removed from the broad-phase and all contacts will be destroyed.\n   * Fixtures and joints are otherwise unaffected.\n   *\n   * You may continue to create/destroy fixtures and joints on inactive bodies.\n   * Fixtures on an inactive body are implicitly inactive and will not participate\n   * in collisions, ray-casts, or queries. Joints connected to an inactive body\n   * are implicitly inactive. An inactive body is still owned by a World object\n   * and remains\n   */\n  setActive(flag: boolean): void {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n\n    if (flag == this.m_activeFlag) {\n      return;\n    }\n\n    this.m_activeFlag = !!flag;\n\n    if (this.m_activeFlag) {\n      // Create all proxies.\n      const broadPhase = this.m_world.m_broadPhase;\n      for (let f = this.m_fixtureList; f; f = f.m_next) {\n        f.createProxies(broadPhase, this.m_xf);\n      }\n      // Contacts are created the next time step.\n\n    } else {\n      // Destroy all proxies.\n      const broadPhase = this.m_world.m_broadPhase;\n      for (let f = this.m_fixtureList; f; f = f.m_next) {\n        f.destroyProxies(broadPhase);\n      }\n\n      // Destroy the attached contacts.\n      let ce = this.m_contactList;\n      while (ce) {\n        const ce0 = ce;\n        ce = ce.next;\n        this.m_world.destroyContact(ce0.contact);\n      }\n      this.m_contactList = null;\n    }\n  }\n\n  isFixedRotation(): boolean {\n    return this.m_fixedRotationFlag;\n  }\n\n  /**\n   * Set this body to have fixed rotation. This causes the mass to be reset.\n   */\n  setFixedRotation(flag: boolean): void {\n    if (this.m_fixedRotationFlag == flag) {\n      return;\n    }\n\n    this.m_fixedRotationFlag = !!flag;\n\n    this.m_angularVelocity = 0.0;\n\n    this.resetMassData();\n  }\n\n  /**\n   * Get the world transform for the body's origin.\n   */\n  getTransform(): Transform {\n    return this.m_xf;\n  }\n\n  /**\n   * Set the position of the body's origin and rotation. Manipulating a body's\n   * transform may cause non-physical behavior. Note: contacts are updated on the\n   * next call to World.step.\n   *\n   * @param position The world position of the body's local origin.\n   * @param angle The world rotation in radians.\n   */\n  setTransform(position: Vec2, angle: number): void {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n    if (this.isWorldLocked() == true) {\n      return;\n    }\n\n    this.m_xf.setNum(position, angle);\n    this.m_sweep.setTransform(this.m_xf);\n\n    const broadPhase = this.m_world.m_broadPhase;\n    for (let f = this.m_fixtureList; f; f = f.m_next) {\n      f.synchronize(broadPhase, this.m_xf, this.m_xf);\n    }\n  }\n\n  synchronizeTransform(): void {\n    this.m_sweep.getTransform(this.m_xf, 1);\n  }\n\n  /**\n   * Update fixtures in broad-phase.\n   */\n  synchronizeFixtures(): void {\n    const xf = Transform.identity();\n\n    this.m_sweep.getTransform(xf, 0);\n\n    const broadPhase = this.m_world.m_broadPhase;\n    for (let f = this.m_fixtureList; f; f = f.m_next) {\n      f.synchronize(broadPhase, xf, this.m_xf);\n    }\n  }\n\n  /**\n   * Used in TOI.\n   */\n  advance(alpha: number): void {\n    // Advance to the new safe time. This doesn't sync the broad-phase.\n    this.m_sweep.advance(alpha);\n    this.m_sweep.c.setVec2(this.m_sweep.c0);\n    this.m_sweep.a = this.m_sweep.a0;\n    this.m_sweep.getTransform(this.m_xf, 1);\n  }\n\n  /**\n   * Get the world position for the body's origin.\n   */\n  getPosition(): Vec2 {\n    return this.m_xf.p;\n  }\n\n  setPosition(p: Vec2): void {\n    this.setTransform(p, this.m_sweep.a);\n  }\n\n  /**\n   * Get the current world rotation angle in radians.\n   */\n  getAngle(): number {\n    return this.m_sweep.a;\n  }\n\n  setAngle(angle: number): void {\n    this.setTransform(this.m_xf.p, angle);\n  }\n\n  /**\n   * Get the world position of the center of mass.\n   */\n  getWorldCenter(): Vec2 {\n    return this.m_sweep.c;\n  }\n\n  /**\n   * Get the local position of the center of mass.\n   */\n  getLocalCenter(): Vec2 {\n    return this.m_sweep.localCenter;\n  }\n\n  /**\n   * Get the linear velocity of the center of mass.\n   *\n   * @return the linear velocity of the center of mass.\n   */\n  getLinearVelocity(): Vec2 {\n    return this.m_linearVelocity;\n  }\n\n  /**\n   * Get the world linear velocity of a world point attached to this body.\n   *\n   * @param worldPoint A point in world coordinates.\n   */\n  getLinearVelocityFromWorldPoint(worldPoint: Vec2): Vec2 {\n    const localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n    return Vec2.add(this.m_linearVelocity, Vec2.crossNumVec2(this.m_angularVelocity,\n      localCenter));\n  }\n\n  /**\n   * Get the world velocity of a local point.\n   *\n   * @param localPoint A point in local coordinates.\n   */\n  getLinearVelocityFromLocalPoint(localPoint: Vec2): Vec2 {\n    return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n  }\n\n  /**\n   * Set the linear velocity of the center of mass.\n   *\n   * @param v The new linear velocity of the center of mass.\n   */\n  setLinearVelocity(v: Vec2): void {\n    if (this.m_type == STATIC) {\n      return;\n    }\n    if (Vec2.dot(v, v) > 0.0) {\n      this.setAwake(true);\n    }\n    this.m_linearVelocity.setVec2(v);\n  }\n\n  /**\n   * Get the angular velocity.\n   *\n   * @returns the angular velocity in radians/second.\n   */\n  getAngularVelocity(): number {\n    return this.m_angularVelocity;\n  }\n\n  /**\n   * Set the angular velocity.\n   *\n   * @param omega The new angular velocity in radians/second.\n   */\n  setAngularVelocity(w: number): void {\n    if (this.m_type == STATIC) {\n      return;\n    }\n    if (w * w > 0.0) {\n      this.setAwake(true);\n    }\n    this.m_angularVelocity = w;\n  }\n\n  getLinearDamping(): number {\n    return this.m_linearDamping;\n  }\n\n  setLinearDamping(linearDamping: number): void {\n    this.m_linearDamping = linearDamping;\n  }\n\n  getAngularDamping(): number {\n    return this.m_angularDamping;\n  }\n\n  setAngularDamping(angularDamping: number): void {\n    this.m_angularDamping = angularDamping;\n  }\n\n  getGravityScale(): number {\n    return this.m_gravityScale;\n  }\n\n  /**\n   * Scale the gravity applied to this body.\n   */\n  setGravityScale(scale: number): void {\n    this.m_gravityScale = scale;\n  }\n\n  /**\n   * Get the total mass of the body.\n   *\n   * @returns The mass, usually in kilograms (kg).\n   */\n  getMass(): number {\n    return this.m_mass;\n  }\n\n  /**\n   * Get the rotational inertia of the body about the local origin.\n   *\n   * @return the rotational inertia, usually in kg-m^2.\n   */\n  getInertia(): number {\n    return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n  }\n\n  /**\n   * Copy the mass data of the body to data.\n   */\n  getMassData(data: MassData): void {\n    data.mass = this.m_mass;\n    data.I = this.getInertia();\n    data.center.setVec2(this.m_sweep.localCenter);\n  }\n\n  /**\n   * This resets the mass properties to the sum of the mass properties of the\n   * fixtures. This normally does not need to be called unless you called\n   * SetMassData to override the mass and you later want to reset the mass.\n   */\n  resetMassData(): void {\n    // Compute mass data from shapes. Each shape has its own density.\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n    this.m_sweep.localCenter.setZero();\n\n    // Static and kinematic bodies have zero mass.\n    if (this.isStatic() || this.isKinematic()) {\n      this.m_sweep.c0.setVec2(this.m_xf.p);\n      this.m_sweep.c.setVec2(this.m_xf.p);\n      this.m_sweep.a0 = this.m_sweep.a;\n      return;\n    }\n\n    _ASSERT && console.assert(this.isDynamic());\n\n    // Accumulate mass over all fixtures.\n    const localCenter = Vec2.zero();\n    for (let f = this.m_fixtureList; f; f = f.m_next) {\n      if (f.m_density == 0.0) {\n        continue;\n      }\n\n      const massData = new MassData();\n      f.getMassData(massData);\n      this.m_mass += massData.mass;\n      localCenter.addMul(massData.mass, massData.center);\n      this.m_I += massData.I;\n    }\n\n    // Compute center of mass.\n    if (this.m_mass > 0.0) {\n      this.m_invMass = 1.0 / this.m_mass;\n      localCenter.mul(this.m_invMass);\n\n    } else {\n      // Force all dynamic bodies to have a positive mass.\n      this.m_mass = 1.0;\n      this.m_invMass = 1.0;\n    }\n\n    if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n      // Center the inertia about the center of mass.\n      this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n      _ASSERT && console.assert(this.m_I > 0.0);\n      this.m_invI = 1.0 / this.m_I;\n\n    } else {\n      this.m_I = 0.0;\n      this.m_invI = 0.0;\n    }\n\n    // Move center of mass.\n    const oldCenter = Vec2.clone(this.m_sweep.c);\n    this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n    // Update center of mass velocity.\n    this.m_linearVelocity.add(Vec2.crossNumVec2(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n  }\n\n  /**\n   * Set the mass properties to override the mass properties of the fixtures. Note\n   * that this changes the center of mass position. Note that creating or\n   * destroying fixtures can also alter the mass. This function has no effect if\n   * the body isn't dynamic.\n   *\n   * @param massData The mass properties.\n   */\n  setMassData(massData: MassData): void {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n    if (this.isWorldLocked() == true) {\n      return;\n    }\n\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n\n    this.m_invMass = 0.0;\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n\n    this.m_mass = massData.mass;\n    if (this.m_mass <= 0.0) {\n      this.m_mass = 1.0;\n    }\n\n    this.m_invMass = 1.0 / this.m_mass;\n\n    if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n      this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n      _ASSERT && console.assert(this.m_I > 0.0);\n      this.m_invI = 1.0 / this.m_I;\n    }\n\n    // Move center of mass.\n    const oldCenter = Vec2.clone(this.m_sweep.c);\n    this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n    // Update center of mass velocity.\n    this.m_linearVelocity.add(Vec2.crossNumVec2(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n  }\n\n  /**\n   * Apply a force at a world point. If the force is not applied at the center of\n   * mass, it will generate a torque and affect the angular velocity. This wakes\n   * up the body.\n   *\n   * @param force The world force vector, usually in Newtons (N).\n   * @param point The world position of the point of application.\n   * @param wake Also wake up the body\n   */\n  applyForce(force: Vec2, point: Vec2, wake: boolean = true): void {\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n    if (wake && this.m_awakeFlag == false) {\n      this.setAwake(true);\n    }\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_force.add(force);\n      this.m_torque += Vec2.crossVec2Vec2(Vec2.sub(point, this.m_sweep.c), force);\n    }\n  }\n\n  /**\n   * Apply a force to the center of mass. This wakes up the body.\n   *\n   * @param force The world force vector, usually in Newtons (N).\n   * @param wake Also wake up the body\n   */\n  applyForceToCenter(force: Vec2, wake: boolean = true): void {\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n    if (wake && this.m_awakeFlag == false) {\n      this.setAwake(true);\n    }\n    // Don't accumulate a force if the body is sleeping\n    if (this.m_awakeFlag) {\n      this.m_force.add(force);\n    }\n  }\n\n  /**\n   * Apply a torque. This affects the angular velocity without affecting the\n   * linear velocity of the center of mass. This wakes up the body.\n   *\n   * @param torque About the z-axis (out of the screen), usually in N-m.\n   * @param wake Also wake up the body\n   */\n  applyTorque(torque: number, wake: boolean = true): void {\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n    if (wake && this.m_awakeFlag == false) {\n      this.setAwake(true);\n    }\n    // Don't accumulate a force if the body is sleeping\n    if (this.m_awakeFlag) {\n      this.m_torque += torque;\n    }\n  }\n\n  /**\n   * Apply an impulse at a point. This immediately modifies the velocity. It also\n   * modifies the angular velocity if the point of application is not at the\n   * center of mass. This wakes up the body.\n   *\n   * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n   * @param point The world position of the point of application.\n   * @param wake Also wake up the body\n   */\n  applyLinearImpulse(impulse: Vec2, point: Vec2, wake: boolean = true): void {\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n    if (wake && this.m_awakeFlag == false) {\n      this.setAwake(true);\n    }\n\n    // Don't accumulate velocity if the body is sleeping\n    if (this.m_awakeFlag) {\n      this.m_linearVelocity.addMul(this.m_invMass, impulse);\n      this.m_angularVelocity += this.m_invI * Vec2.crossVec2Vec2(Vec2.sub(point, this.m_sweep.c), impulse);\n    }\n  }\n\n  /**\n   * Apply an angular impulse.\n   *\n   * @param impulse The angular impulse in units of kg*m*m/s\n   * @param wake Also wake up the body\n   */\n  applyAngularImpulse(impulse: number, wake: boolean = true): void {\n    if (this.m_type != DYNAMIC) {\n      return;\n    }\n\n    if (wake && this.m_awakeFlag == false) {\n      this.setAwake(true);\n    }\n    // Don't accumulate velocity if the body is sleeping\n    if (this.m_awakeFlag) {\n      this.m_angularVelocity += this.m_invI * impulse;\n    }\n  }\n\n  /**\n   * This is used to prevent connected bodies (by joints) from colliding,\n   * depending on the joint's collideConnected flag.\n   */\n  shouldCollide(that: Body): boolean {\n    // At least one body should be dynamic.\n    if (this.m_type != DYNAMIC && that.m_type != DYNAMIC) {\n      return false;\n    }\n    // Does a joint prevent collision?\n    for (let jn = this.m_jointList; jn; jn = jn.next) {\n      if (jn.other == that) {\n        if (jn.joint.m_collideConnected == false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @internal Used for deserialize.\n   */\n  _addFixture(fixture: Fixture): Fixture {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n\n    if (this.isWorldLocked() == true) {\n      return null;\n    }\n\n    if (this.m_activeFlag) {\n      const broadPhase = this.m_world.m_broadPhase;\n      fixture.createProxies(broadPhase, this.m_xf);\n    }\n\n    fixture.m_next = this.m_fixtureList;\n    this.m_fixtureList = fixture;\n\n    // Adjust mass properties if needed.\n    if (fixture.m_density > 0.0) {\n      this.resetMassData();\n    }\n\n    // Let the world know we have a new fixture. This will cause new contacts\n    // to be created at the beginning of the next time step.\n    this.m_world.m_newFixture = true;\n\n    return fixture;\n  }\n\n  /**\n   * Creates a fixture and attach it to this body.\n   *\n   * If the density is non-zero, this function automatically updates the mass of\n   * the body.\n   *\n   * Contacts are not created until the next time step.\n   *\n   * Warning: This function is locked during callbacks.\n   */\n  createFixture(def: FixtureDef): Fixture;\n  createFixture(shape: Shape, opt?: FixtureOpt): Fixture;\n  createFixture(shape: Shape, density?: number): Fixture;\n  // tslint:disable-next-line:typedef\n  createFixture(shape, fixdef?) {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n\n    if (this.isWorldLocked() == true) {\n      return null;\n    }\n\n    const fixture = new Fixture(this, shape, fixdef);\n    this._addFixture(fixture);\n    return fixture;\n  }\n\n  /**\n   * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n   * all contacts associated with this fixture. This will automatically adjust the\n   * mass of the body if the body is dynamic and the fixture has positive density.\n   * All fixtures attached to a body are implicitly destroyed when the body is\n   * destroyed.\n   *\n   * Warning: This function is locked during callbacks.\n   *\n   * @param fixture The fixture to be removed.\n   */\n  destroyFixture(fixture: Fixture): void {\n    _ASSERT && console.assert(this.isWorldLocked() == false);\n\n    if (this.isWorldLocked() == true) {\n      return;\n    }\n\n    _ASSERT && console.assert(fixture.m_body == this);\n\n    // Remove the fixture from this body's singly linked list.\n    let found = false;\n    if (this.m_fixtureList === fixture) {\n      this.m_fixtureList = fixture.m_next;\n      found = true;\n\n    } else {\n      let node = this.m_fixtureList;\n      while (node != null) {\n        if (node.m_next === fixture) {\n          node.m_next = fixture.m_next;\n          found = true;\n          break;\n        }\n        node = node.m_next;\n      }\n    }\n\n    // You tried to remove a shape that is not attached to this body.\n    _ASSERT && console.assert(found);\n\n    // Destroy any contacts associated with the fixture.\n    let edge = this.m_contactList;\n    while (edge) {\n      const c = edge.contact;\n      edge = edge.next;\n\n      const fixtureA = c.getFixtureA();\n      const fixtureB = c.getFixtureB();\n\n      if (fixture == fixtureA || fixture == fixtureB) {\n        // This destroys the contact and removes it from\n        // this body's contact list.\n        this.m_world.destroyContact(c);\n      }\n    }\n\n    if (this.m_activeFlag) {\n      const broadPhase = this.m_world.m_broadPhase;\n      fixture.destroyProxies(broadPhase);\n    }\n\n    fixture.m_body = null;\n    fixture.m_next = null;\n\n    this.m_world.publish('remove-fixture', fixture);\n\n    // Reset the mass data.\n    this.resetMassData();\n  }\n\n  /**\n   * Get the corresponding world point of a local point.\n   */\n  getWorldPoint(localPoint: Vec2): Vec2 {\n    return Transform.mulVec2(this.m_xf, localPoint);\n  }\n\n  /**\n   * Get the corresponding world vector of a local vector.\n   */\n  getWorldVector(localVector: Vec2): Vec2 {\n    return Rot.mulVec2(this.m_xf.q, localVector);\n  }\n\n  /**\n   * Gets the corresponding local point of a world point.\n   */\n  getLocalPoint(worldPoint: Vec2Value): Vec2 {\n    return Transform.mulTVec2(this.m_xf, worldPoint);\n  }\n\n  /**\n   * Gets the corresponding local vector of a world vector.\n   */\n  getLocalVector(worldVector: Vec2Value): Vec2 {\n    return Rot.mulTVec2(this.m_xf.q, worldVector);\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { Vec2 }  from '../common/Vec2';\nimport type { Body }  from './Body';\nimport { TimeStep } from \"./Solver\";\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n */\nexport class JointEdge {\n  /**\n   * provides quick access to the other body attached.\n   */\n  other: Body | null = null;\n  /**\n   * the joint\n   */\n  joint: Joint | null = null;\n  /**\n   * prev the previous joint edge in the body's joint list\n   */\n  prev: JointEdge | null = null;\n  /**\n   * the next joint edge in the body's joint list\n   */\n  next: JointEdge | null = null;\n}\n\n/**\n * Joint definitions are used to construct joints.\n */\nexport interface JointOpt {\n  /**\n   * Use this to attach application specific data to your joints.\n   */\n  userData?: any;\n  /**\n   * Set this flag to true if the attached bodies\n   * should collide.\n   */\n  collideConnected?: boolean;\n}\n/**\n * Joint definitions are used to construct joints.\n */\nexport interface JointDef extends JointOpt {\n  /**\n   * The first attached body.\n   */\n  bodyA: Body;\n  /**\n   * The second attached body.\n   */\n  bodyB: Body;\n}\n\nconst DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n */\nexport abstract class Joint {\n\n  /** @internal */ m_type: string = 'unknown-joint';\n\n  /** @internal */ m_bodyA: Body;\n  /** @internal */ m_bodyB: Body;\n\n  /** @internal */ m_collideConnected: boolean;\n\n  /** @internal */ m_prev: Joint | null = null;\n  /** @internal */ m_next: Joint | null = null;\n\n  /** @internal */ m_edgeA: JointEdge = new JointEdge();\n  /** @internal */ m_edgeB: JointEdge = new JointEdge();\n\n  /** @internal */ m_islandFlag: boolean = false;\n  /** @internal */ m_userData: unknown;\n\n  constructor(def: JointDef);\n  constructor(def: JointOpt, bodyA: Body, bodyB: Body);\n  constructor(def: JointDef | JointOpt, bodyA?: Body, bodyB?: Body) {\n    bodyA = 'bodyA' in def ? def.bodyA : bodyA;\n    bodyB = 'bodyB' in def ? def.bodyB : bodyB;\n\n    _ASSERT && console.assert(!!bodyA);\n    _ASSERT && console.assert(!!bodyB);\n    _ASSERT && console.assert(bodyA != bodyB);\n\n    this.m_bodyA = bodyA!;\n    this.m_bodyB = bodyB!;\n\n    this.m_collideConnected = !!def.collideConnected;\n    this.m_userData = def.userData;\n  }\n\n  /**\n   * Short-cut function to determine if either body is inactive.\n   */\n  isActive(): boolean {\n    return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n  }\n\n  /**\n   * Get the type of the concrete joint.\n   */\n  getType(): string {\n    return this.m_type;\n  }\n\n  /**\n   * Get the first body attached to this joint.\n   */\n  getBodyA(): Body {\n    return this.m_bodyA;\n  }\n\n  /**\n   * Get the second body attached to this joint.\n   */\n  getBodyB(): Body {\n    return this.m_bodyB;\n  }\n\n  /**\n   * Get the next joint the world joint list.\n   */\n  getNext(): Joint {\n    return this.m_next;\n  }\n\n  getUserData(): unknown {\n    return this.m_userData;\n  }\n\n  setUserData(data: unknown): void {\n    this.m_userData = data;\n  }\n\n  /**\n   * Get collide connected. Note: modifying the collide connect flag won't work\n   * correctly because the flag is only checked when fixture AABBs begin to\n   * overlap.\n   */\n  getCollideConnected(): boolean {\n    return this.m_collideConnected;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  abstract getAnchorA(): Vec2;\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  abstract getAnchorB(): Vec2;\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  abstract getReactionForce(inv_dt: number): Vec2;\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  abstract getReactionTorque(inv_dt: number): number;\n\n  /**\n   * Shift the origin for any points stored in world coordinates.\n   */\n  shiftOrigin(newOrigin: Vec2): void {}\n\n  abstract initVelocityConstraints(step: TimeStep): void;\n\n  abstract solveVelocityConstraints(step: TimeStep): void;\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  abstract solvePositionConstraints(step: TimeStep): boolean;\n\n}\n","export const stats = {\n  gjkCalls: 0,\n  gjkIters: 0,\n  gjkMaxIters: 0,\n\n  toiTime: 0,\n  toiMaxTime: 0,\n  toiCalls: 0,\n  toiIters: 0,\n  toiMaxIters: 0,\n  toiRootIters: 0,\n  toiMaxRootIters: 0,\n\n  toString(newline?: string): string {\n    newline = typeof newline === 'string' ? newline : '\\n';\n    let string = \"\";\n    // tslint:disable-next-line:no-for-in\n    for (const name in this) {\n      if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n        string += name + ': ' + this[name] + newline;\n      }\n    }\n    return string;\n  }\n};\n","export const now = function(): number {\n  return Date.now();\n};\n\nexport const diff = function(time: number): number {\n  return Date.now() - time;\n};\n\nexport default {\n  now,\n  diff,\n};\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Settings } from '../Settings';\nimport { stats } from '../util/stats';\nimport { Shape } from './Shape';\nimport { math as Math } from '../common/Math';\nimport { Vec2 } from '../common/Vec2';\nimport { Rot } from '../common/Rot';\nimport { Transform } from '../common/Transform';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nexport class DistanceInput {\n  proxyA: DistanceProxy = new DistanceProxy();\n  proxyB: DistanceProxy = new DistanceProxy();\n  transformA: Transform | null = null;\n  transformB: Transform | null = null;\n  useRadii: boolean = false;\n}\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nexport class DistanceOutput {\n  pointA: Vec2 = Vec2.zero();\n  pointB: Vec2 = Vec2.zero();\n  distance: number;\n  iterations: number;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nexport class SimplexCache {\n  metric: number = 0;\n  indexA: number[] = [];\n  indexB: number[] = [];\n  count: number = 0;\n}\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n */\nexport const Distance = function (output: DistanceOutput, cache: SimplexCache, input: DistanceInput): void {\n  ++stats.gjkCalls;\n\n  const proxyA = input.proxyA;\n  const proxyB = input.proxyB;\n  const xfA = input.transformA;\n  const xfB = input.transformB;\n\n  // Initialize the simplex.\n  const simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  const vertices = simplex.m_v;\n  const k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  const saveA = [];\n  const saveB = []; // int[3]\n  let saveCount = 0;\n\n  let distanceSqr1 = Infinity;\n  let distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  let iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (let i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count === 3) {\n      break;\n    }\n\n    // Compute closest point.\n    const p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    const d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    const vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    let duplicate = false;\n    for (let i = 0; i < saveCount; ++i) {\n      if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    const rA = proxyA.m_radius;\n    const rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      const normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      const p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.setVec2(p);\n      output.pointB.setVec2(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nexport class DistanceProxy {\n  /** internal */ m_buffer: Vec2[];\n  /** internal */ m_vertices: Vec2[];\n  /** internal */ m_count: number;\n  /** internal */ m_radius: number;\n\n\n  constructor() {\n    this.m_buffer = []; // Vec2[2]\n    this.m_vertices = []; // Vec2[]\n    this.m_count = 0;\n    this.m_radius = 0;\n  }\n\n  /**\n   * Get the vertex count.\n   */\n  getVertexCount(): number {\n    return this.m_count;\n  }\n\n  /**\n   * Get a vertex by index. Used by Distance.\n   */\n  getVertex(index: number): Vec2 {\n    _ASSERT && console.assert(0 <= index && index < this.m_count);\n    return this.m_vertices[index];\n  }\n\n  /**\n   * Get the supporting vertex index in the given direction.\n   */\n  getSupport(d: Vec2): number {\n    let bestIndex = 0;\n    let bestValue = Vec2.dot(this.m_vertices[0], d);\n    for (let i = 0; i < this.m_count; ++i) {\n      const value = Vec2.dot(this.m_vertices[i], d);\n      if (value > bestValue) {\n        bestIndex = i;\n        bestValue = value;\n      }\n    }\n    return bestIndex;\n  }\n\n  /**\n   * Get the supporting vertex in the given direction.\n   */\n  getSupportVertex(d: Vec2): Vec2 {\n    return this.m_vertices[this.getSupport(d)];\n  }\n\n  /**\n   * Initialize the proxy using the given shape. The shape must remain in scope\n   * while the proxy is in use.\n   */\n  set(shape: Shape, index: number): void {\n    // TODO remove, use shape instead\n    _ASSERT && console.assert(typeof shape.computeDistanceProxy === 'function');\n    shape.computeDistanceProxy(this, index);\n  }\n}\n\nclass SimplexVertex {\n  /** support point in proxyA */\n  wA: Vec2 = Vec2.zero();\n  /** wA index */\n  indexA: number;\n\n  /** support point in proxyB */\n  wB: Vec2 = Vec2.zero();\n  /** wB index */\n  indexB: number;\n\n  /** wB - wA; */\n  w: Vec2 = Vec2.zero();\n  /** barycentric coordinate for closest point */\n  a: number;\n\n  set(v: SimplexVertex): void {\n    this.indexA = v.indexA;\n    this.indexB = v.indexB;\n    this.wA = Vec2.clone(v.wA);\n    this.wB = Vec2.clone(v.wB);\n    this.w = Vec2.clone(v.w);\n    this.a = v.a;\n  }\n}\n\nclass Simplex {\n  m_v1: SimplexVertex;\n  m_v2: SimplexVertex;\n  m_v3: SimplexVertex;\n  m_v: SimplexVertex[];\n  m_count: number;\n\n  constructor() {\n    this.m_v1 = new SimplexVertex();\n    this.m_v2 = new SimplexVertex();\n    this.m_v3 = new SimplexVertex();\n    this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n    this.m_count;\n  }\n\n  /** @internal */\n  toString(): string {\n    if (this.m_count === 3) {\n      return [\"+\" + this.m_count,\n        this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n        this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n        this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n      ].toString();\n\n    } else if (this.m_count === 2) {\n      return [\"+\" + this.m_count,\n        this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n        this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n      ].toString();\n\n    } else if (this.m_count === 1) {\n      return [\"+\" + this.m_count,\n        this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n      ].toString();\n\n    } else {\n      return \"+\" + this.m_count;\n    }\n  }\n\n  readCache(cache: SimplexCache, proxyA: DistanceProxy, transformA: Transform, proxyB: DistanceProxy, transformB: Transform): void {\n    _ASSERT && console.assert(cache.count <= 3);\n\n    // Copy data from cache.\n    this.m_count = cache.count;\n    for (let i = 0; i < this.m_count; ++i) {\n      const v = this.m_v[i];\n      v.indexA = cache.indexA[i];\n      v.indexB = cache.indexB[i];\n      const wALocal = proxyA.getVertex(v.indexA);\n      const wBLocal = proxyB.getVertex(v.indexB);\n      v.wA = Transform.mulVec2(transformA, wALocal);\n      v.wB = Transform.mulVec2(transformB, wBLocal);\n      v.w = Vec2.sub(v.wB, v.wA);\n      v.a = 0.0;\n    }\n\n    // Compute the new simplex metric, if it is substantially different than\n    // old metric then flush the simplex.\n    if (this.m_count > 1) {\n      const metric1 = cache.metric;\n      const metric2 = this.getMetric();\n      if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n        // Reset the simplex.\n        this.m_count = 0;\n      }\n    }\n\n    // If the cache is empty or invalid...\n    if (this.m_count === 0) {\n      const v = this.m_v[0];\n      v.indexA = 0;\n      v.indexB = 0;\n      const wALocal = proxyA.getVertex(0);\n      const wBLocal = proxyB.getVertex(0);\n      v.wA = Transform.mulVec2(transformA, wALocal);\n      v.wB = Transform.mulVec2(transformB, wBLocal);\n      v.w = Vec2.sub(v.wB, v.wA);\n      v.a = 1.0;\n      this.m_count = 1;\n    }\n  }\n\n  writeCache(cache: SimplexCache): void {\n    cache.metric = this.getMetric();\n    cache.count = this.m_count;\n    for (let i = 0; i < this.m_count; ++i) {\n      cache.indexA[i] = this.m_v[i].indexA;\n      cache.indexB[i] = this.m_v[i].indexB;\n    }\n  }\n\n  getSearchDirection(): Vec2 {\n    switch (this.m_count) {\n      case 1:\n        return Vec2.neg(this.m_v1.w);\n\n      case 2: {\n        const e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n        const sgn = Vec2.crossVec2Vec2(e12, Vec2.neg(this.m_v1.w));\n        if (sgn > 0.0) {\n          // Origin is left of e12.\n          return Vec2.crossNumVec2(1.0, e12);\n        } else {\n          // Origin is right of e12.\n          return Vec2.crossVec2Num(e12, 1.0);\n        }\n      }\n\n      default:\n        _ASSERT && console.assert(false);\n        return Vec2.zero();\n    }\n  }\n\n  getClosestPoint(): Vec2 {\n    switch (this.m_count) {\n      case 0:\n        _ASSERT && console.assert(false);\n        return Vec2.zero();\n\n      case 1:\n        return Vec2.clone(this.m_v1.w);\n\n      case 2:\n        return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n      case 3:\n        return Vec2.zero();\n\n      default:\n        _ASSERT && console.assert(false);\n        return Vec2.zero();\n    }\n  }\n\n  getWitnessPoints(pA: Vec2, pB: Vec2): void {\n    switch (this.m_count) {\n      case 0:\n        _ASSERT && console.assert(false);\n        break;\n\n      case 1:\n        pA.setVec2(this.m_v1.wA);\n        pB.setVec2(this.m_v1.wB);\n        break;\n\n      case 2:\n        pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n        pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n        break;\n\n      case 3:\n        pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n        pA.addMul(this.m_v3.a, this.m_v3.wA);\n        pB.setVec2(pA);\n        break;\n\n      default:\n        _ASSERT && console.assert(false);\n        break;\n    }\n  }\n\n  getMetric(): number {\n    switch (this.m_count) {\n      case 0:\n        _ASSERT && console.assert(false);\n        return 0.0;\n\n      case 1:\n        return 0.0;\n\n      case 2:\n        return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n      case 3:\n        return Vec2.crossVec2Vec2(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n          this.m_v1.w));\n\n      default:\n        _ASSERT && console.assert(false);\n        return 0.0;\n    }\n  }\n\n  solve(): void {\n    switch (this.m_count) {\n      case 1:\n        break;\n\n      case 2:\n        this.solve2();\n        break;\n\n      case 3:\n        this.solve3();\n        break;\n\n      default:\n        _ASSERT && console.assert(false);\n    }\n  }\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\n  solve2(): void {\n    const w1 = this.m_v1.w;\n    const w2 = this.m_v2.w;\n    const e12 = Vec2.sub(w2, w1);\n\n    // w1 region\n    const d12_2 = -Vec2.dot(w1, e12);\n    if (d12_2 <= 0.0) {\n      // a2 <= 0, so we clamp it to 0\n      this.m_v1.a = 1.0;\n      this.m_count = 1;\n      return;\n    }\n\n    // w2 region\n    const d12_1 = Vec2.dot(w2, e12);\n    if (d12_1 <= 0.0) {\n      // a1 <= 0, so we clamp it to 0\n      this.m_v2.a = 1.0;\n      this.m_count = 1;\n      this.m_v1.set(this.m_v2);\n      return;\n    }\n\n    // Must be in e12 region.\n    const inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n  }\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\n  solve3(): void {\n    const w1 = this.m_v1.w;\n    const w2 = this.m_v2.w;\n    const w3 = this.m_v3.w;\n\n    // Edge12\n    // [1 1 ][a1] = [1]\n    // [w1.e12 w2.e12][a2] = [0]\n    // a3 = 0\n    const e12 = Vec2.sub(w2, w1);\n    const w1e12 = Vec2.dot(w1, e12);\n    const w2e12 = Vec2.dot(w2, e12);\n    const d12_1 = w2e12;\n    const d12_2 = -w1e12;\n\n    // Edge13\n    // [1 1 ][a1] = [1]\n    // [w1.e13 w3.e13][a3] = [0]\n    // a2 = 0\n    const e13 = Vec2.sub(w3, w1);\n    const w1e13 = Vec2.dot(w1, e13);\n    const w3e13 = Vec2.dot(w3, e13);\n    const d13_1 = w3e13;\n    const d13_2 = -w1e13;\n\n    // Edge23\n    // [1 1 ][a2] = [1]\n    // [w2.e23 w3.e23][a3] = [0]\n    // a1 = 0\n    const e23 = Vec2.sub(w3, w2);\n    const w2e23 = Vec2.dot(w2, e23);\n    const w3e23 = Vec2.dot(w3, e23);\n    const d23_1 = w3e23;\n    const d23_2 = -w2e23;\n\n    // Triangle123\n    const n123 = Vec2.crossVec2Vec2(e12, e13);\n\n    const d123_1 = n123 * Vec2.crossVec2Vec2(w2, w3);\n    const d123_2 = n123 * Vec2.crossVec2Vec2(w3, w1);\n    const d123_3 = n123 * Vec2.crossVec2Vec2(w1, w2);\n\n    // w1 region\n    if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n      this.m_v1.a = 1.0;\n      this.m_count = 1;\n      return;\n    }\n\n    // e12\n    if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n      const inv_d12 = 1.0 / (d12_1 + d12_2);\n      this.m_v1.a = d12_1 * inv_d12;\n      this.m_v2.a = d12_2 * inv_d12;\n      this.m_count = 2;\n      return;\n    }\n\n    // e13\n    if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n      const inv_d13 = 1.0 / (d13_1 + d13_2);\n      this.m_v1.a = d13_1 * inv_d13;\n      this.m_v3.a = d13_2 * inv_d13;\n      this.m_count = 2;\n      this.m_v2.set(this.m_v3);\n      return;\n    }\n\n    // w2 region\n    if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n      this.m_v2.a = 1.0;\n      this.m_count = 1;\n      this.m_v1.set(this.m_v2);\n      return;\n    }\n\n    // w3 region\n    if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n      this.m_v3.a = 1.0;\n      this.m_count = 1;\n      this.m_v1.set(this.m_v3);\n      return;\n    }\n\n    // e23\n    if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n      const inv_d23 = 1.0 / (d23_1 + d23_2);\n      this.m_v2.a = d23_1 * inv_d23;\n      this.m_v3.a = d23_2 * inv_d23;\n      this.m_count = 2;\n      this.m_v1.set(this.m_v3);\n      return;\n    }\n\n    // Must be in triangle123\n    const inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n    this.m_v1.a = d123_1 * inv_d123;\n    this.m_v2.a = d123_2 * inv_d123;\n    this.m_v3.a = d123_3 * inv_d123;\n    this.m_count = 3;\n  }\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nexport const testOverlap = function (shapeA: Shape, indexA: number, shapeB: Shape, indexB: number, xfA: Transform, xfB: Transform): boolean {\n  const input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  const cache = new SimplexCache();\n  const output = new DistanceOutput();\n\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}\n\n// legacy exports\nDistance.testOverlap = testOverlap;\nDistance.Input = DistanceInput;\nDistance.Output = DistanceOutput;\nDistance.Proxy = DistanceProxy;\nDistance.Cache = SimplexCache;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Settings } from '../Settings';\nimport { stats } from '../util/stats';\nimport Timer from '../util/Timer';\nimport { math as Math } from '../common/Math';\nimport { Vec2 } from '../common/Vec2';\nimport { Rot } from '../common/Rot';\nimport { Sweep } from '../common/Sweep';\nimport { Transform } from '../common/Transform';\n\nimport { Distance, DistanceInput, DistanceOutput, DistanceProxy, SimplexCache } from './Distance';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n/**\n * Input parameters for TimeOfImpact.\n */\nexport class TOIInput {\n  proxyA: DistanceProxy = new DistanceProxy();\n  proxyB: DistanceProxy = new DistanceProxy();\n  sweepA: Sweep = new Sweep();\n  sweepB: Sweep = new Sweep();\n  /** defines sweep interval [0, tMax] */\n  tMax: number | undefined;\n}\n\nexport enum TOIOutputState {\n  e_unknown = 0,\n  e_failed = 1,\n  e_overlapped = 2,\n  e_touching = 3,\n  e_separated = 4,\n}\n\n/**\n * Output parameters for TimeOfImpact.\n */\nexport class TOIOutput {\n  state: TOIOutputState | undefined;\n  t: number | undefined;\n}\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n *\n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n *\n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nexport const TimeOfImpact = function (output: TOIOutput, input: TOIInput): void {\n  const timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutputState.e_unknown;\n  output.t = input.tMax;\n\n  const proxyA = input.proxyA; // DistanceProxy\n  const proxyB = input.proxyB; // DistanceProxy\n\n  const sweepA = input.sweepA; // Sweep\n  const sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  const tMax = input.tMax;\n\n  const totalRadius = proxyA.m_radius + proxyB.m_radius;\n  const target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  const tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && console.assert(target > tolerance);\n\n  let t1 = 0.0;\n  const k_maxIterations = Settings.maxTOIIterations;\n  let iter = 0;\n\n  // Prepare input for distance query.\n  const cache = new SimplexCache();\n\n  const distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  while (true) {\n    const xfA = Transform.identity();\n    const xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    const distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutputState.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutputState.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    const fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    // if (false) {\n    //   // Dump the curve seen by the root finder\n    //   const N = 100;\n    //   const dx = 1.0 / N;\n    //   const xs = []; // [ N + 1 ];\n    //   const fs = []; // [ N + 1 ];\n    //   const x = 0.0;\n    //   for (const i = 0; i <= N; ++i) {\n    //     sweepA.getTransform(xfA, x);\n    //     sweepB.getTransform(xfB, x);\n    //     const f = fcn.evaluate(xfA, xfB) - target;\n    //     printf(\"%g %g\\n\", x, f);\n    //     xs[i] = x;\n    //     fs[i] = f;\n    //     x += dx;\n    //   }\n    // }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    let done = false;\n    let t2 = tMax;\n    let pushBackIter = 0;\n    while (true) {\n      // Find the deepest point at t2. Store the witness point indices.\n      let s2 = fcn.findMinSeparation(t2);\n      // const indexA = fcn.indexA;\n      // const indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutputState.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      let s1 = fcn.evaluate(t1);\n      // const indexA = fcn.indexA;\n      // const indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutputState.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutputState.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      let rootIterCount = 0;\n      let a1 = t1;\n      let a2 = t2;\n      while (true) {\n        // Use a mix of the secant rule and bisection.\n        let t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        const s = fcn.evaluate(t);\n        const indexA = fcn.indexA;\n        const indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount === 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter === Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter === k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutputState.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  const time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\nenum SeparationFunctionType {\n  e_points = 1,\n  e_faceA = 2,\n  e_faceB = 3,\n}\n\nclass SeparationFunction {\n  m_proxyA: DistanceProxy = new DistanceProxy();\n  m_proxyB: DistanceProxy = new DistanceProxy();\n  m_sweepA: Sweep;\n  m_sweepB: Sweep;\n  indexA: number;\n  indexB: number;\n  m_type: SeparationFunctionType;\n  m_localPoint: Vec2 = Vec2.zero();\n  m_axis: Vec2 = Vec2.zero();\n\n  // TODO_ERIN might not need to return the separation\n\n  initialize(cache: SimplexCache, proxyA: DistanceProxy, sweepA: Sweep, proxyB: DistanceProxy, sweepB: Sweep, t1: number): number {\n    this.m_proxyA = proxyA;\n    this.m_proxyB = proxyB;\n    const count = cache.count;\n    _ASSERT && console.assert(0 < count && count < 3);\n\n    this.m_sweepA = sweepA;\n    this.m_sweepB = sweepB;\n\n    const xfA = Transform.identity();\n    const xfB = Transform.identity();\n    this.m_sweepA.getTransform(xfA, t1);\n    this.m_sweepB.getTransform(xfB, t1);\n\n    if (count === 1) {\n      this.m_type = SeparationFunctionType.e_points;\n      const localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n      const localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n      const pointA = Transform.mulVec2(xfA, localPointA);\n      const pointB = Transform.mulVec2(xfB, localPointB);\n      this.m_axis.setCombine(1, pointB, -1, pointA);\n      const s = this.m_axis.normalize();\n      return s;\n\n    } else if (cache.indexA[0] === cache.indexA[1]) {\n      // Two points on B and one on A.\n      this.m_type = SeparationFunctionType.e_faceB;\n      const localPointB1 = proxyB.getVertex(cache.indexB[0]);\n      const localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n      this.m_axis = Vec2.crossVec2Num(Vec2.sub(localPointB2, localPointB1), 1.0);\n      this.m_axis.normalize();\n      const normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n      this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n      const pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n      const localPointA = proxyA.getVertex(cache.indexA[0]);\n      const pointA = Transform.mulVec2(xfA, localPointA);\n\n      let s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n      if (s < 0.0) {\n        this.m_axis = Vec2.neg(this.m_axis);\n        s = -s;\n      }\n      return s;\n\n    } else {\n      // Two points on A and one or two points on B.\n      this.m_type = SeparationFunctionType.e_faceA;\n      const localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n      const localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n      this.m_axis = Vec2.crossVec2Num(Vec2.sub(localPointA2, localPointA1), 1.0);\n      this.m_axis.normalize();\n      const normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n      this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n      const pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n      const localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n      const pointB = Transform.mulVec2(xfB, localPointB);\n\n      let s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n      if (s < 0.0) {\n        this.m_axis = Vec2.neg(this.m_axis);\n        s = -s;\n      }\n      return s;\n    }\n  }\n\n  compute(find: boolean, t: number): number {\n    // It was findMinSeparation and evaluate\n    const xfA = Transform.identity();\n    const xfB = Transform.identity();\n    this.m_sweepA.getTransform(xfA, t);\n    this.m_sweepB.getTransform(xfB, t);\n\n    switch (this.m_type) {\n      case SeparationFunctionType.e_points: {\n        if (find) {\n          const axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n          const axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n          this.indexA = this.m_proxyA.getSupport(axisA);\n          this.indexB = this.m_proxyB.getSupport(axisB);\n        }\n\n        const localPointA = this.m_proxyA.getVertex(this.indexA);\n        const localPointB = this.m_proxyB.getVertex(this.indexB);\n\n        const pointA = Transform.mulVec2(xfA, localPointA);\n        const pointB = Transform.mulVec2(xfB, localPointB);\n\n        const sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n        return sep;\n      }\n\n      case SeparationFunctionType.e_faceA: {\n        const normal = Rot.mulVec2(xfA.q, this.m_axis);\n        const pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n        if (find) {\n          const axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n          this.indexA = -1;\n          this.indexB = this.m_proxyB.getSupport(axisB);\n        }\n\n        const localPointB = this.m_proxyB.getVertex(this.indexB);\n        const pointB = Transform.mulVec2(xfB, localPointB);\n\n        const sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n        return sep;\n      }\n\n      case SeparationFunctionType.e_faceB: {\n        const normal = Rot.mulVec2(xfB.q, this.m_axis);\n        const pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n        if (find) {\n          const axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n          this.indexB = -1;\n          this.indexA = this.m_proxyA.getSupport(axisA);\n        }\n\n        const localPointA = this.m_proxyA.getVertex(this.indexA);\n        const pointA = Transform.mulVec2(xfA, localPointA);\n\n        const sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n        return sep;\n      }\n\n      default:\n        _ASSERT && console.assert(false);\n        if (find) {\n          this.indexA = -1;\n          this.indexB = -1;\n        }\n        return 0.0;\n    }\n  }\n\n  findMinSeparation(t: number): number {\n    return this.compute(true, t);\n  }\n\n  evaluate(t: number): number {\n    return this.compute(false, t);\n  }\n}\n\nconst separationFunction_reuse = new SeparationFunction();\n\n// legacy exports\nTimeOfImpact.Input = TOIInput;\nTimeOfImpact.Output = TOIOutput;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Settings } from '../Settings';\nimport { Vec2 } from '../common/Vec2';\nimport { math as Math } from '../common/Math';\nimport { Body } from './Body';\nimport type { Contact } from './Contact';\nimport { Joint } from './Joint';\nimport { TimeOfImpact, TOIInput, TOIOutput, TOIOutputState } from '../collision/TimeOfImpact';\nimport { Distance, DistanceInput, DistanceOutput, SimplexCache } from '../collision/Distance';\nimport { World } from \"./World\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nexport class TimeStep {\n  /** time step */\n  dt: number = 0;\n  /** inverse time step (0 if dt == 0) */\n  inv_dt: number = 0;\n  velocityIterations: number = 0;\n  positionIterations: number = 0;\n  warmStarting: boolean = false;\n  blockSolve: boolean = true;\n\n  /** timestep ratio for variable timestep */\n  inv_dt0: number = 0.0;\n  /** dt * inv_dt0 */\n  dtRatio: number = 1;\n\n  reset(dt: number): void {\n    if (this.dt > 0.0) {\n      this.inv_dt0 = this.inv_dt;\n    }\n    this.dt = dt;\n    this.inv_dt = dt == 0 ? 0 : 1 / dt;\n    this.dtRatio = dt * this.inv_dt0;\n  }\n}\n\n// reuse\nconst s_subStep = new TimeStep();\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nexport class ContactImpulse {\n  // TODO: merge with Contact class?\n\n  private readonly contact: Contact;\n  private readonly normals: number[];\n  private readonly tangents: number[];\n\n  constructor(contact: Contact) {\n    this.contact = contact;\n    this.normals = [];\n    this.tangents = [];\n  }\n\n  get normalImpulses(): number[] {\n    const contact = this.contact;\n    const normals = this.normals;\n    normals.length = 0;\n    for (let p = 0; p < contact.v_points.length; ++p) {\n      normals.push(contact.v_points[p].normalImpulse);\n    }\n    return normals;\n  }\n\n  get tangentImpulses(): number[] {\n    const contact = this.contact;\n    const tangents = this.tangents;\n    tangents.length = 0;\n    for (let p = 0; p < contact.v_points.length; ++p) {\n      tangents.push(contact.v_points[p].tangentImpulse);\n    }\n    return tangents;\n  }\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n */\nexport class Solver {\n  m_world: World;\n  m_stack: Body[];\n  m_bodies: Body[];\n  m_contacts: Contact[];\n  m_joints: Joint[];\n\n  constructor(world: World) {\n    this.m_world = world;\n    this.m_stack = [];\n    this.m_bodies = [];\n    this.m_contacts = [];\n    this.m_joints = [];\n  }\n\n  clear(): void {\n    this.m_stack.length = 0;\n    this.m_bodies.length = 0;\n    this.m_contacts.length = 0;\n    this.m_joints.length = 0;\n  }\n\n  addBody(body: Body): void {\n    _ASSERT && console.assert(body instanceof Body, 'Not a Body!', body);\n    this.m_bodies.push(body);\n    // why?\n    // body.c_position.c.setZero();\n    // body.c_position.a = 0;\n    // body.c_velocity.v.setZero();\n    // body.c_velocity.w = 0;\n  }\n\n  addContact(contact: Contact): void {\n    // _ASSERT && console.assert(contact instanceof Contact, 'Not a Contact!', contact);\n    this.m_contacts.push(contact);\n  }\n\n  addJoint(joint: Joint): void {\n    _ASSERT && console.assert(joint instanceof Joint, 'Not a Joint!', joint);\n    this.m_joints.push(joint);\n  }\n\n  solveWorld(step: TimeStep): void {\n    const world = this.m_world;\n\n    // Clear all the island flags.\n    for (let b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n    }\n    for (let c = world.m_contactList; c; c = c.m_next) {\n      c.m_islandFlag = false;\n    }\n    for (let j = world.m_jointList; j; j = j.m_next) {\n      j.m_islandFlag = false;\n    }\n\n    // Build and simulate all awake islands.\n    const stack = this.m_stack;\n    let loop = -1;\n    for (let seed = world.m_bodyList; seed; seed = seed.m_next) {\n      loop++;\n      if (seed.m_islandFlag) {\n        continue;\n      }\n\n      if (seed.isAwake() == false || seed.isActive() == false) {\n        continue;\n      }\n\n      // The seed can be dynamic or kinematic.\n      if (seed.isStatic()) {\n        continue;\n      }\n\n      // Reset island and stack.\n      this.clear();\n\n      stack.push(seed);\n\n      seed.m_islandFlag = true;\n\n      // Perform a depth first search (DFS) on the constraint graph.\n      while (stack.length > 0) {\n        // Grab the next body off the stack and add it to the island.\n        const b = stack.pop();\n        _ASSERT && console.assert(b.isActive() == true);\n        this.addBody(b);\n\n        // Make sure the body is awake.\n        b.setAwake(true);\n\n        // To keep islands as small as possible, we don't\n        // propagate islands across static bodies.\n        if (b.isStatic()) {\n          continue;\n        }\n\n        // Search all contacts connected to this body.\n        for (let ce = b.m_contactList; ce; ce = ce.next) {\n          const contact = ce.contact;\n\n          // Has this contact already been added to an island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Is this contact solid and touching?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            continue;\n          }\n\n          // Skip sensors.\n          const sensorA = contact.m_fixtureA.m_isSensor;\n          const sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          this.addContact(contact);\n          contact.m_islandFlag = true;\n\n          const other = ce.other;\n\n          // Was the other body already added to this island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // _ASSERT && console.assert(stack.length < world.m_bodyCount);\n          stack.push(other);\n          other.m_islandFlag = true;\n        }\n\n        // Search all joints connect to this body.\n        for (let je = b.m_jointList; je; je = je.next) {\n          if (je.joint.m_islandFlag == true) {\n            continue;\n          }\n\n          const other = je.other;\n\n          // Don't simulate joints connected to inactive bodies.\n          if (other.isActive() == false) {\n            continue;\n          }\n\n          this.addJoint(je.joint);\n          je.joint.m_islandFlag = true;\n\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // _ASSERT && console.assert(stack.length < world.m_bodyCount);\n          stack.push(other);\n          other.m_islandFlag = true;\n        }\n      }\n\n      this.solveIsland(step);\n\n      // Post solve cleanup.\n      for (let i = 0; i < this.m_bodies.length; ++i) {\n        // Allow static bodies to participate in other islands.\n        // TODO: are they added at all?\n        const b = this.m_bodies[i];\n        if (b.isStatic()) {\n          b.m_islandFlag = false;\n        }\n      }\n    }\n  }\n\n  solveIsland(step: TimeStep): void {\n    // B2: Island Solve\n    const world = this.m_world;\n    const gravity = world.m_gravity;\n    const allowSleep = world.m_allowSleep;\n\n    const h = step.dt;\n\n    // Integrate velocities and apply damping. Initialize the body state.\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body = this.m_bodies[i];\n\n      const c = Vec2.clone(body.m_sweep.c);\n      const a = body.m_sweep.a;\n      const v = Vec2.clone(body.m_linearVelocity);\n      let w = body.m_angularVelocity;\n\n      // Store positions for continuous collision.\n      body.m_sweep.c0.setVec2(body.m_sweep.c);\n      body.m_sweep.a0 = body.m_sweep.a;\n\n      if (body.isDynamic()) {\n        // Integrate velocities.\n        v.addMul(h * body.m_gravityScale, gravity);\n        v.addMul(h * body.m_invMass, body.m_force);\n        w += h * body.m_invI * body.m_torque;\n        /**\n         * <pre>\n         * Apply damping.\n         * ODE: dv/dt + c * v = 0\n         * Solution: v(t) = v0 * exp(-c * t)\n         * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n         * v2 = exp(-c * dt) * v1\n         * Pade approximation:\n         * v2 = v1 * 1 / (1 + c * dt)\n         * </pre>\n         */\n        v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n        w *= 1.0 / (1.0 + h * body.m_angularDamping);\n      }\n\n      body.c_position.c = c;\n      body.c_position.a = a;\n      body.c_velocity.v = v;\n      body.c_velocity.w = w;\n    }\n\n    for (let i = 0; i < this.m_contacts.length; ++i) {\n      const contact = this.m_contacts[i];\n      contact.initConstraint(step);\n    }\n\n    for (let i = 0; i < this.m_contacts.length; ++i) {\n      const contact = this.m_contacts[i];\n      contact.initVelocityConstraint(step);\n    }\n\n    if (step.warmStarting) {\n      // Warm start.\n      for (let i = 0; i < this.m_contacts.length; ++i) {\n        const contact = this.m_contacts[i];\n        contact.warmStartConstraint(step);\n      }\n    }\n\n    for (let i = 0; i < this.m_joints.length; ++i) {\n      const joint = this.m_joints[i];\n      joint.initVelocityConstraints(step);\n    }\n\n    // Solve velocity constraints\n    for (let i = 0; i < step.velocityIterations; ++i) {\n      for (let j = 0; j < this.m_joints.length; ++j) {\n        const joint = this.m_joints[j];\n        joint.solveVelocityConstraints(step);\n      }\n\n      for (let j = 0; j < this.m_contacts.length; ++j) {\n        const contact = this.m_contacts[j];\n        contact.solveVelocityConstraint(step);\n      }\n    }\n\n    // Store impulses for warm starting\n    for (let i = 0; i < this.m_contacts.length; ++i) {\n      const contact = this.m_contacts[i];\n      contact.storeConstraintImpulses(step);\n    }\n\n    // Integrate positions\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body = this.m_bodies[i];\n\n      const c = Vec2.clone(body.c_position.c);\n      let a = body.c_position.a;\n      const v = Vec2.clone(body.c_velocity.v);\n      let w = body.c_velocity.w;\n\n      // Check for large velocities\n      const translation = Vec2.mulNumVec2(h, v);\n      if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n        const ratio = Settings.maxTranslation / translation.length();\n        v.mul(ratio);\n      }\n\n      const rotation = h * w;\n      if (rotation * rotation > Settings.maxRotationSquared) {\n        const ratio = Settings.maxRotation / Math.abs(rotation);\n        w *= ratio;\n      }\n\n      // Integrate\n      c.addMul(h, v);\n      a += h * w;\n\n      body.c_position.c.setVec2(c);\n      body.c_position.a = a;\n      body.c_velocity.v.setVec2(v);\n      body.c_velocity.w = w;\n    }\n\n    // Solve position constraints\n    let positionSolved = false;\n    for (let i = 0; i < step.positionIterations; ++i) {\n      let minSeparation = 0.0;\n      for (let j = 0; j < this.m_contacts.length; ++j) {\n        const contact = this.m_contacts[j];\n        const separation = contact.solvePositionConstraint(step);\n        minSeparation = Math.min(minSeparation, separation);\n      }\n      // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n      // push the separation above -Settings.linearSlop.\n      const contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n      let jointsOkay = true;\n      for (let j = 0; j < this.m_joints.length; ++j) {\n        const joint = this.m_joints[j];\n        const jointOkay = joint.solvePositionConstraints(step);\n        jointsOkay = jointsOkay && jointOkay;\n      }\n\n      if (contactsOkay && jointsOkay) {\n        // Exit early if the position errors are small.\n        positionSolved = true;\n        break;\n      }\n    }\n\n    // Copy state buffers back to the bodies\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body = this.m_bodies[i];\n\n      body.m_sweep.c.setVec2(body.c_position.c);\n      body.m_sweep.a = body.c_position.a;\n      body.m_linearVelocity.setVec2(body.c_velocity.v);\n      body.m_angularVelocity = body.c_velocity.w;\n      body.synchronizeTransform();\n    }\n\n    this.postSolveIsland();\n\n    if (allowSleep) {\n      let minSleepTime = Infinity;\n\n      const linTolSqr = Settings.linearSleepToleranceSqr;\n      const angTolSqr = Settings.angularSleepToleranceSqr;\n\n      for (let i = 0; i < this.m_bodies.length; ++i) {\n        const body = this.m_bodies[i];\n        if (body.isStatic()) {\n          continue;\n        }\n\n        if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n          body.m_sleepTime = 0.0;\n          minSleepTime = 0.0;\n        } else {\n          body.m_sleepTime += h;\n          minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n        }\n      }\n\n      if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n        for (let i = 0; i < this.m_bodies.length; ++i) {\n          const body = this.m_bodies[i];\n          body.setAwake(false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Find TOI contacts and solve them.\n   */\n  solveWorldTOI(step: TimeStep): void {\n    const world = this.m_world;\n\n    if (world.m_stepComplete) {\n      for (let b = world.m_bodyList; b; b = b.m_next) {\n        b.m_islandFlag = false;\n        b.m_sweep.alpha0 = 0.0;\n      }\n\n      for (let c = world.m_contactList; c; c = c.m_next) {\n        // Invalidate TOI\n        c.m_toiFlag = false;\n        c.m_islandFlag = false;\n        c.m_toiCount = 0;\n        c.m_toi = 1.0;\n      }\n    }\n\n    // Find TOI events and solve them.\n    while (true) {\n      // Find the first TOI.\n      let minContact = null; // Contact\n      let minAlpha = 1.0;\n\n      for (let c = world.m_contactList; c; c = c.m_next) {\n        // Is this contact disabled?\n        if (c.isEnabled() == false) {\n          continue;\n        }\n\n        // Prevent excessive sub-stepping.\n        if (c.m_toiCount > Settings.maxSubSteps) {\n          continue;\n        }\n\n        let alpha = 1.0;\n        if (c.m_toiFlag) {\n          // This contact has a valid cached TOI.\n          alpha = c.m_toi;\n        } else {\n          const fA = c.getFixtureA();\n          const fB = c.getFixtureB();\n\n          // Is there a sensor?\n          if (fA.isSensor() || fB.isSensor()) {\n            continue;\n          }\n\n          const bA = fA.getBody();\n          const bB = fB.getBody();\n\n          _ASSERT && console.assert(bA.isDynamic() || bB.isDynamic());\n\n          const activeA = bA.isAwake() && !bA.isStatic();\n          const activeB = bB.isAwake() && !bB.isStatic();\n\n          // Is at least one body active (awake and dynamic or kinematic)?\n          if (activeA == false && activeB == false) {\n            continue;\n          }\n\n          const collideA = bA.isBullet() || !bA.isDynamic();\n          const collideB = bB.isBullet() || !bB.isDynamic();\n\n          // Are these two non-bullet dynamic bodies?\n          if (collideA == false && collideB == false) {\n            continue;\n          }\n\n          // Compute the TOI for this contact.\n          // Put the sweeps onto the same time interval.\n          let alpha0 = bA.m_sweep.alpha0;\n\n          if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n            alpha0 = bB.m_sweep.alpha0;\n            bA.m_sweep.advance(alpha0);\n          } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n            alpha0 = bA.m_sweep.alpha0;\n            bB.m_sweep.advance(alpha0);\n          }\n\n          _ASSERT && console.assert(alpha0 < 1.0);\n\n          const indexA = c.getChildIndexA();\n          const indexB = c.getChildIndexB();\n\n          const sweepA = bA.m_sweep;\n          const sweepB = bB.m_sweep;\n\n          // Compute the time of impact in interval [0, minTOI]\n          const input = new TOIInput(); // TODO: reuse\n          input.proxyA.set(fA.getShape(), indexA);\n          input.proxyB.set(fB.getShape(), indexB);\n          input.sweepA.set(bA.m_sweep);\n          input.sweepB.set(bB.m_sweep);\n          input.tMax = 1.0;\n\n          const output = new TOIOutput(); // TODO: reuse\n          TimeOfImpact(output, input);\n\n          // Beta is the fraction of the remaining portion of the [time?].\n          const beta = output.t;\n          if (output.state == TOIOutputState.e_touching) {\n            alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n          } else {\n            alpha = 1.0;\n          }\n\n          c.m_toi = alpha;\n          c.m_toiFlag = true;\n        }\n\n        if (alpha < minAlpha) {\n          // This is the minimum TOI found so far.\n          minContact = c;\n          minAlpha = alpha;\n        }\n      }\n\n      if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n        // No more TOI events. Done!\n        world.m_stepComplete = true;\n        break;\n      }\n\n      // Advance the bodies to the TOI.\n      const fA = minContact.getFixtureA();\n      const fB = minContact.getFixtureB();\n      const bA = fA.getBody();\n      const bB = fB.getBody();\n\n      const backup1 = bA.m_sweep.clone();\n      const backup2 = bB.m_sweep.clone();\n\n      bA.advance(minAlpha);\n      bB.advance(minAlpha);\n\n      // The TOI contact likely has some new contact points.\n      minContact.update(world);\n      minContact.m_toiFlag = false;\n      ++minContact.m_toiCount;\n\n      // Is the contact solid?\n      if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n        // Restore the sweeps.\n        minContact.setEnabled(false);\n        bA.m_sweep.set(backup1);\n        bB.m_sweep.set(backup2);\n        bA.synchronizeTransform();\n        bB.synchronizeTransform();\n        continue;\n      }\n\n      bA.setAwake(true);\n      bB.setAwake(true);\n\n      // Build the island\n      this.clear();\n      this.addBody(bA);\n      this.addBody(bB);\n      this.addContact(minContact);\n\n      bA.m_islandFlag = true;\n      bB.m_islandFlag = true;\n      minContact.m_islandFlag = true;\n\n      // Get contacts on bodyA and bodyB.\n      const bodies = [ bA, bB ];\n      for (let i = 0; i < bodies.length; ++i) {\n        const body = bodies[i];\n        if (body.isDynamic()) {\n          for (let ce = body.m_contactList; ce; ce = ce.next) {\n            // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n            // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n            const contact = ce.contact;\n\n            // Has this contact already been added to the island?\n            if (contact.m_islandFlag) {\n              continue;\n            }\n\n            // Only add if either is static, kinematic or bullet.\n            const other = ce.other;\n            if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n              continue;\n            }\n\n            // Skip sensors.\n            const sensorA = contact.m_fixtureA.m_isSensor;\n            const sensorB = contact.m_fixtureB.m_isSensor;\n            if (sensorA || sensorB) {\n              continue;\n            }\n\n            // Tentatively advance the body to the TOI.\n            const backup = other.m_sweep.clone();\n            if (other.m_islandFlag == false) {\n              other.advance(minAlpha);\n            }\n\n            // Update the contact points\n            contact.update(world);\n\n            // Was the contact disabled by the user?\n            // Are there contact points?\n            if (contact.isEnabled() == false || contact.isTouching() == false) {\n              other.m_sweep.set(backup);\n              other.synchronizeTransform();\n              continue;\n            }\n\n            // Add the contact to the island\n            contact.m_islandFlag = true;\n            this.addContact(contact);\n\n            // Has the other body already been added to the island?\n            if (other.m_islandFlag) {\n              continue;\n            }\n\n            // Add the other body to the island.\n            other.m_islandFlag = true;\n\n            if (!other.isStatic()) {\n              other.setAwake(true);\n            }\n\n            this.addBody(other);\n          }\n        }\n      }\n\n      s_subStep.reset((1.0 - minAlpha) * step.dt);\n      s_subStep.dtRatio = 1.0;\n      s_subStep.positionIterations = 20;\n      s_subStep.velocityIterations = step.velocityIterations;\n      s_subStep.warmStarting = false;\n\n      this.solveIslandTOI(s_subStep, bA, bB);\n\n      // Reset island flags and synchronize broad-phase proxies.\n      for (let i = 0; i < this.m_bodies.length; ++i) {\n        const body = this.m_bodies[i];\n        body.m_islandFlag = false;\n\n        if (!body.isDynamic()) {\n          continue;\n        }\n\n        body.synchronizeFixtures();\n\n        // Invalidate all contact TOIs on this displaced body.\n        for (let ce = body.m_contactList; ce; ce = ce.next) {\n          ce.contact.m_toiFlag = false;\n          ce.contact.m_islandFlag = false;\n        }\n      }\n\n      // Commit fixture proxy movements to the broad-phase so that new contacts\n      // are created.\n      // Also, some contacts can be destroyed.\n      world.findNewContacts();\n\n      if (world.m_subStepping) {\n        world.m_stepComplete = false;\n        break;\n      }\n    }\n  }\n\n  solveIslandTOI(subStep: TimeStep, toiA: Body, toiB: Body): void {\n    const world = this.m_world;\n\n    // Initialize the body state.\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body = this.m_bodies[i];\n      body.c_position.c.setVec2(body.m_sweep.c);\n      body.c_position.a = body.m_sweep.a;\n      body.c_velocity.v.setVec2(body.m_linearVelocity);\n      body.c_velocity.w = body.m_angularVelocity;\n    }\n\n    for (let i = 0; i < this.m_contacts.length; ++i) {\n      const contact = this.m_contacts[i];\n      contact.initConstraint(subStep);\n    }\n\n    // Solve position constraints.\n    for (let i = 0; i < subStep.positionIterations; ++i) {\n      let minSeparation = 0.0;\n      for (let j = 0; j < this.m_contacts.length; ++j) {\n        const contact = this.m_contacts[j];\n        const separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n        minSeparation = Math.min(minSeparation, separation);\n      }\n      // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n      // push the separation above -Settings.linearSlop.\n      const contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n      if (contactsOkay) {\n        break;\n      }\n    }\n\n    if (false) {\n      // Is the new position really safe?\n      for (let i = 0; i < this.m_contacts.length; ++i) {\n        const c = this.m_contacts[i];\n        const fA = c.getFixtureA();\n        const fB = c.getFixtureB();\n\n        const bA = fA.getBody();\n        const bB = fB.getBody();\n\n        const indexA = c.getChildIndexA();\n        const indexB = c.getChildIndexB();\n\n        const input = new DistanceInput();\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.transformA = bA.getTransform();\n        input.transformB = bB.getTransform();\n        input.useRadii = false;\n\n        const output = new DistanceOutput();\n        const cache = new SimplexCache();\n        Distance(output, cache, input);\n\n        if (output.distance == 0 || cache.count == 3) {\n          cache.count += 0;\n        }\n      }\n    }\n\n    // Leap of faith to new safe state.\n    toiA.m_sweep.c0.setVec2(toiA.c_position.c);\n    toiA.m_sweep.a0 = toiA.c_position.a;\n    toiB.m_sweep.c0.setVec2(toiB.c_position.c);\n    toiB.m_sweep.a0 = toiB.c_position.a;\n\n    // No warm starting is needed for TOI events because warm\n    // starting impulses were applied in the discrete solver.\n    for (let i = 0; i < this.m_contacts.length; ++i) {\n      const contact = this.m_contacts[i];\n      contact.initVelocityConstraint(subStep);\n    }\n\n    // Solve velocity constraints.\n    for (let i = 0; i < subStep.velocityIterations; ++i) {\n      for (let j = 0; j < this.m_contacts.length; ++j) {\n        const contact = this.m_contacts[j];\n        contact.solveVelocityConstraint(subStep);\n      }\n    }\n\n    // Don't store the TOI contact forces for warm starting\n    // because they can be quite large.\n\n    const h = subStep.dt;\n\n    // Integrate positions\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body = this.m_bodies[i];\n\n      const c = Vec2.clone(body.c_position.c);\n      let a = body.c_position.a;\n      const v = Vec2.clone(body.c_velocity.v);\n      let w = body.c_velocity.w;\n\n      // Check for large velocities\n      const translation = Vec2.mulNumVec2(h, v);\n      if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n        const ratio = Settings.maxTranslation / translation.length();\n        v.mul(ratio);\n      }\n\n      const rotation = h * w;\n      if (rotation * rotation > Settings.maxRotationSquared) {\n        const ratio = Settings.maxRotation / Math.abs(rotation);\n        w *= ratio;\n      }\n\n      // Integrate\n      c.addMul(h, v);\n      a += h * w;\n\n      body.c_position.c = c;\n      body.c_position.a = a;\n      body.c_velocity.v = v;\n      body.c_velocity.w = w;\n\n      // Sync bodies\n      body.m_sweep.c = c;\n      body.m_sweep.a = a;\n      body.m_linearVelocity = v;\n      body.m_angularVelocity = w;\n      body.synchronizeTransform();\n    }\n\n    this.postSolveIsland();\n  }\n\n  /** @internal */\n  postSolveIsland(): void {\n    for (let c = 0; c < this.m_contacts.length; ++c) {\n      const contact = this.m_contacts[c];\n      this.m_world.postSolve(contact, contact.m_impulse);\n    }\n  }\n}\n\n// @ts-ignore\nSolver.TimeStep = TimeStep;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from './Vec2';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nexport class Mat22 {\n  ex: Vec2;\n  ey: Vec2;\n\n  constructor(a: number, b: number, c: number, d: number);\n  constructor(a: { x: number; y: number }, b: { x: number; y: number });\n  constructor();\n  // tslint:disable-next-line:typedef\n  constructor(a?, b?, c?, d?) {\n    if (typeof a === 'object' && a !== null) {\n      this.ex = Vec2.clone(a);\n      this.ey = Vec2.clone(b);\n    } else if (typeof a === 'number') {\n      this.ex = Vec2.neo(a, c);\n      this.ey = Vec2.neo(b, d);\n    } else {\n      this.ex = Vec2.zero();\n      this.ey = Vec2.zero();\n    }\n  }\n\n  /** @internal */\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Vec2.isValid(obj.ex) && Vec2.isValid(obj.ey);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Mat22.isValid(o), 'Invalid Mat22!', o);\n  }\n\n  set(a: Mat22): void;\n  set(a: Vec2, b: Vec2): void;\n  set(a: number, b: number, c: number, d: number): void;\n  // tslint:disable-next-line:typedef\n  set(a, b?, c?, d?): void {\n    if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n      this.ex.setNum(a, c);\n      this.ey.setNum(b, d);\n\n    } else if (typeof a === 'object' && typeof b === 'object') {\n      this.ex.setVec2(a);\n      this.ey.setVec2(b);\n\n    } else if (typeof a === 'object') {\n      _ASSERT && Mat22.assert(a);\n      this.ex.setVec2(a.ex);\n      this.ey.setVec2(a.ey);\n\n    } else {\n      _ASSERT && console.assert(false);\n    }\n  }\n\n  setIdentity(): void {\n    this.ex.x = 1.0;\n    this.ey.x = 0.0;\n    this.ex.y = 0.0;\n    this.ey.y = 1.0;\n  }\n\n  setZero(): void {\n    this.ex.x = 0.0;\n    this.ey.x = 0.0;\n    this.ex.y = 0.0;\n    this.ey.y = 0.0;\n  }\n\n  getInverse(): Mat22 {\n    const a = this.ex.x;\n    const b = this.ey.x;\n    const c = this.ex.y;\n    const d = this.ey.y;\n    let det = a * d - b * c;\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    const imx = new Mat22();\n    imx.ex.x = det * d;\n    imx.ey.x = -det * b;\n    imx.ex.y = -det * c;\n    imx.ey.y = det * a;\n    return imx;\n  }\n\n  /**\n   * Solve A * x = b, where b is a column vector. This is more efficient than\n   * computing the inverse in one-shot cases.\n   */\n  solve(v: Vec2): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    const a = this.ex.x;\n    const b = this.ey.x;\n    const c = this.ex.y;\n    const d = this.ey.y;\n    let det = a * d - b * c;\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    const w = Vec2.zero();\n    w.x = det * (d * v.x - b * v.y);\n    w.y = det * (a * v.y - c * v.x);\n    return w;\n  }\n\n  /**\n   * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n   * transforms the vector from one frame to another.\n   */\n  static mul(mx: Mat22, my: Mat22): Mat22;\n  static mul(mx: Mat22, v: Vec2): Vec2;\n  // tslint:disable-next-line:typedef\n  static mul(mx, v) {\n    if (v && 'x' in v && 'y' in v) {\n      _ASSERT && Vec2.assert(v);\n      const x = mx.ex.x * v.x + mx.ey.x * v.y;\n      const y = mx.ex.y * v.x + mx.ey.y * v.y;\n      return Vec2.neo(x, y);\n\n    } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n      _ASSERT && Mat22.assert(v);\n      // return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n      const a = mx.ex.x * v.ex.x + mx.ey.x * v.ex.y;\n      const b = mx.ex.x * v.ey.x + mx.ey.x * v.ey.y;\n      const c = mx.ex.y * v.ex.x + mx.ey.y * v.ex.y;\n      const d = mx.ex.y * v.ey.x + mx.ey.y * v.ey.y;\n      return new Mat22(a, b, c, d);\n    }\n\n    _ASSERT && console.assert(false);\n  }\n\n  static mulVec2(mx: Mat22, v: Vec2): Vec2 {\n    _ASSERT && Vec2.assert(v);\n    const x = mx.ex.x * v.x + mx.ey.x * v.y;\n    const y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n  }\n\n  static mulMat22(mx: Mat22, v: Mat22): Mat22 {\n    _ASSERT && Mat22.assert(v);\n    // return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n    const a = mx.ex.x * v.ex.x + mx.ey.x * v.ex.y;\n    const b = mx.ex.x * v.ey.x + mx.ey.x * v.ey.y;\n    const c = mx.ex.y * v.ex.x + mx.ey.y * v.ex.y;\n    const d = mx.ex.y * v.ey.x + mx.ey.y * v.ey.y;\n    return new Mat22(a, b, c, d);\n  }\n\n  /**\n   * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n   * then this transforms the vector from one frame to another (inverse\n   * transform).\n   */\n  static mulT(mx: Mat22, my: Mat22): Mat22;\n  static mulT(mx: Mat22, v: Vec2): Vec2;\n  // tslint:disable-next-line:typedef\n  static mulT(mx, v) {\n    if (v && 'x' in v && 'y' in v) { // Vec2\n      _ASSERT && Vec2.assert(v);\n      return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n    } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n      _ASSERT && Mat22.assert(v);\n      const c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n      const c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n      return new Mat22(c1, c2);\n    }\n\n    _ASSERT && console.assert(false);\n  }\n\n  static mulTVec2(mx: Mat22, v: Vec2): Vec2 {\n    _ASSERT && Mat22.assert(mx);\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n  }\n\n  static mulTMat22(mx: Mat22, v: Mat22): Mat22 {\n    _ASSERT && Mat22.assert(mx);\n    _ASSERT && Mat22.assert(v);\n    const c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    const c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  static abs(mx: Mat22): Mat22 {\n    _ASSERT && Mat22.assert(mx);\n    return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n  }\n\n  static add(mx1: Mat22, mx2: Mat22): Mat22 {\n    _ASSERT && Mat22.assert(mx1);\n    _ASSERT && Mat22.assert(mx2);\n    return new Mat22(Vec2.add(mx1.ex, mx2.ex), Vec2.add(mx1.ey, mx2.ey));\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from '../common/Vec2';\nimport { Transform } from '../common/Transform';\nimport { math as Math } from '../common/Math';\nimport { Rot } from '../common/Rot';\n\nexport enum ManifoldType {\n  e_circles = 0,\n  e_faceA = 1,\n  e_faceB = 2\n}\n\nexport enum ContactFeatureType {\n  e_vertex = 0,\n  e_face = 1\n}\n\n/**\n * This is used for determining the state of contact points.\n */\n export enum PointState {\n  /** Point does not exist */\n  nullState = 0,\n  /** Point was added in the update */\n  addState = 1,\n  /** Point persisted across the update */\n  persistState = 2,\n  /** Point was removed in the update */\n  removeState = 3\n}\n\n/**\n * Used for computing contact manifolds.\n */\n export class ClipVertex {\n  v: Vec2 = Vec2.zero();\n  id: ContactID = new ContactID();\n\n  set(o: ClipVertex): void {\n    this.v.setVec2(o.v);\n    this.id.set(o.id);\n  }\n}\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n *\n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n *\n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n *\n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nexport class Manifold {\n  type: ManifoldType;\n  localNormal: Vec2 = Vec2.zero();\n  localPoint: Vec2 = Vec2.zero();\n  points: ManifoldPoint[] = [ new ManifoldPoint(), new ManifoldPoint() ];\n  pointCount: number = 0;\n\n  /**\n   * Evaluate the manifold with supplied transforms. This assumes modest motion\n   * from the original state. This does not change the point count, impulses, etc.\n   * The radii must come from the shapes that generated the manifold.\n   */\n  getWorldManifold(wm: WorldManifold | undefined, xfA: Transform, radiusA: number, xfB: Transform, radiusB: number): WorldManifold {\n    if (this.pointCount == 0) {\n      return;\n    }\n\n    wm = wm || new WorldManifold();\n\n    let normal = wm.normal;\n    const points = wm.points;\n    const separations = wm.separations;\n\n    // TODO: improve\n    switch (this.type) {\n      case ManifoldType.e_circles: {\n        normal = Vec2.neo(1.0, 0.0);\n        const pointA = Transform.mulVec2(xfA, this.localPoint);\n        const pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n        const dist = Vec2.sub(pointB, pointA);\n        if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n          normal.setVec2(dist);\n          normal.normalize();\n        }\n        const cA = pointA.clone().addMul(radiusA, normal);\n        const cB = pointB.clone().addMul(-radiusB, normal);\n        points[0] = Vec2.mid(cA, cB);\n        separations[0] = Vec2.dot(Vec2.sub(cB, cA), normal);\n        points.length = 1;\n        separations.length = 1;\n        break;\n      }\n\n      case ManifoldType.e_faceA: {\n        normal = Rot.mulVec2(xfA.q, this.localNormal);\n        const planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n        for (let i = 0; i < this.pointCount; ++i) {\n          const clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n          const cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n          const cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n          points[i] = Vec2.mid(cA, cB);\n          separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n        }\n        points.length = this.pointCount;\n        separations.length = this.pointCount;\n        break;\n      }\n\n      case ManifoldType.e_faceB: {\n        normal = Rot.mulVec2(xfB.q, this.localNormal);\n        const planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n        for (let i = 0; i < this.pointCount; ++i) {\n          const clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n          const cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n          const cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n          points[i] = Vec2.mid(cA, cB);\n          separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n        }\n        points.length = this.pointCount;\n        separations.length = this.pointCount;\n        // Ensure normal points from A to B.\n        normal.mul(-1);\n        break;\n      }\n    }\n\n    wm.normal = normal;\n    wm.points = points;\n    wm.separations = separations;\n    return wm;\n  }\n\n  static clipSegmentToLine = clipSegmentToLine;\n  static ClipVertex = ClipVertex;\n  static getPointStates = getPointStates;\n  static PointState = PointState;\n}\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n *\n * This structure is stored across time steps, so we keep it small.\n *\n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n */\nexport class ManifoldPoint {\n  /**\n   * Usage depends on manifold type.\n   *       e_circles: the local center of circleB,\n   *       e_faceA: the local center of cirlceB or the clip point of polygonB,\n   *       e_faceB: the clip point of polygonA.\n   */\n  localPoint: Vec2 = Vec2.zero();\n  /**\n   * The non-penetration impulse\n   */\n  normalImpulse: number = 0;\n  /**\n   * The friction impulse\n   */\n  tangentImpulse: number = 0;\n  /**\n   * Uniquely identifies a contact point between two shapes to facilatate warm starting\n   */\n  id: ContactID = new ContactID();\n}\n\n/**\n * Contact ids to facilitate warm starting.\n */\nexport class ContactID {\n  cf: ContactFeature = new ContactFeature();\n\n  /**\n   * Used to quickly compare contact ids.\n   */\n  get key(): number {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  }\n\n  set(o: ContactID): void {\n    // this.key = o.key;\n    this.cf.set(o.cf);\n  }\n}\n\n/**\n * The features that intersect to form the contact point.\n */\nexport class ContactFeature {\n  /**\n   * Feature index on shapeA\n   */\n  indexA: number;\n  /**\n   * Feature index on shapeB\n   */\n  indexB: number;\n  /**\n   * The feature type on shapeA\n   */\n  typeA: ContactFeatureType;\n  /**\n   * The feature type on shapeB\n   */\n  typeB: ContactFeatureType;\n  set(o: ContactFeature): void {\n    this.indexA = o.indexA;\n    this.indexB = o.indexB;\n    this.typeA = o.typeA;\n    this.typeB = o.typeB;\n  }\n}\n\n/**\n * This is used to compute the current state of a contact manifold.\n */\nexport class WorldManifold {\n  /**\n   * World vector pointing from A to B\n   */\n  normal: Vec2;\n  /**\n   * World contact point (point of intersection)\n   */\n  points: Vec2[] = []; // [maxManifoldPoints]\n  /**\n   * A negative value indicates overlap, in meters\n   */\n  separations: number[] = []; // [maxManifoldPoints]\n}\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n */\nexport function getPointStates(\n  state1: PointState[],\n  state2: PointState[],\n  manifold1: Manifold,\n  manifold2: Manifold\n): void {\n  // state1, state2: PointState[Settings.maxManifoldPoints]\n\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (let i = 0; i < manifold1.pointCount; ++i) {\n    const id = manifold1.points[i].id;\n\n    state1[i] = PointState.removeState;\n\n    for (let j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (let i = 0; i < manifold2.pointCount; ++i) {\n    const id = manifold2.points[i].id;\n\n    state2[i] = PointState.addState;\n\n    for (let j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n */\nexport function clipSegmentToLine(\n  vOut: ClipVertex[],\n  vIn: ClipVertex[],\n  normal: Vec2,\n  offset: number,\n  vertexIndexA: number\n): number {\n  // Start with no output points\n  let numOut = 0;\n\n  // Calculate the distance of end points to the line\n  const distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  const distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    const interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = ContactFeatureType.e_vertex;\n    vOut[numOut].id.cf.typeB = ContactFeatureType.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { ShapeType } from \"../collision/Shape\";\nimport { math as Math } from '../common/Math';\nimport { Vec2 } from '../common/Vec2';\nimport { Transform } from '../common/Transform';\nimport { Mat22 } from '../common/Mat22';\nimport { Rot } from '../common/Rot';\nimport { Settings } from '../Settings';\nimport { Manifold, ManifoldType, WorldManifold } from '../collision/Manifold';\nimport { testOverlap } from '../collision/Distance';\nimport { Fixture } from \"./Fixture\";\nimport { Body } from \"./Body\";\nimport { ContactImpulse, TimeStep } from \"./Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nconst DEBUG_SOLVER = false;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n *\n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nexport class ContactEdge {\n  contact: Contact;\n  prev: ContactEdge | undefined;\n  next: ContactEdge | undefined;\n  other: Body | undefined;\n  constructor(contact: Contact) {\n    this.contact = contact;\n  }\n}\n\nexport type EvaluateFunction = (\n  manifold: Manifold,\n  xfA: Transform,\n  fixtureA: Fixture,\n  indexA: number,\n  xfB: Transform,\n  fixtureB: Fixture,\n  indexB: number\n) => void;\n\nexport type ContactCallback = (\n  manifold: Manifold,\n  xfA: Transform,\n  fixtureA: Fixture,\n  indexA: number,\n  xfB: Transform,\n  fixtureB: Fixture,\n  indexB: number\n) => void /* & { destroyFcn?: (contact: Contact) => void }*/;\n\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nexport function mixFriction(friction1: number, friction2: number): number {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nexport function mixRestitution(restitution1: number, restitution2: number): number {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\n// TODO: move this to Settings?\nconst s_registers = [];\n\n// TODO: merge with ManifoldPoint?\nexport class VelocityConstraintPoint {\n  rA: Vec2 = Vec2.zero();\n  rB: Vec2 = Vec2.zero();\n  normalImpulse: number = 0;\n  tangentImpulse: number = 0;\n  normalMass: number = 0;\n  tangentMass: number = 0;\n  velocityBias: number = 0;\n}\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n */\nexport class Contact {\n  /** @internal */\n  m_nodeA: ContactEdge;\n  /** @internal */\n  m_nodeB: ContactEdge;\n  /** @internal */\n  m_fixtureA: Fixture;\n  /** @internal */\n  m_fixtureB: Fixture;\n  /** @internal */\n  m_indexA: number;\n  /** @internal */\n  m_indexB: number;\n  /** @internal */\n  m_evaluateFcn: EvaluateFunction;\n  /** @internal */\n  m_manifold: Manifold = new Manifold();\n  /** @internal */\n  m_prev: Contact | null = null;\n  /** @internal */\n  m_next: Contact | null = null;\n  /** @internal */\n  m_toi: number = 1.0;\n  /** @internal */\n  m_toiCount: number = 0;\n  /** @internal This contact has a valid TOI in m_toi */\n  m_toiFlag: boolean = false;\n  /** @internal */\n  m_friction: number;\n  /** @internal */\n  m_restitution: number;\n  /** @internal */\n  m_tangentSpeed: number = 0.0;\n  /** @internal This contact can be disabled (by user) */\n  m_enabledFlag: boolean = true;\n  /** @internal Used when crawling contact graph when forming islands. */\n  m_islandFlag: boolean = false;\n  /** @internal Set when the shapes are touching. */\n  m_touchingFlag: boolean = false;\n  /** @internal This contact needs filtering because a fixture filter was changed. */\n  m_filterFlag: boolean = false;\n  /** @internal This bullet contact had a TOI event */\n  m_bulletHitFlag: boolean = false;\n\n  /** @internal Contact reporting impulse object cache */\n  m_impulse: ContactImpulse = new ContactImpulse(this);\n\n  // VelocityConstraint\n  /** @internal */ v_points: VelocityConstraintPoint[] = []; // [maxManifoldPoints];\n  /** @internal */ v_normal: Vec2 = Vec2.zero();\n  /** @internal */ v_normalMass: Mat22 = new Mat22();\n  /** @internal */ v_K: Mat22 = new Mat22();\n  /** @internal */ v_pointCount: number;\n  /** @internal */ v_tangentSpeed: number | undefined;\n  /** @internal */ v_friction: number | undefined;\n  /** @internal */ v_restitution: number | undefined;\n  /** @internal */ v_invMassA: number | undefined;\n  /** @internal */ v_invMassB: number | undefined;\n  /** @internal */ v_invIA: number | undefined;\n  /** @internal */ v_invIB: number | undefined;\n\n  // PositionConstraint\n  /** @internal */ p_localPoints: Vec2[] = []; // [maxManifoldPoints];\n  /** @internal */ p_localNormal: Vec2 = Vec2.zero();\n  /** @internal */ p_localPoint: Vec2 = Vec2.zero();\n  /** @internal */ p_localCenterA: Vec2 = Vec2.zero();\n  /** @internal */ p_localCenterB: Vec2 = Vec2.zero();\n  /** @internal */ p_type: ManifoldType | undefined;\n  /** @internal */ p_radiusA: number | undefined;\n  /** @internal */ p_radiusB: number | undefined;\n  /** @internal */ p_pointCount: number | undefined;\n  /** @internal */ p_invMassA: number | undefined;\n  /** @internal */ p_invMassB: number | undefined;\n  /** @internal */ p_invIA: number | undefined;\n  /** @internal */ p_invIB: number | undefined;\n\n  constructor(fA: Fixture, indexA: number, fB: Fixture, indexB: number, evaluateFcn: EvaluateFunction) {\n    // Nodes for connecting bodies.\n    this.m_nodeA = new ContactEdge(this);\n    this.m_nodeB = new ContactEdge(this);\n\n    this.m_fixtureA = fA;\n    this.m_fixtureB = fB;\n\n    this.m_indexA = indexA;\n    this.m_indexB = indexB;\n\n    this.m_evaluateFcn = evaluateFcn;\n\n    this.m_friction = mixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n    this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n  }\n\n  initConstraint(step: TimeStep): void {\n    const fixtureA = this.m_fixtureA;\n    const fixtureB = this.m_fixtureB;\n\n    const shapeA = fixtureA.getShape();\n    const shapeB = fixtureB.getShape();\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    const manifold = this.getManifold();\n\n    const pointCount = manifold.pointCount;\n    _ASSERT && console.assert(pointCount > 0);\n\n    this.v_invMassA = bodyA.m_invMass;\n    this.v_invMassB = bodyB.m_invMass;\n    this.v_invIA = bodyA.m_invI;\n    this.v_invIB = bodyB.m_invI;\n\n    this.v_friction = this.m_friction;\n    this.v_restitution = this.m_restitution;\n    this.v_tangentSpeed = this.m_tangentSpeed;\n\n    this.v_pointCount = pointCount;\n\n    this.v_K.setZero();\n    this.v_normalMass.setZero();\n\n    this.p_invMassA = bodyA.m_invMass;\n    this.p_invMassB = bodyB.m_invMass;\n    this.p_invIA = bodyA.m_invI;\n    this.p_invIB = bodyB.m_invI;\n    this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n    this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n    this.p_radiusA = shapeA.m_radius;\n    this.p_radiusB = shapeB.m_radius;\n\n    this.p_type = manifold.type;\n    this.p_localNormal = Vec2.clone(manifold.localNormal);\n    this.p_localPoint = Vec2.clone(manifold.localPoint);\n    this.p_pointCount = pointCount;\n\n    for (let j = 0; j < pointCount; ++j) {\n      const cp = manifold.points[j];\n      const vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n      if (step.warmStarting) {\n        vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n        vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n      } else {\n        vcp.normalImpulse = 0.0;\n        vcp.tangentImpulse = 0.0;\n      }\n\n      vcp.rA.setZero();\n      vcp.rB.setZero();\n      vcp.normalMass = 0.0;\n      vcp.tangentMass = 0.0;\n      vcp.velocityBias = 0.0;\n\n      this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n    }\n  }\n\n  /**\n   * Get the contact manifold. Do not modify the manifold unless you understand\n   * the internals of the library.\n   */\n  getManifold(): Manifold {\n    return this.m_manifold;\n  }\n\n  /**\n   * Get the world manifold.\n   */\n  getWorldManifold(worldManifold: WorldManifold | null | undefined): WorldManifold | undefined {\n    const bodyA = this.m_fixtureA.getBody();\n    const bodyB = this.m_fixtureB.getBody();\n    const shapeA = this.m_fixtureA.getShape();\n    const shapeB = this.m_fixtureB.getShape();\n\n    return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n  }\n\n  /**\n   * Enable/disable this contact. This can be used inside the pre-solve contact\n   * listener. The contact is only disabled for the current time step (or sub-step\n   * in continuous collisions).\n   */\n  setEnabled(flag: boolean): void {\n    this.m_enabledFlag = !!flag;\n  }\n\n  /**\n   * Has this contact been disabled?\n   */\n  isEnabled(): boolean {\n    return this.m_enabledFlag;\n  }\n\n  /**\n   * Is this contact touching?\n   */\n  isTouching(): boolean {\n    return this.m_touchingFlag;\n  }\n\n  /**\n   * Get the next contact in the world's contact list.\n   */\n  getNext(): Contact | null {\n    return this.m_next;\n  }\n\n  /**\n   * Get fixture A in this contact.\n   */\n  getFixtureA(): Fixture {\n    return this.m_fixtureA;\n  }\n\n  /**\n   * Get fixture B in this contact.\n   */\n  getFixtureB(): Fixture {\n    return this.m_fixtureB;\n  }\n\n  /**\n   * Get the child primitive index for fixture A.\n   */\n  getChildIndexA(): number {\n    return this.m_indexA;\n  }\n\n  /**\n   * Get the child primitive index for fixture B.\n   */\n  getChildIndexB(): number {\n    return this.m_indexB;\n  }\n\n  /**\n   * Flag this contact for filtering. Filtering will occur the next time step.\n   */\n  flagForFiltering(): void {\n    this.m_filterFlag = true;\n  }\n\n  /**\n   * Override the default friction mixture. You can call this in\n   * ContactListener.preSolve. This value persists until set or reset.\n   */\n  setFriction(friction: number): void {\n    this.m_friction = friction;\n  }\n\n  /**\n   * Get the friction.\n   */\n  getFriction(): number {\n    return this.m_friction;\n  }\n\n  /**\n   * Reset the friction mixture to the default value.\n   */\n  resetFriction(): void {\n    this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  }\n\n  /**\n   * Override the default restitution mixture. You can call this in\n   * ContactListener.preSolve. The value persists until you set or reset.\n   */\n  setRestitution(restitution: number): void {\n    this.m_restitution = restitution;\n  }\n\n  /**\n   * Get the restitution.\n   */\n  getRestitution(): number {\n    return this.m_restitution;\n  }\n\n  /**\n   * Reset the restitution to the default value.\n   */\n  resetRestitution(): void {\n    this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n  }\n\n  /**\n   * Set the desired tangent speed for a conveyor belt behavior. In meters per\n   * second.\n   */\n  setTangentSpeed(speed: number): void {\n    this.m_tangentSpeed = speed;\n  }\n\n  /**\n   * Get the desired tangent speed. In meters per second.\n   */\n  getTangentSpeed(): number {\n    return this.m_tangentSpeed;\n  }\n\n  /**\n   * Called by Update method, and implemented by subclasses.\n   */\n  evaluate(manifold: Manifold, xfA: Transform, xfB: Transform): void {\n    this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n  }\n\n  /**\n   * Updates the contact manifold and touching status.\n   *\n   * Note: do not assume the fixture AABBs are overlapping or are valid.\n   *\n   * @param listener.beginContact\n   * @param listener.endContact\n   * @param listener.preSolve\n   */\n  update(listener?: {\n    beginContact(contact: Contact): void,\n    endContact(contact: Contact): void,\n    preSolve(contact: Contact, oldManifold: Manifold): void\n  }): void {\n\n    // Re-enable this contact.\n    this.m_enabledFlag = true;\n\n    let touching = false;\n    const wasTouching = this.m_touchingFlag;\n\n    const sensorA = this.m_fixtureA.isSensor();\n    const sensorB = this.m_fixtureB.isSensor();\n    const sensor = sensorA || sensorB;\n\n    const bodyA = this.m_fixtureA.getBody();\n    const bodyB = this.m_fixtureB.getBody();\n    const xfA = bodyA.getTransform();\n    const xfB = bodyB.getTransform();\n\n    let oldManifold;\n\n    // Is this contact a sensor?\n    if (sensor) {\n      const shapeA = this.m_fixtureA.getShape();\n      const shapeB = this.m_fixtureB.getShape();\n      touching = testOverlap(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\n\n      // Sensors don't generate manifolds.\n      this.m_manifold.pointCount = 0;\n    } else {\n\n      // TODO reuse manifold\n      oldManifold = this.m_manifold;\n      this.m_manifold = new Manifold();\n\n      this.evaluate(this.m_manifold, xfA, xfB);\n      touching = this.m_manifold.pointCount > 0;\n\n      // Match old contact ids to new contact ids and copy the\n      // stored impulses to warm start the solver.\n      for (let i = 0; i < this.m_manifold.pointCount; ++i) {\n        const nmp = this.m_manifold.points[i];\n        nmp.normalImpulse = 0.0;\n        nmp.tangentImpulse = 0.0;\n\n        for (let j = 0; j < oldManifold.pointCount; ++j) {\n          const omp = oldManifold.points[j];\n          if (omp.id.key == nmp.id.key) {\n            nmp.normalImpulse = omp.normalImpulse;\n            nmp.tangentImpulse = omp.tangentImpulse;\n            break;\n          }\n        }\n      }\n\n      if (touching != wasTouching) {\n        bodyA.setAwake(true);\n        bodyB.setAwake(true);\n      }\n    }\n\n    this.m_touchingFlag = touching;\n\n    if (!wasTouching && touching && listener) {\n      listener.beginContact(this);\n    }\n\n    if (wasTouching && !touching && listener) {\n      listener.endContact(this);\n    }\n\n    if (!sensor && touching && listener) {\n      listener.preSolve(this, oldManifold);\n    }\n  }\n\n  solvePositionConstraint(step: TimeStep): number {\n    return this._solvePositionConstraint(step);\n  }\n\n  solvePositionConstraintTOI(step: TimeStep, toiA: Body, toiB: Body): number {\n    return this._solvePositionConstraint(step, toiA, toiB);\n  }\n\n  private _solvePositionConstraint(step: TimeStep, toiA?: Body, toiB?: Body): number {\n    const toi: boolean = !!toiA && !!toiB;\n\n    const fixtureA = this.m_fixtureA;\n    const fixtureB = this.m_fixtureB;\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    const velocityA = bodyA.c_velocity;\n    const velocityB = bodyB.c_velocity;\n    const positionA = bodyA.c_position;\n    const positionB = bodyB.c_position;\n\n    const localCenterA = Vec2.clone(this.p_localCenterA);\n    const localCenterB = Vec2.clone(this.p_localCenterB);\n\n    let mA = 0.0;\n    let iA = 0.0;\n    if (!toi || (bodyA == toiA || bodyA == toiB)) {\n      mA = this.p_invMassA;\n      iA = this.p_invIA;\n    }\n\n    let mB = 0.0;\n    let iB = 0.0;\n    if (!toi || (bodyB == toiA || bodyB == toiB)) {\n      mB = this.p_invMassB;\n      iB = this.p_invIB;\n    }\n\n    const cA = Vec2.clone(positionA.c);\n    let aA = positionA.a;\n\n    const cB = Vec2.clone(positionB.c);\n    let aB = positionB.a;\n\n    let minSeparation = 0.0;\n\n    // Solve normal constraints\n    for (let j = 0; j < this.p_pointCount; ++j) {\n      const xfA = Transform.identity();\n      const xfB = Transform.identity();\n      xfA.q.setAngle(aA);\n      xfB.q.setAngle(aB);\n      xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n      xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n      // PositionSolverManifold\n      let normal;\n      let point;\n      let separation;\n      switch (this.p_type) {\n        case ManifoldType.e_circles: {\n          const pointA = Transform.mulVec2(xfA, this.p_localPoint);\n          const pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n          normal = Vec2.sub(pointB, pointA);\n          normal.normalize();\n          point = Vec2.combine(0.5, pointA, 0.5, pointB);\n          separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA - this.p_radiusB;\n          break;\n        }\n\n        case ManifoldType.e_faceA: {\n          normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n          const planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n          const clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n          separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal) - this.p_radiusA - this.p_radiusB;\n          point = clipPoint;\n          break;\n        }\n\n        case ManifoldType.e_faceB: {\n          normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n          const planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n          const clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n          separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal) - this.p_radiusA - this.p_radiusB;\n          point = clipPoint;\n\n          // Ensure normal points from A to B\n          normal.mul(-1);\n          break;\n        }\n      }\n\n      const rA = Vec2.sub(point, cA);\n      const rB = Vec2.sub(point, cB);\n\n      // Track max constraint error.\n      minSeparation = Math.min(minSeparation, separation);\n\n      const baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n      const linearSlop = Settings.linearSlop;\n      const maxLinearCorrection = Settings.maxLinearCorrection;\n\n      // Prevent large corrections and allow slop.\n      const C = Math.clamp(baumgarte * (separation + linearSlop), -maxLinearCorrection, 0.0);\n\n      // Compute the effective mass.\n      const rnA = Vec2.crossVec2Vec2(rA, normal);\n      const rnB = Vec2.crossVec2Vec2(rB, normal);\n      const K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n      // Compute normal impulse\n      const impulse = K > 0.0 ? -C / K : 0.0;\n\n      const P = Vec2.mulNumVec2(impulse, normal);\n\n      cA.subMul(mA, P);\n      aA -= iA * Vec2.crossVec2Vec2(rA, P);\n\n      cB.addMul(mB, P);\n      aB += iB * Vec2.crossVec2Vec2(rB, P);\n    }\n\n    positionA.c.setVec2(cA);\n    positionA.a = aA;\n\n    positionB.c.setVec2(cB);\n    positionB.a = aB;\n\n    return minSeparation;\n  }\n\n  initVelocityConstraint(step: TimeStep): void {\n    const fixtureA = this.m_fixtureA;\n    const fixtureB = this.m_fixtureB;\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    const velocityA = bodyA.c_velocity;\n    const velocityB = bodyB.c_velocity;\n\n    const positionA = bodyA.c_position;\n    const positionB = bodyB.c_position;\n\n    const radiusA = this.p_radiusA;\n    const radiusB = this.p_radiusB;\n    const manifold = this.getManifold();\n\n    const mA = this.v_invMassA;\n    const mB = this.v_invMassB;\n    const iA = this.v_invIA;\n    const iB = this.v_invIB;\n    const localCenterA = Vec2.clone(this.p_localCenterA);\n    const localCenterB = Vec2.clone(this.p_localCenterB);\n\n    const cA = Vec2.clone(positionA.c);\n    const aA = positionA.a;\n    const vA = Vec2.clone(velocityA.v);\n    const wA = velocityA.w;\n\n    const cB = Vec2.clone(positionB.c);\n    const aB = positionB.a;\n    const vB = Vec2.clone(velocityB.v);\n    const wB = velocityB.w;\n\n    _ASSERT && console.assert(manifold.pointCount > 0);\n\n    const xfA = Transform.identity();\n    const xfB = Transform.identity();\n    xfA.q.setAngle(aA);\n    xfB.q.setAngle(aB);\n    xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n    const worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n    this.v_normal.setVec2(worldManifold.normal);\n\n    for (let j = 0; j < this.v_pointCount; ++j) {\n      const vcp = this.v_points[j]; // VelocityConstraintPoint\n\n      vcp.rA.setVec2(Vec2.sub(worldManifold.points[j], cA));\n      vcp.rB.setVec2(Vec2.sub(worldManifold.points[j], cB));\n\n      const rnA = Vec2.crossVec2Vec2(vcp.rA, this.v_normal);\n      const rnB = Vec2.crossVec2Vec2(vcp.rB, this.v_normal);\n\n      const kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n      vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n      const tangent = Vec2.crossVec2Num(this.v_normal, 1.0);\n\n      const rtA = Vec2.crossVec2Vec2(vcp.rA, tangent);\n      const rtB = Vec2.crossVec2Vec2(vcp.rB, tangent);\n\n      const kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n      vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n      // Setup a velocity bias for restitution.\n      vcp.velocityBias = 0.0;\n      const vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.crossNumVec2(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.crossNumVec2(wA, vcp.rA));\n      if (vRel < -Settings.velocityThreshold) {\n        vcp.velocityBias = -this.v_restitution * vRel;\n      }\n    }\n\n    // If we have two points, then prepare the block solver.\n    if (this.v_pointCount == 2 && step.blockSolve) {\n      const vcp1 = this.v_points[0]; // VelocityConstraintPoint\n      const vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n      const rn1A = Vec2.crossVec2Vec2(vcp1.rA, this.v_normal);\n      const rn1B = Vec2.crossVec2Vec2(vcp1.rB, this.v_normal);\n      const rn2A = Vec2.crossVec2Vec2(vcp2.rA, this.v_normal);\n      const rn2B = Vec2.crossVec2Vec2(vcp2.rB, this.v_normal);\n\n      const k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n      const k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n      const k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n      // Ensure a reasonable condition number.\n      const k_maxConditionNumber = 1000.0;\n      if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n        // K is safe to invert.\n        this.v_K.ex.setNum(k11, k12);\n        this.v_K.ey.setNum(k12, k22);\n        this.v_normalMass.set(this.v_K.getInverse());\n      } else {\n        // The constraints are redundant, just use one.\n        // TODO_ERIN use deepest?\n        this.v_pointCount = 1;\n      }\n    }\n\n    positionA.c.setVec2(cA);\n    positionA.a = aA;\n    velocityA.v.setVec2(vA);\n    velocityA.w = wA;\n\n    positionB.c.setVec2(cB);\n    positionB.a = aB;\n    velocityB.v.setVec2(vB);\n    velocityB.w = wB;\n  }\n\n  warmStartConstraint(step: TimeStep): void {\n    const fixtureA = this.m_fixtureA;\n    const fixtureB = this.m_fixtureB;\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    const velocityA = bodyA.c_velocity;\n    const velocityB = bodyB.c_velocity;\n    const positionA = bodyA.c_position;\n    const positionB = bodyB.c_position;\n\n    const mA = this.v_invMassA;\n    const iA = this.v_invIA;\n    const mB = this.v_invMassB;\n    const iB = this.v_invIB;\n\n    const vA = Vec2.clone(velocityA.v);\n    let wA = velocityA.w;\n    const vB = Vec2.clone(velocityB.v);\n    let wB = velocityB.w;\n\n    const normal = this.v_normal;\n    const tangent = Vec2.crossVec2Num(normal, 1.0);\n\n    for (let j = 0; j < this.v_pointCount; ++j) {\n      const vcp = this.v_points[j]; // VelocityConstraintPoint\n\n      const P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n      wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n      vA.subMul(mA, P);\n      wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n      vB.addMul(mB, P);\n    }\n\n    velocityA.v.setVec2(vA);\n    velocityA.w = wA;\n    velocityB.v.setVec2(vB);\n    velocityB.w = wB;\n  }\n\n  storeConstraintImpulses(step: TimeStep): void {\n    const manifold = this.m_manifold;\n    for (let j = 0; j < this.v_pointCount; ++j) {\n      manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n      manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n    }\n  }\n\n  solveVelocityConstraint(step: TimeStep): void {\n    const bodyA = this.m_fixtureA.m_body;\n    const bodyB = this.m_fixtureB.m_body;\n\n    const velocityA = bodyA.c_velocity;\n    const positionA = bodyA.c_position;\n\n    const velocityB = bodyB.c_velocity;\n    const positionB = bodyB.c_position;\n\n    const mA = this.v_invMassA;\n    const iA = this.v_invIA;\n    const mB = this.v_invMassB;\n    const iB = this.v_invIB;\n\n    const vA = Vec2.clone(velocityA.v);\n    let wA = velocityA.w;\n    const vB = Vec2.clone(velocityB.v);\n    let wB = velocityB.w;\n\n    const normal = this.v_normal;\n    const tangent = Vec2.crossVec2Num(normal, 1.0);\n    const friction = this.v_friction;\n\n    _ASSERT && console.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n    // Solve tangent constraints first because non-penetration is more important\n    // than friction.\n    for (let j = 0; j < this.v_pointCount; ++j) {\n      const vcp = this.v_points[j]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      const dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, vcp.rA));\n\n      // Compute tangent force\n      const vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n      let lambda = vcp.tangentMass * (-vt);\n\n      // Clamp the accumulated force\n      const maxFriction = friction * vcp.normalImpulse;\n      const newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction, maxFriction);\n      lambda = newImpulse - vcp.tangentImpulse;\n      vcp.tangentImpulse = newImpulse;\n\n      // Apply contact impulse\n      const P = Vec2.mulNumVec2(lambda, tangent);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n    }\n\n    // Solve normal constraints\n    if (this.v_pointCount == 1 || step.blockSolve == false) {\n      for (let i = 0; i < this.v_pointCount; ++i) {\n        const vcp = this.v_points[i]; // VelocityConstraintPoint\n\n        // Relative velocity at contact\n        const dv = Vec2.zero();\n        dv.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, vcp.rB));\n        dv.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, vcp.rA));\n\n        // Compute normal impulse\n        const vn = Vec2.dot(dv, normal);\n        let lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n        // Clamp the accumulated impulse\n        const newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n        lambda = newImpulse - vcp.normalImpulse;\n        vcp.normalImpulse = newImpulse;\n\n        // Apply contact impulse\n        const P = Vec2.mulNumVec2(lambda, normal);\n\n        vA.subMul(mA, P);\n        wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n\n        vB.addMul(mB, P);\n        wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n      }\n    } else {\n      // Block solver developed in collaboration with Dirk Gregorius (back in\n      // 01/07 on Box2D_Lite).\n      // Build the mini LCP for this contact patch\n      //\n      // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n      // 1..2\n      //\n      // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n      // b = vn0 - velocityBias\n      //\n      // The system is solved using the \"Total enumeration method\" (s. Murty).\n      // The complementary constraint vn_i * x_i\n      // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n      // So for the 2D contact problem the cases\n      // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n      // vn1 = 0 need to be tested. The first valid\n      // solution that satisfies the problem is chosen.\n      //\n      // In order to account of the accumulated impulse 'a' (because of the\n      // iterative nature of the solver which only requires\n      // that the accumulated impulse is clamped and not the incremental\n      // impulse) we change the impulse variable (x_i).\n      //\n      // Substitute:\n      //\n      // x = a + d\n      //\n      // a := old total impulse\n      // x := new total impulse\n      // d := incremental impulse\n      //\n      // For the current iteration we extend the formula for the incremental\n      // impulse\n      // to compute the new total impulse:\n      //\n      // vn = A * d + b\n      // = A * (x - a) + b\n      // = A * x + b - A * a\n      // = A * x + b'\n      // b' = b - A * a;\n\n      const vcp1 = this.v_points[0]; // VelocityConstraintPoint\n      const vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n      const a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n      _ASSERT && console.assert(a.x >= 0.0 && a.y >= 0.0);\n\n      // Relative velocity at contact\n      let dv1 = Vec2.zero().add(vB).add(Vec2.crossNumVec2(wB, vcp1.rB)).sub(vA).sub(Vec2.crossNumVec2(wA, vcp1.rA));\n      let dv2 = Vec2.zero().add(vB).add(Vec2.crossNumVec2(wB, vcp2.rB)).sub(vA).sub(Vec2.crossNumVec2(wA, vcp2.rA));\n\n      // Compute normal velocity\n      let vn1 = Vec2.dot(dv1, normal);\n      let vn2 = Vec2.dot(dv2, normal);\n\n      const b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n      // Compute b'\n      b.sub(Mat22.mulVec2(this.v_K, a));\n\n      const k_errorTol = 1e-3;\n      // NOT_USED(k_errorTol);\n\n      while (true) {\n        //\n        // Case 1: vn = 0\n        //\n        // 0 = A * x + b'\n        //\n        // Solve for x:\n        //\n        // x = - inv(A) * b'\n        //\n        const x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n        if (x.x >= 0.0 && x.y >= 0.0) {\n          // Get the incremental impulse\n          const d = Vec2.sub(x, a);\n\n          // Apply incremental impulse\n          const P1 = Vec2.mulNumVec2(d.x, normal);\n          const P2 = Vec2.mulNumVec2(d.y, normal);\n\n          vA.subCombine(mA, P1, mA, P2);\n          wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n\n          vB.addCombine(mB, P1, mB, P2);\n          wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n\n          // Accumulate\n          vcp1.normalImpulse = x.x;\n          vcp2.normalImpulse = x.y;\n\n          if (DEBUG_SOLVER) {\n            // Postconditions\n            dv1 = Vec2.sub(Vec2.add(vB, Vec2.crossNumVec2(wB, vcp1.rB)), Vec2.add(vA, Vec2.crossNumVec2(wA, vcp1.rA)));\n            dv2 = Vec2.sub(Vec2.add(vB, Vec2.crossNumVec2(wB, vcp2.rB)), Vec2.add(vA, Vec2.crossNumVec2(wA, vcp2.rA)));\n\n            // Compute normal velocity\n            vn1 = Vec2.dot(dv1, normal);\n            vn2 = Vec2.dot(dv2, normal);\n\n            _ASSERT && console.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n            _ASSERT && console.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n          }\n          break;\n        }\n\n        //\n        // Case 2: vn1 = 0 and x2 = 0\n        //\n        // 0 = a11 * x1 + a12 * 0 + b1'\n        // vn2 = a21 * x1 + a22 * 0 + b2'\n        //\n        x.x = -vcp1.normalMass * b.x;\n        x.y = 0.0;\n        vn1 = 0.0;\n        vn2 = this.v_K.ex.y * x.x + b.y;\n\n        if (x.x >= 0.0 && vn2 >= 0.0) {\n          // Get the incremental impulse\n          const d = Vec2.sub(x, a);\n\n          // Apply incremental impulse\n          const P1 = Vec2.mulNumVec2(d.x, normal);\n          const P2 = Vec2.mulNumVec2(d.y, normal);\n          vA.subCombine(mA, P1, mA, P2);\n          wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n\n          vB.addCombine(mB, P1, mB, P2);\n          wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n\n          // Accumulate\n          vcp1.normalImpulse = x.x;\n          vcp2.normalImpulse = x.y;\n\n          if (DEBUG_SOLVER) {\n            // Postconditions\n            const dv1B = Vec2.add(vB, Vec2.crossNumVec2(wB, vcp1.rB));\n            const dv1A = Vec2.add(vA, Vec2.crossNumVec2(wA, vcp1.rA));\n            const dv1 = Vec2.sub(dv1B, dv1A);\n\n            // Compute normal velocity\n            vn1 = Vec2.dot(dv1, normal);\n\n            _ASSERT && console.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          }\n          break;\n        }\n\n        //\n        // Case 3: vn2 = 0 and x1 = 0\n        //\n        // vn1 = a11 * 0 + a12 * x2 + b1'\n        // 0 = a21 * 0 + a22 * x2 + b2'\n        //\n        x.x = 0.0;\n        x.y = -vcp2.normalMass * b.y;\n        vn1 = this.v_K.ey.x * x.y + b.x;\n        vn2 = 0.0;\n\n        if (x.y >= 0.0 && vn1 >= 0.0) {\n          // Resubstitute for the incremental impulse\n          const d = Vec2.sub(x, a);\n\n          // Apply incremental impulse\n          const P1 = Vec2.mulNumVec2(d.x, normal);\n          const P2 = Vec2.mulNumVec2(d.y, normal);\n          vA.subCombine(mA, P1, mA, P2);\n          wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n\n          vB.addCombine(mB, P1, mB, P2);\n          wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n\n          // Accumulate\n          vcp1.normalImpulse = x.x;\n          vcp2.normalImpulse = x.y;\n\n          if (DEBUG_SOLVER) {\n            // Postconditions\n            const dv2B = Vec2.add(vB, Vec2.crossNumVec2(wB, vcp2.rB));\n            const dv2A = Vec2.add(vA, Vec2.crossNumVec2(wA, vcp2.rA));\n            const dv1 = Vec2.sub(dv2B, dv2A);\n\n            // Compute normal velocity\n            vn2 = Vec2.dot(dv2, normal);\n\n            _ASSERT && console.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n          }\n          break;\n        }\n\n        //\n        // Case 4: x1 = 0 and x2 = 0\n        //\n        // vn1 = b1\n        // vn2 = b2;\n        //\n        x.x = 0.0;\n        x.y = 0.0;\n        vn1 = b.x;\n        vn2 = b.y;\n\n        if (vn1 >= 0.0 && vn2 >= 0.0) {\n          // Resubstitute for the incremental impulse\n          const d = Vec2.sub(x, a);\n\n          // Apply incremental impulse\n          const P1 = Vec2.mulNumVec2(d.x, normal);\n          const P2 = Vec2.mulNumVec2(d.y, normal);\n          vA.subCombine(mA, P1, mA, P2);\n          wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n\n          vB.addCombine(mB, P1, mB, P2);\n          wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n\n          // Accumulate\n          vcp1.normalImpulse = x.x;\n          vcp2.normalImpulse = x.y;\n\n          break;\n        }\n\n        // No solution, give up. This is hit sometimes, but it doesn't seem to\n        // matter.\n        break;\n      }\n    }\n\n    velocityA.v.setVec2(vA);\n    velocityA.w = wA;\n\n    velocityB.v.setVec2(vB);\n    velocityB.w = wB;\n  }\n\n  /**\n   * @internal\n   */\n  static addType(type1: ShapeType, type2: ShapeType, callback: ContactCallback): void {\n    s_registers[type1] = s_registers[type1] || {};\n    s_registers[type1][type2] = callback;\n  }\n\n  /**\n   * @internal\n   */\n  static create(fixtureA: Fixture, indexA: number, fixtureB: Fixture, indexB: number): Contact | null {\n    const typeA = fixtureA.getType();\n    const typeB = fixtureB.getType();\n\n    // TODO: pool contacts\n    let contact;\n    let evaluateFcn;\n    if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n      contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n    } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n      contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n    } else {\n      return null;\n    }\n\n    // Contact creation may swap fixtures.\n    fixtureA = contact.getFixtureA();\n    fixtureB = contact.getFixtureB();\n    indexA = contact.getChildIndexA();\n    indexB = contact.getChildIndexB();\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    // Connect to body A\n    contact.m_nodeA.contact = contact;\n    contact.m_nodeA.other = bodyB;\n\n    contact.m_nodeA.prev = null;\n    contact.m_nodeA.next = bodyA.m_contactList;\n    if (bodyA.m_contactList != null) {\n      bodyA.m_contactList.prev = contact.m_nodeA;\n    }\n    bodyA.m_contactList = contact.m_nodeA;\n\n    // Connect to body B\n    contact.m_nodeB.contact = contact;\n    contact.m_nodeB.other = bodyA;\n\n    contact.m_nodeB.prev = null;\n    contact.m_nodeB.next = bodyB.m_contactList;\n    if (bodyB.m_contactList != null) {\n      bodyB.m_contactList.prev = contact.m_nodeB;\n    }\n    bodyB.m_contactList = contact.m_nodeB;\n\n    // Wake up the bodies\n    if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n\n    return contact;\n  }\n\n  /**\n   * @internal\n   */\n  static destroy(contact: Contact, listener: { endContact: (contact: Contact) => void }): void {\n    const fixtureA = contact.m_fixtureA;\n    const fixtureB = contact.m_fixtureB;\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    if (contact.isTouching()) {\n      listener.endContact(contact);\n    }\n\n    // Remove from body 1\n    if (contact.m_nodeA.prev) {\n      contact.m_nodeA.prev.next = contact.m_nodeA.next;\n    }\n\n    if (contact.m_nodeA.next) {\n      contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n    }\n\n    if (contact.m_nodeA == bodyA.m_contactList) {\n      bodyA.m_contactList = contact.m_nodeA.next;\n    }\n\n    // Remove from body 2\n    if (contact.m_nodeB.prev) {\n      contact.m_nodeB.prev.next = contact.m_nodeB.next;\n    }\n\n    if (contact.m_nodeB.next) {\n      contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n    }\n\n    if (contact.m_nodeB == bodyB.m_contactList) {\n      bodyB.m_contactList = contact.m_nodeB.next;\n    }\n\n    if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n\n    const typeA = fixtureA.getType();\n    const typeB = fixtureB.getType();\n\n    // const destroyFcn = s_registers[typeA][typeB].destroyFcn;\n    // if (typeof destroyFcn === 'function') {\n    //   destroyFcn(contact);\n    // }\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../util/options';\nimport { Vec2 } from '../common/Vec2';\nimport { BroadPhase } from '../collision/BroadPhase';\nimport { Solver, ContactImpulse, TimeStep } from './Solver';\nimport { Body, BodyDef } from './Body';\nimport { Joint } from './Joint';\nimport { Contact } from './Contact';\nimport { AABB, RayCastInput, RayCastOutput } from \"../collision/AABB\";\nimport { Fixture, FixtureProxy } from \"./Fixture\";\nimport { Manifold } from \"../collision/Manifold\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * @prop gravity [{ x : 0, y : 0}]\n * @prop allowSleep [true]\n * @prop warmStarting [true]\n * @prop continuousPhysics [true]\n * @prop subStepping [false]\n * @prop blockSolve [true]\n * @prop velocityIterations [8] For the velocity constraint solver.\n * @prop positionIterations [3] For the position constraint solver.\n */\nexport interface WorldDef {\n  gravity?: Vec2;\n  allowSleep?: boolean;\n  warmStarting?: boolean;\n  continuousPhysics?: boolean;\n  subStepping?: boolean;\n  blockSolve?: boolean;\n  velocityIterations?: number;\n  positionIterations?: number;\n}\n\nconst WorldDefDefault: WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * Callback function for ray casts, see {@link World.rayCast}.\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue\n */\nexport type WorldRayCastCallback = (fixture: Fixture, point: Vec2, normal: Vec2, fraction: number) => number;\n\n/**\n * Called for each fixture found in the query AABB. It may return `false` to terminate the query.\n */\nexport type WorldAABBQueryCallback = (fixture: Fixture) => boolean;\n\nexport class World {\n  /** @internal */ m_solver: Solver;\n  /** @internal */ m_broadPhase: BroadPhase;\n  /** @internal */ m_contactList: Contact | null;\n  /** @internal */ m_contactCount: number;\n  /** @internal */ m_bodyList: Body | null;\n  /** @internal */ m_bodyCount: number;\n  /** @internal */ m_jointList: Joint | null;\n  /** @internal */ m_jointCount: number;\n  /** @internal */ m_stepComplete: boolean;\n  /** @internal */ m_allowSleep: boolean;\n  /** @internal */ m_gravity: Vec2;\n  /** @internal */ m_clearForces: boolean;\n  /** @internal */ m_newFixture: boolean;\n  /** @internal */ m_locked: boolean;\n  /** @internal */ m_warmStarting: boolean;\n  /** @internal */ m_continuousPhysics: boolean;\n  /** @internal */ m_subStepping: boolean;\n  /** @internal */ m_blockSolve: boolean;\n  /** @internal */ m_velocityIterations: number;\n  /** @internal */ m_positionIterations: number;\n  /** @internal */ m_t: number;\n\n  // TODO\n  /** @internal */ _listeners: {\n    [key: string]: any[]\n  };\n\n  /**\n   * @param def World definition or gravity vector.\n   */\n  constructor(def?: WorldDef | Vec2 | null) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof World)) {\n      return new World(def);\n    }\n\n    this.s_step = new TimeStep();\n\n\n    if (def && Vec2.isValid(def)) {\n      def = { gravity: def as Vec2 };\n    }\n\n    def = options(def, WorldDefDefault) as WorldDef;\n\n    this.m_solver = new Solver(this);\n\n    this.m_broadPhase = new BroadPhase();\n\n    this.m_contactList = null;\n    this.m_contactCount = 0;\n\n    this.m_bodyList = null;\n    this.m_bodyCount = 0;\n\n    this.m_jointList = null;\n    this.m_jointCount = 0;\n\n    this.m_stepComplete = true;\n\n    this.m_allowSleep = def.allowSleep;\n    this.m_gravity = Vec2.clone(def.gravity);\n\n    this.m_clearForces = true;\n    this.m_newFixture = false;\n    this.m_locked = false;\n\n    // These are for debugging the solver.\n    this.m_warmStarting = def.warmStarting;\n    this.m_continuousPhysics = def.continuousPhysics;\n    this.m_subStepping = def.subStepping;\n\n    this.m_blockSolve = def.blockSolve;\n    this.m_velocityIterations = def.velocityIterations;\n    this.m_positionIterations = def.positionIterations;\n\n    this.m_t = 0;\n  }\n\n  /** @internal */\n  _serialize(): object {\n    const bodies = [];\n    const joints = [];\n\n    for (let b = this.getBodyList(); b; b = b.getNext()) {\n      bodies.push(b);\n    }\n\n    for (let j = this.getJointList(); j; j = j.getNext()) {\n      // @ts-ignore\n      if (typeof j._serialize === 'function') {\n        joints.push(j);\n      }\n    }\n\n    return {\n      gravity: this.m_gravity,\n      bodies,\n      joints,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, context: any, restore: any): World {\n    if (!data) {\n      return new World();\n    }\n\n    const world = new World(data.gravity);\n\n    if (data.bodies) {\n      for (let i = data.bodies.length - 1; i >= 0; i -= 1) {\n        world._addBody(restore(Body, data.bodies[i], world));\n      }\n    }\n\n    if (data.joints) {\n      for (let i = data.joints.length - 1; i >= 0; i--) {\n        world.createJoint(restore(Joint, data.joints[i], world));\n      }\n    }\n\n    return world;\n  }\n\n  /**\n   * Get the world body list. With the returned body, use Body.getNext to get the\n   * next body in the world list. A null body indicates the end of the list.\n   *\n   * @return the head of the world body list.\n   */\n  getBodyList(): Body | null {\n    return this.m_bodyList;\n  }\n\n  /**\n   * Get the world joint list. With the returned joint, use Joint.getNext to get\n   * the next joint in the world list. A null joint indicates the end of the list.\n   *\n   * @return the head of the world joint list.\n   */\n  getJointList(): Joint | null {\n    return this.m_jointList;\n  }\n\n  /**\n   * Get the world contact list. With the returned contact, use Contact.getNext to\n   * get the next contact in the world list. A null contact indicates the end of\n   * the list.\n   *\n   * Warning: contacts are created and destroyed in the middle of a time step.\n   * Use ContactListener to avoid missing contacts.\n   *\n   * @return the head of the world contact list.\n   */\n  getContactList(): Contact | null {\n    return this.m_contactList;\n  }\n\n  getBodyCount(): number {\n    return this.m_bodyCount;\n  }\n\n  getJointCount(): number {\n    return this.m_jointCount;\n  }\n\n  /**\n   * Get the number of contacts (each may have 0 or more contact points).\n   */\n  getContactCount(): number {\n    return this.m_contactCount;\n  }\n\n  /**\n   * Change the global gravity vector.\n   */\n  setGravity(gravity: Vec2): void {\n    this.m_gravity = gravity;\n  }\n\n  /**\n   * Get the global gravity vector.\n   */\n  getGravity(): Vec2 {\n    return this.m_gravity;\n  }\n\n  /**\n   * Is the world locked (in the middle of a time step).\n   */\n  isLocked(): boolean {\n    return this.m_locked;\n  }\n\n  /**\n   * Enable/disable sleep.\n   */\n  setAllowSleeping(flag: boolean): void {\n    if (flag == this.m_allowSleep) {\n      return;\n    }\n\n    this.m_allowSleep = flag;\n    if (this.m_allowSleep == false) {\n      for (let b = this.m_bodyList; b; b = b.m_next) {\n        b.setAwake(true);\n      }\n    }\n  }\n\n  getAllowSleeping(): boolean {\n    return this.m_allowSleep;\n  }\n\n  /**\n   * Enable/disable warm starting. For testing.\n   */\n  setWarmStarting(flag: boolean): void {\n    this.m_warmStarting = flag;\n  }\n\n  getWarmStarting(): boolean {\n    return this.m_warmStarting;\n  }\n\n  /**\n   * Enable/disable continuous physics. For testing.\n   */\n  setContinuousPhysics(flag: boolean): void {\n    this.m_continuousPhysics = flag;\n  }\n\n  getContinuousPhysics(): boolean {\n    return this.m_continuousPhysics;\n  }\n\n  /**\n   * Enable/disable single stepped continuous physics. For testing.\n   */\n  setSubStepping(flag: boolean): void {\n    this.m_subStepping = flag;\n  }\n\n  getSubStepping(): boolean {\n    return this.m_subStepping;\n  }\n\n  /**\n   * Set flag to control automatic clearing of forces after each time step.\n   */\n  setAutoClearForces(flag: boolean): void {\n    this.m_clearForces = flag;\n  }\n\n  /**\n   * Get the flag that controls automatic clearing of forces after each time step.\n   */\n  getAutoClearForces(): boolean {\n    return this.m_clearForces;\n  }\n\n  /**\n   * Manually clear the force buffer on all bodies. By default, forces are cleared\n   * automatically after each call to step. The default behavior is modified by\n   * calling setAutoClearForces. The purpose of this function is to support\n   * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n   * under a variable frame-rate. When you perform sub-stepping you will disable\n   * auto clearing of forces and instead call clearForces after all sub-steps are\n   * complete in one pass of your game loop.\n   *\n   * See {@link World.setAutoClearForces}\n   */\n  clearForces(): void {\n    for (let body = this.m_bodyList; body; body = body.getNext()) {\n      body.m_force.setZero();\n      body.m_torque = 0.0;\n    }\n  }\n\n  /**\n   * Query the world for all fixtures that potentially overlap the provided AABB.\n   *\n   * @param aabb The query box.\n   * @param callback Called for each fixture found in the query AABB. It may return `false` to terminate the query.\n   */\n  queryAABB(aabb: AABB, callback: WorldAABBQueryCallback): void {\n    _ASSERT && console.assert(typeof callback === 'function');\n    const broadPhase = this.m_broadPhase;\n    this.m_broadPhase.query(aabb, function(proxyId: number): boolean { // TODO GC\n      const proxy = broadPhase.getUserData(proxyId);\n      return callback(proxy.fixture);\n    });\n  }\n\n  /**\n   * Ray-cast the world for all fixtures in the path of the ray. Your callback\n   * controls whether you get the closest point, any point, or n-points. The\n   * ray-cast ignores shapes that contain the starting point.\n   *\n   * @param point1 The ray starting point\n   * @param point2 The ray ending point\n   * @param callback A user implemented callback function.\n   */\n  rayCast(point1: Vec2, point2: Vec2, callback: WorldRayCastCallback): void {\n    _ASSERT && console.assert(typeof callback === 'function');\n    const broadPhase = this.m_broadPhase;\n\n    this.m_broadPhase.rayCast({\n      maxFraction : 1.0,\n      p1 : point1,\n      p2 : point2\n    }, function(input: RayCastInput, proxyId: number): number { // TODO GC\n      const proxy = broadPhase.getUserData(proxyId);\n      const fixture = proxy.fixture;\n      const index = proxy.childIndex;\n      // @ts-ignore\n      const output: RayCastOutput = {}; // TODO GC\n      const hit = fixture.rayCast(output, input, index);\n      if (hit) {\n        const fraction = output.fraction;\n        const point = Vec2.add(Vec2.mulNumVec2((1.0 - fraction), input.p1), Vec2.mulNumVec2(fraction, input.p2));\n        return callback(fixture, point, output.normal, fraction);\n      }\n      return input.maxFraction;\n    });\n  }\n\n  /**\n   * Get the number of broad-phase proxies.\n   */\n  getProxyCount(): number {\n    return this.m_broadPhase.getProxyCount();\n  }\n\n  /**\n   * Get the height of broad-phase dynamic tree.\n   */\n  getTreeHeight(): number {\n    return this.m_broadPhase.getTreeHeight();\n  }\n\n  /**\n   * Get the balance of broad-phase dynamic tree.\n   */\n  getTreeBalance(): number {\n    return this.m_broadPhase.getTreeBalance();\n  }\n\n  /**\n   * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n   * The minimum is 1.\n   */\n  getTreeQuality(): number {\n    return this.m_broadPhase.getTreeQuality();\n  }\n\n  /**\n   * Shift the world origin. Useful for large worlds. The body shift formula is:\n   * position -= newOrigin\n   *\n   * @param newOrigin The new origin with respect to the old origin\n   */\n  shiftOrigin(newOrigin: Vec2): void {\n    _ASSERT && console.assert(this.m_locked == false);\n    if (this.m_locked) {\n      return;\n    }\n\n    for (let b = this.m_bodyList; b; b = b.m_next) {\n      b.m_xf.p.sub(newOrigin);\n      b.m_sweep.c0.sub(newOrigin);\n      b.m_sweep.c.sub(newOrigin);\n    }\n\n    for (let j = this.m_jointList; j; j = j.m_next) {\n      j.shiftOrigin(newOrigin);\n    }\n\n    this.m_broadPhase.shiftOrigin(newOrigin);\n  }\n\n  /**\n   * @internal Used for deserialize.\n   */\n  _addBody(body: Body): void {\n    _ASSERT && console.assert(this.isLocked() === false);\n    if (this.isLocked()) {\n      return;\n    }\n\n    // Add to world doubly linked list.\n    body.m_prev = null;\n    body.m_next = this.m_bodyList;\n    if (this.m_bodyList) {\n      this.m_bodyList.m_prev = body;\n    }\n    this.m_bodyList = body;\n    ++this.m_bodyCount;\n  }\n\n  /**\n   * Create a rigid body given a definition. No reference to the definition is\n   * retained.\n   *\n   * Warning: This function is locked during callbacks.\n   */\n  createBody(def?: BodyDef): Body;\n  createBody(position: Vec2, angle?: number): Body;\n  // tslint:disable-next-line:typedef\n  createBody(arg1?, arg2?) {\n    _ASSERT && console.assert(this.isLocked() == false);\n    if (this.isLocked()) {\n      return null;\n    }\n\n    let def: BodyDef = {};\n    if (!arg1) {\n    } else if (Vec2.isValid(arg1)) {\n      def = { position : arg1, angle: arg2 };\n    } else if (typeof arg1 === 'object') {\n      def = arg1;\n    }\n\n    const body = new Body(this, def);\n    this._addBody(body);\n    return body;\n  }\n\n  createDynamicBody(def?: BodyDef): Body;\n  createDynamicBody(position: Vec2, angle?: number): Body;\n  // tslint:disable-next-line:typedef\n  createDynamicBody(arg1?, arg2?) {\n    let def: BodyDef = {};\n    if (!arg1) {\n    } else if (Vec2.isValid(arg1)) {\n      def = { position : arg1, angle: arg2 };\n    } else if (typeof arg1 === 'object') {\n      def = arg1;\n    }\n    def.type = 'dynamic';\n    return this.createBody(def);\n  }\n\n  createKinematicBody(def?: BodyDef): Body;\n  createKinematicBody(position: Vec2, angle?: number): Body;\n  // tslint:disable-next-line:typedef\n  createKinematicBody(arg1?, arg2?) {\n    let def: BodyDef = {};\n    if (!arg1) {\n    } else if (Vec2.isValid(arg1)) {\n      def = { position : arg1, angle: arg2 };\n    } else if (typeof arg1 === 'object') {\n      def = arg1;\n    }\n    def.type = 'kinematic';\n    return this.createBody(def);\n  }\n\n  /**\n   * Destroy a rigid body given a definition. No reference to the definition is\n   * retained.\n   *\n   * Warning: This automatically deletes all associated shapes and joints.\n   *\n   * Warning: This function is locked during callbacks.\n   */\n  destroyBody(b: Body): boolean {\n    _ASSERT && console.assert(this.m_bodyCount > 0);\n    _ASSERT && console.assert(this.isLocked() == false);\n    if (this.isLocked()) {\n      return;\n    }\n\n    if (b.m_destroyed) {\n      return false;\n    }\n\n    // Delete the attached joints.\n    let je = b.m_jointList;\n    while (je) {\n      const je0 = je;\n      je = je.next;\n\n      this.publish('remove-joint', je0.joint);\n      this.destroyJoint(je0.joint);\n\n      b.m_jointList = je;\n    }\n    b.m_jointList = null;\n\n    // Delete the attached contacts.\n    let ce = b.m_contactList;\n    while (ce) {\n      const ce0 = ce;\n      ce = ce.next;\n\n      this.destroyContact(ce0.contact);\n\n      b.m_contactList = ce;\n    }\n    b.m_contactList = null;\n\n    // Delete the attached fixtures. This destroys broad-phase proxies.\n    let f = b.m_fixtureList;\n    while (f) {\n      const f0 = f;\n      f = f.m_next;\n\n      this.publish('remove-fixture', f0);\n      f0.destroyProxies(this.m_broadPhase);\n\n      b.m_fixtureList = f;\n    }\n    b.m_fixtureList = null;\n\n    // Remove world body list.\n    if (b.m_prev) {\n      b.m_prev.m_next = b.m_next;\n    }\n\n    if (b.m_next) {\n      b.m_next.m_prev = b.m_prev;\n    }\n\n    if (b == this.m_bodyList) {\n      this.m_bodyList = b.m_next;\n    }\n\n    b.m_destroyed = true;\n\n    --this.m_bodyCount;\n\n    this.publish('remove-body', b);\n\n    return true;\n  }\n\n  /**\n   * Create a joint to constrain bodies together. No reference to the definition\n   * is retained. This may cause the connected bodies to cease colliding.\n   *\n   * Warning: This function is locked during callbacks.\n   */\n  createJoint<T extends Joint>(joint: T): T | null {\n    _ASSERT && console.assert(!!joint.m_bodyA);\n    _ASSERT && console.assert(!!joint.m_bodyB);\n    _ASSERT && console.assert(this.isLocked() == false);\n    if (this.isLocked()) {\n      return null;\n    }\n\n    // Connect to the world list.\n    joint.m_prev = null;\n    joint.m_next = this.m_jointList;\n    if (this.m_jointList) {\n      this.m_jointList.m_prev = joint;\n    }\n    this.m_jointList = joint;\n    ++this.m_jointCount;\n\n    // Connect to the bodies' doubly linked lists.\n    joint.m_edgeA.joint = joint;\n    joint.m_edgeA.other = joint.m_bodyB;\n    joint.m_edgeA.prev = null;\n    joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n    if (joint.m_bodyA.m_jointList)\n      joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n    joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n    joint.m_edgeB.joint = joint;\n    joint.m_edgeB.other = joint.m_bodyA;\n    joint.m_edgeB.prev = null;\n    joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n    if (joint.m_bodyB.m_jointList)\n      joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n    joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n    // If the joint prevents collisions, then flag any contacts for filtering.\n    if (joint.m_collideConnected == false) {\n      for (let edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n        if (edge.other == joint.m_bodyA) {\n          // Flag the contact for filtering at the next time step (where either\n          // body is awake).\n          edge.contact.flagForFiltering();\n        }\n      }\n    }\n\n    // Note: creating a joint doesn't wake the bodies.\n\n    return joint;\n  }\n\n  /**\n   * Destroy a joint. This may cause the connected bodies to begin colliding.\n   * Warning: This function is locked during callbacks.\n   */\n  destroyJoint(joint: Joint): void {\n    _ASSERT && console.assert(this.isLocked() == false);\n    if (this.isLocked()) {\n      return;\n    }\n\n    // Remove from the doubly linked list.\n    if (joint.m_prev) {\n      joint.m_prev.m_next = joint.m_next;\n    }\n\n    if (joint.m_next) {\n      joint.m_next.m_prev = joint.m_prev;\n    }\n\n    if (joint == this.m_jointList) {\n      this.m_jointList = joint.m_next;\n    }\n\n    // Disconnect from bodies.\n    const bodyA = joint.m_bodyA;\n    const bodyB = joint.m_bodyB;\n\n    // Wake up connected bodies.\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n\n    // Remove from body 1.\n    if (joint.m_edgeA.prev) {\n      joint.m_edgeA.prev.next = joint.m_edgeA.next;\n    }\n\n    if (joint.m_edgeA.next) {\n      joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n    }\n\n    if (joint.m_edgeA == bodyA.m_jointList) {\n      bodyA.m_jointList = joint.m_edgeA.next;\n    }\n\n    joint.m_edgeA.prev = null;\n    joint.m_edgeA.next = null;\n\n    // Remove from body 2\n    if (joint.m_edgeB.prev) {\n      joint.m_edgeB.prev.next = joint.m_edgeB.next;\n    }\n\n    if (joint.m_edgeB.next) {\n      joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n    }\n\n    if (joint.m_edgeB == bodyB.m_jointList) {\n      bodyB.m_jointList = joint.m_edgeB.next;\n    }\n\n    joint.m_edgeB.prev = null;\n    joint.m_edgeB.next = null;\n\n    _ASSERT && console.assert(this.m_jointCount > 0);\n    --this.m_jointCount;\n\n    // If the joint prevents collisions, then flag any contacts for filtering.\n    if (joint.m_collideConnected == false) {\n      let edge = bodyB.getContactList();\n      while (edge) {\n        if (edge.other == bodyA) {\n          // Flag the contact for filtering at the next time step (where either\n          // body is awake).\n          edge.contact.flagForFiltering();\n        }\n\n        edge = edge.next;\n      }\n    }\n\n    this.publish('remove-joint', joint);\n  }\n\n  /** @internal */\n  s_step: TimeStep; // reuse\n\n  /**\n   * Take a time step. This performs collision detection, integration, and\n   * constraint solution.\n   *\n   * Broad-phase, narrow-phase, solve and solve time of impacts.\n   *\n   * @param timeStep Time step, this should not vary.\n   */\n  step(timeStep: number, velocityIterations?: number, positionIterations?: number): void {\n    this.publish('pre-step', timeStep);\n\n    if ((velocityIterations | 0) !== velocityIterations) {\n      // TODO: remove this in future\n      velocityIterations = 0;\n    }\n\n    velocityIterations = velocityIterations || this.m_velocityIterations;\n    positionIterations = positionIterations || this.m_positionIterations;\n\n    // If new fixtures were added, we need to find the new contacts.\n    if (this.m_newFixture) {\n      this.findNewContacts();\n      this.m_newFixture = false;\n    }\n\n    this.m_locked = true;\n\n    this.s_step.reset(timeStep);\n    this.s_step.velocityIterations = velocityIterations;\n    this.s_step.positionIterations = positionIterations;\n    this.s_step.warmStarting = this.m_warmStarting;\n    this.s_step.blockSolve = this.m_blockSolve;\n\n    // Update contacts. This is where some contacts are destroyed.\n    this.updateContacts();\n\n    // Integrate velocities, solve velocity constraints, and integrate positions.\n    if (this.m_stepComplete && timeStep > 0.0) {\n      this.m_solver.solveWorld(this.s_step);\n\n      // Synchronize fixtures, check for out of range bodies.\n      for (let b = this.m_bodyList; b; b = b.getNext()) {\n        // If a body was not in an island then it did not move.\n        if (b.m_islandFlag == false) {\n          continue;\n        }\n\n        if (b.isStatic()) {\n          continue;\n        }\n\n        // Update fixtures (for broad-phase).\n        b.synchronizeFixtures();\n      }\n      // Look for new contacts.\n      this.findNewContacts();\n    }\n\n    // Handle TOI events.\n    if (this.m_continuousPhysics && timeStep > 0.0) {\n      this.m_solver.solveWorldTOI(this.s_step);\n    }\n\n    if (this.m_clearForces) {\n      this.clearForces();\n    }\n\n    this.m_locked = false;\n\n    this.publish('post-step', timeStep);\n  }\n\n  /**\n   * @internal\n   * Call this method to find new contacts.\n   */\n  findNewContacts(): void {\n    this.m_broadPhase.updatePairs(\n      (proxyA: FixtureProxy, proxyB: FixtureProxy) => this.createContact(proxyA, proxyB)\n    );\n  }\n\n  /**\n   * @internal\n   * Callback for broad-phase.\n   */\n  createContact(proxyA: FixtureProxy, proxyB: FixtureProxy): void {\n    const fixtureA = proxyA.fixture;\n    const fixtureB = proxyB.fixture;\n\n    const indexA = proxyA.childIndex;\n    const indexB = proxyB.childIndex;\n\n    const bodyA = fixtureA.getBody();\n    const bodyB = fixtureB.getBody();\n\n    // Are the fixtures on the same body?\n    if (bodyA == bodyB) {\n      return;\n    }\n\n    // TODO_ERIN use a hash table to remove a potential bottleneck when both\n    // bodies have a lot of contacts.\n    // Does a contact already exist?\n    let edge = bodyB.getContactList(); // ContactEdge\n    while (edge) {\n      if (edge.other == bodyA) {\n        const fA = edge.contact.getFixtureA();\n        const fB = edge.contact.getFixtureB();\n        const iA = edge.contact.getChildIndexA();\n        const iB = edge.contact.getChildIndexB();\n\n        if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n          // A contact already exists.\n          return;\n        }\n\n        if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n          // A contact already exists.\n          return;\n        }\n      }\n\n      edge = edge.next;\n    }\n\n    if (bodyB.shouldCollide(bodyA) == false) {\n      return;\n    }\n    if (fixtureB.shouldCollide(fixtureA) == false) {\n      return;\n    }\n\n    // Call the factory.\n    const contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n    if (contact == null) {\n      return;\n    }\n\n    // Insert into the world.\n    contact.m_prev = null;\n    if (this.m_contactList != null) {\n      contact.m_next = this.m_contactList;\n      this.m_contactList.m_prev = contact;\n    }\n    this.m_contactList = contact;\n\n    ++this.m_contactCount;\n  }\n\n  /**\n   * @internal\n   * Removes old non-overlapping contacts, applies filters and updates contacts.\n   */\n  updateContacts(): void {\n    // Update awake contacts.\n    let c;\n    let next_c = this.m_contactList;\n    while (c = next_c) {\n      next_c = c.getNext();\n      const fixtureA = c.getFixtureA();\n      const fixtureB = c.getFixtureB();\n      const indexA = c.getChildIndexA();\n      const indexB = c.getChildIndexB();\n      const bodyA = fixtureA.getBody();\n      const bodyB = fixtureB.getBody();\n\n      // Is this contact flagged for filtering?\n      if (c.m_filterFlag) {\n        if (bodyB.shouldCollide(bodyA) == false) {\n          this.destroyContact(c);\n          continue;\n        }\n\n        if (fixtureB.shouldCollide(fixtureA) == false) {\n          this.destroyContact(c);\n          continue;\n        }\n\n        // Clear the filtering flag.\n        c.m_filterFlag = false;\n      }\n\n      const activeA = bodyA.isAwake() && !bodyA.isStatic();\n      const activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n      // At least one body must be awake and it must be dynamic or kinematic.\n      if (activeA == false && activeB == false) {\n        continue;\n      }\n\n      const proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n      const proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n      const overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n      // Here we destroy contacts that cease to overlap in the broad-phase.\n      if (overlap == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // The contact persists.\n      c.update(this);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  destroyContact(contact: Contact): void {\n    Contact.destroy(contact, this);\n\n    // Remove from the world.\n    if (contact.m_prev) {\n      contact.m_prev.m_next = contact.m_next;\n    }\n    if (contact.m_next) {\n      contact.m_next.m_prev = contact.m_prev;\n    }\n    if (contact == this.m_contactList) {\n      this.m_contactList = contact.m_next;\n    }\n\n    --this.m_contactCount;\n  }\n\n\n  /**\n   * Called when two fixtures begin to touch.\n   *\n   * Implement contact callbacks to get contact information. You can use these\n   * results for things like sounds and game logic. You can also get contact\n   * results by traversing the contact lists after the time step. However, you\n   * might miss some contacts because continuous physics leads to sub-stepping.\n   * Additionally you may receive multiple callbacks for the same contact in a\n   * single time step. You should strive to make your callbacks efficient because\n   * there may be many callbacks per time step.\n   *\n   * Warning: You cannot create/destroy world entities inside these callbacks.\n   */\n  on(name: 'begin-contact', listener: (contact: Contact) => void): World;\n  /**\n   * Called when two fixtures cease to touch.\n   *\n   * Implement contact callbacks to get contact information. You can use these\n   * results for things like sounds and game logic. You can also get contact\n   * results by traversing the contact lists after the time step. However, you\n   * might miss some contacts because continuous physics leads to sub-stepping.\n   * Additionally you may receive multiple callbacks for the same contact in a\n   * single time step. You should strive to make your callbacks efficient because\n   * there may be many callbacks per time step.\n   *\n   * Warning: You cannot create/destroy world entities inside these callbacks.\n   */\n  on(name: 'end-contact', listener: (contact: Contact) => void): World;\n  /**\n   * This is called after a contact is updated. This allows you to inspect a\n   * contact before it goes to the solver. If you are careful, you can modify the\n   * contact manifold (e.g. disable contact). A copy of the old manifold is\n   * provided so that you can detect changes. Note: this is called only for awake\n   * bodies. Note: this is called even when the number of contact points is zero.\n   * Note: this is not called for sensors. Note: if you set the number of contact\n   * points to zero, you will not get an endContact callback. However, you may get\n   * a beginContact callback the next step.\n   *\n   * Warning: You cannot create/destroy world entities inside these callbacks.\n   */\n  on(name: 'pre-solve', listener: (contact: Contact, oldManifold: Manifold) => void): World;\n  /**\n   * This lets you inspect a contact after the solver is finished. This is useful\n   * for inspecting impulses. Note: the contact manifold does not include time of\n   * impact impulses, which can be arbitrarily large if the sub-step is small.\n   * Hence the impulse is provided explicitly in a separate data structure. Note:\n   * this is only called for contacts that are touching, solid, and awake.\n   *\n   * Warning: You cannot create/destroy world entities inside these callbacks.\n   */\n  on(name: 'post-solve', listener: (contact: Contact, impulse: ContactImpulse) => void): World;\n  /** Listener is called whenever a body is removed. */\n  on(name: 'remove-body', listener: (body: Body) => void): World;\n  /** Listener is called whenever a joint is removed implicitly or explicitly. */\n  on(name: 'remove-joint', listener: (joint: Joint) => void): World;\n  /** Listener is called whenever a fixture is removed implicitly or explicitly. */\n  on(name: 'remove-fixture', listener: (fixture: Fixture) => void): World;\n  /**\n   * Register an event listener.\n   */\n  // tslint:disable-next-line:typedef\n  on(name, listener) {\n    if (typeof name !== 'string' || typeof listener !== 'function') {\n      return this;\n    }\n    if (!this._listeners) {\n      this._listeners = {};\n    }\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    this._listeners[name].push(listener);\n    return this;\n  }\n\n  off(name: 'begin-contact', listener: (contact: Contact) => void): World;\n  off(name: 'end-contact', listener: (contact: Contact) => void): World;\n  off(name: 'pre-solve', listener: (contact: Contact, oldManifold: Manifold) => void): World;\n  off(name: 'post-solve', listener: (contact: Contact, impulse: ContactImpulse) => void): World;\n  off(name: 'remove-body', listener: (body: Body) => void): World;\n  off(name: 'remove-joint', listener: (joint: Joint) => void): World;\n  off(name: 'remove-fixture', listener: (fixture: Fixture) => void): World;\n  /**\n   * Remove an event listener.\n   */\n  // tslint:disable-next-line:typedef\n  off(name, listener) {\n    if (typeof name !== 'string' || typeof listener !== 'function') {\n      return this;\n    }\n    const listeners = this._listeners && this._listeners[name];\n    if (!listeners || !listeners.length) {\n      return this;\n    }\n    const index = listeners.indexOf(listener);\n    if (index >= 0) {\n      listeners.splice(index, 1);\n    }\n    return this;\n  }\n\n  publish(name: string, arg1?: any, arg2?: any, arg3?: any): number {\n    const listeners = this._listeners && this._listeners[name];\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (let l = 0; l < listeners.length; l++) {\n      listeners[l].call(this, arg1, arg2, arg3);\n    }\n    return listeners.length;\n  }\n\n  /**\n   * @internal\n   */\n  beginContact(contact: Contact): void {\n    this.publish('begin-contact', contact);\n  }\n\n  /**\n   * @internal\n   */\n  endContact(contact: Contact): void {\n    this.publish('end-contact', contact);\n  }\n\n  /**\n   * @internal\n   */\n  preSolve(contact: Contact, oldManifold: Manifold): void {\n    this.publish('pre-solve', contact, oldManifold);\n  }\n\n  /**\n   * @internal\n   */\n  postSolve(contact: Contact, impulse: ContactImpulse): void {\n    this.publish('post-solve', contact, impulse);\n  }\n\n  /**\n   * Joints and fixtures are destroyed when their associated body is destroyed.\n   * Register a destruction listener so that you may nullify references to these\n   * joints and shapes.\n   *\n   * `function(object)` is called when any joint or fixture is about to\n   * be destroyed due to the destruction of one of its attached or parent bodies.\n   */\n\n  /**\n   * Register a contact filter to provide specific control over collision.\n   * Otherwise the default filter is used (defaultFilter). The listener is owned\n   * by you and must remain in scope.\n   *\n   * Moved to Fixture.\n   */\n}","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from './Math';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nexport class Vec3 {\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(x: number, y: number, z: number);\n  constructor(obj: { x: number, y: number, z: number });\n  constructor();\n  // tslint:disable-next-line:typedef\n  constructor(x?, y?, z?) {\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof Vec3)) {\n      return new Vec3(x, y, z);\n    }\n    if (typeof x === 'undefined') {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    } else if (typeof x === 'object') {\n      this.x = x.x;\n      this.y = x.y;\n      this.z = x.z;\n    } else {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n    _ASSERT && Vec3.assert(this);\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any): Vec3 {\n    const obj = Object.create(Vec3.prototype);\n    obj.x = data.x;\n    obj.y = data.y;\n    obj.z = data.z;\n    return obj;\n  }\n\n  /** @internal */\n  static neo(x: number, y: number, z: number): Vec3 {\n    const obj = Object.create(Vec3.prototype);\n    obj.x = x;\n    obj.y = y;\n    obj.z = z;\n    return obj;\n  }\n\n  static zero(): Vec3 {\n    const obj = Object.create(Vec3.prototype);\n    obj.x = 0;\n    obj.y = 0;\n    obj.z = 0;\n    return obj;\n  }\n\n  static clone(v: Vec3): Vec3 {\n    _ASSERT && Vec3.assert(v);\n    return Vec3.neo(v.x, v.y, v.z);\n  }\n\n  /** @internal */\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Does this vector contain finite coordinates?\n   */\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Math.isFinite(obj.x) && Math.isFinite(obj.y) && Math.isFinite(obj.z);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Vec3.isValid(o), 'Invalid Vec3!', o);\n  }\n\n  setZero(): Vec3 {\n    this.x = 0.0;\n    this.y = 0.0;\n    this.z = 0.0;\n    return this;\n  }\n\n  set(x: number, y: number, z: number): Vec3 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  add(w: Vec3): Vec3 {\n    this.x += w.x;\n    this.y += w.y;\n    this.z += w.z;\n    return this;\n  }\n\n  sub(w: Vec3): Vec3 {\n    this.x -= w.x;\n    this.y -= w.y;\n    this.z -= w.z;\n    return this;\n  }\n\n  mul(m: number): Vec3 {\n    this.x *= m;\n    this.y *= m;\n    this.z *= m;\n    return this;\n  }\n\n  static areEqual(v: Vec3, w: Vec3): boolean {\n    _ASSERT && Vec3.assert(v);\n    _ASSERT && Vec3.assert(w);\n    return v === w ||\n      typeof v === 'object' && v !== null &&\n      typeof w === 'object' && w !== null &&\n      v.x === w.x && v.y === w.y && v.z === w.z;\n  }\n\n  /**\n   * Perform the dot product on two vectors.\n   */\n  static dot(v: Vec3, w: Vec3): number {\n    return v.x * w.x + v.y * w.y + v.z * w.z;\n  }\n\n  /**\n   * Perform the cross product on two vectors. In 2D this produces a scalar.\n   */\n  static cross(v: Vec3, w: Vec3): Vec3 {\n    return new Vec3(\n      v.y * w.z - v.z * w.y,\n      v.z * w.x - v.x * w.z,\n      v.x * w.y - v.y * w.x\n    );\n  }\n\n  static add(v: Vec3, w: Vec3): Vec3 {\n    return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n  }\n\n  static sub(v: Vec3, w: Vec3): Vec3 {\n    return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n  }\n\n  static mul(v: Vec3, m: number): Vec3 {\n    return new Vec3(m * v.x, m * v.y, m * v.z);\n  }\n\n  neg(): Vec3 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  static neg(v: Vec3): Vec3 {\n    return new Vec3(-v.x, -v.y, -v.z);\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Settings } from '../../Settings';\nimport { Shape } from '../Shape';\nimport { Transform } from '../../common/Transform';\nimport { Rot } from '../../common/Rot';\nimport { Vec2, Vec2Value } from '../../common/Vec2';\nimport { AABB, RayCastInput, RayCastOutput } from '../AABB';\nimport { MassData } from '../../dynamics/Body';\nimport { DistanceProxy } from '../Distance';\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nexport class EdgeShape extends Shape {\n  static TYPE = 'edge' as const;\n  m_type: 'edge';\n\n  m_radius: number;\n\n  // These are the edge vertices\n  m_vertex1: Vec2;\n  m_vertex2: Vec2;\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  m_vertex0: Vec2;\n  m_vertex3: Vec2;\n  m_hasVertex0: boolean;\n  m_hasVertex3: boolean;\n\n  constructor(v1?: Vec2Value, v2?: Vec2Value) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof EdgeShape)) {\n      return new EdgeShape(v1, v2);\n    }\n\n    super();\n\n    this.m_type = EdgeShape.TYPE;\n    this.m_radius = Settings.polygonRadius;\n\n    this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n    this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n    this.m_vertex0 = Vec2.zero();\n    this.m_vertex3 = Vec2.zero();\n    this.m_hasVertex0 = false;\n    this.m_hasVertex3 = false;\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n\n      vertex1: this.m_vertex1,\n      vertex2: this.m_vertex2,\n\n      vertex0: this.m_vertex0,\n      vertex3: this.m_vertex3,\n      hasVertex0: this.m_hasVertex0,\n      hasVertex3: this.m_hasVertex3,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any): EdgeShape {\n    const shape = new EdgeShape(data.vertex1, data.vertex2);\n    if (shape.m_hasVertex0) {\n      shape.setPrevVertex(data.vertex0);\n    }\n    if (shape.m_hasVertex3) {\n      shape.setNextVertex(data.vertex3);\n    }\n    return shape;\n  }\n\n  /** @internal */\n  _reset(): void {\n    // noop\n  }\n\n  getRadius(): number {\n    return this.m_radius;\n  }\n\n  getType(): 'edge' {\n    return this.m_type;\n  }\n\n  /** @internal @deprecated */\n  setNext(v?: Vec2): EdgeShape {\n    return this.setNextVertex(v);\n  }\n\n  /**\n   * Optional next vertex, used for smooth collision.\n   */\n  setNextVertex(v?: Vec2): EdgeShape {\n    if (v) {\n      this.m_vertex3.setVec2(v);\n      this.m_hasVertex3 = true;\n    } else {\n      this.m_vertex3.setZero();\n      this.m_hasVertex3 = false;\n    }\n    return this;\n  }\n\n  /**\n   * Optional next vertex, used for smooth collision.\n   */\n  getNextVertex(): Vec2 {\n    return this.m_vertex3;\n  }\n\n  /** @internal @deprecated */\n  setPrev(v?: Vec2): EdgeShape {\n    return this.setPrevVertex(v);\n  }\n\n  /**\n   * Optional prev vertex, used for smooth collision.\n   */\n  setPrevVertex(v?: Vec2): EdgeShape {\n    if (v) {\n      this.m_vertex0.setVec2(v);\n      this.m_hasVertex0 = true;\n    } else {\n      this.m_vertex0.setZero();\n      this.m_hasVertex0 = false;\n    }\n    return this;\n  }\n\n  /**\n   * Optional prev vertex, used for smooth collision.\n   */\n  getPrevVertex(): Vec2 {\n    return this.m_vertex0;\n  }\n\n  /**\n   * Set this as an isolated edge.\n   */\n  _set(v1: Vec2, v2: Vec2): EdgeShape {\n    this.m_vertex1.setVec2(v1);\n    this.m_vertex2.setVec2(v2);\n    this.m_hasVertex0 = false;\n    this.m_hasVertex3 = false;\n    return this;\n  }\n\n  /**\n   * @internal\n   * @deprecated Shapes should be treated as immutable.\n   *\n   * clone the concrete shape.\n   */\n  _clone(): EdgeShape {\n    const clone = new EdgeShape();\n    clone.m_type = this.m_type;\n    clone.m_radius = this.m_radius;\n    clone.m_vertex1.setVec2(this.m_vertex1);\n    clone.m_vertex2.setVec2(this.m_vertex2);\n    clone.m_vertex0.setVec2(this.m_vertex0);\n    clone.m_vertex3.setVec2(this.m_vertex3);\n    clone.m_hasVertex0 = this.m_hasVertex0;\n    clone.m_hasVertex3 = this.m_hasVertex3;\n    return clone;\n  }\n\n  /**\n   * Get the number of child primitives.\n   */\n  getChildCount(): 1 {\n    return 1;\n  }\n\n  /**\n   * Test a point for containment in this shape. This only works for convex\n   * shapes.\n   *\n   * @param xf The shape world transform.\n   * @param p A point in world coordinates.\n   */\n  testPoint(xf: Transform, p: Vec2Value): false {\n    return false;\n  }\n\n  /**\n   * Cast a ray against a child shape.\n   *\n   * @param output The ray-cast results.\n   * @param input The ray-cast input parameters.\n   * @param xf The transform to be applied to the shape.\n   * @param childIndex The child shape index\n   */\n  rayCast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: number): boolean {\n    // p = p1 + t * d\n    // v = v1 + s * e\n    // p1 + t * d = v1 + s * e\n    // s * e - t * d = p1 - v1\n\n    // NOT_USED(childIndex);\n\n    // Put the ray into the edge's frame of reference.\n    const p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n    const p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n    const d = Vec2.sub(p2, p1);\n\n    const v1 = this.m_vertex1;\n    const v2 = this.m_vertex2;\n    const e = Vec2.sub(v2, v1);\n    const normal = Vec2.neo(e.y, -e.x);\n    normal.normalize();\n\n    // q = p1 + t * d\n    // dot(normal, q - v1) = 0\n    // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n    const numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n    const denominator = Vec2.dot(normal, d);\n\n    if (denominator == 0.0) {\n      return false;\n    }\n\n    const t = numerator / denominator;\n    if (t < 0.0 || input.maxFraction < t) {\n      return false;\n    }\n\n    const q = Vec2.add(p1, Vec2.mulNumVec2(t, d));\n\n    // q = v1 + s * r\n    // s = dot(q - v1, r) / dot(r, r)\n    const r = Vec2.sub(v2, v1);\n    const rr = Vec2.dot(r, r);\n    if (rr == 0.0) {\n      return false;\n    }\n\n    const s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n    if (s < 0.0 || 1.0 < s) {\n      return false;\n    }\n\n    output.fraction = t;\n    if (numerator > 0.0) {\n      output.normal = Rot.mulVec2(xf.q, normal).neg();\n    } else {\n      output.normal = Rot.mulVec2(xf.q, normal);\n    }\n    return true;\n  }\n\n  /**\n   * Given a transform, compute the associated axis aligned bounding box for a\n   * child shape.\n   *\n   * @param aabb Returns the axis aligned box.\n   * @param xf The world transform of the shape.\n   * @param childIndex The child shape\n   */\n  computeAABB(aabb: AABB, xf: Transform, childIndex: number): void {\n    const v1 = Transform.mulVec2(xf, this.m_vertex1);\n    const v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n    aabb.combinePoints(v1, v2);\n    aabb.extend(this.m_radius);\n  }\n\n  /**\n   * Compute the mass properties of this shape using its dimensions and density.\n   * The inertia tensor is computed about the local origin.\n   *\n   * @param massData Returns the mass data for this shape.\n   * @param density The density in kilograms per meter squared.\n   */\n  computeMass(massData: MassData, density?: number): void {\n    massData.mass = 0.0;\n    massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n    massData.I = 0.0;\n  }\n\n  computeDistanceProxy(proxy: DistanceProxy): void {\n    proxy.m_vertices.push(this.m_vertex1);\n    proxy.m_vertices.push(this.m_vertex2);\n    proxy.m_count = 2;\n    proxy.m_radius = this.m_radius;\n  }\n}\n\nexport const Edge = EdgeShape;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { MassData } from '../../dynamics/Body';\nimport { AABB, RayCastOutput, RayCastInput } from '../AABB';\nimport { DistanceProxy } from '../Distance';\nimport { Transform } from '../../common/Transform';\nimport { Vec2, Vec2Value } from '../../common/Vec2';\nimport { Settings } from '../../Settings';\nimport { Shape } from '../Shape';\nimport { EdgeShape } from './EdgeShape';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n *\n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nexport class ChainShape extends Shape {\n  static TYPE = 'chain' as const;\n  m_type: 'chain';\n\n  m_radius: number;\n\n  m_vertices: Vec2[];\n  m_count: number;\n  m_prevVertex: Vec2 | null;\n  m_nextVertex: Vec2 | null;\n  m_hasPrevVertex: boolean;\n  m_hasNextVertex: boolean;\n\n  m_isLoop: boolean;\n\n  constructor(vertices?: Vec2Value[], loop?: boolean) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof ChainShape)) {\n      return new ChainShape(vertices, loop);\n    }\n\n    super();\n\n    this.m_type = ChainShape.TYPE;\n    this.m_radius = Settings.polygonRadius;\n    this.m_vertices = [];\n    this.m_count = 0;\n    this.m_prevVertex = null;\n    this.m_nextVertex = null;\n    this.m_hasPrevVertex = false;\n    this.m_hasNextVertex = false;\n\n    this.m_isLoop = !!loop;\n\n    if (vertices && vertices.length) {\n      if (loop) {\n        this._createLoop(vertices);\n      } else {\n        this._createChain(vertices);\n      }\n    }\n  }\n\n  /** @internal */\n  _serialize(): object {\n    const data = {\n      type: this.m_type,\n      vertices: this.m_vertices,\n      isLoop: this.m_isLoop,\n      hasPrevVertex: this.m_hasPrevVertex,\n      hasNextVertex: this.m_hasNextVertex,\n      prevVertex: null as Vec2 | null,\n      nextVertex: null as Vec2 | null,\n    };\n    if (this.m_prevVertex) {\n      data.prevVertex = this.m_prevVertex;\n    }\n    if (this.m_nextVertex) {\n      data.nextVertex = this.m_nextVertex;\n    }\n    return data;\n  }\n\n  /** @internal */\n  static _deserialize(data: any, fixture: any, restore: any): ChainShape {\n    const vertices: Vec2[] = [];\n    if (data.vertices) {\n      for (let i = 0; i < data.vertices.length; i++) {\n        vertices.push(restore(Vec2, data.vertices[i]));\n      }\n    }\n    const shape = new ChainShape(vertices, data.isLoop);\n    if (data.prevVertex) {\n      shape.setPrevVertex(data.prevVertex);\n    }\n    if (data.nextVertex) {\n      shape.setNextVertex(data.nextVertex);\n    }\n    return shape;\n  }\n\n  // clear() {\n  //   this.m_vertices.length = 0;\n  //   this.m_count = 0;\n  // }\n\n  getType(): 'chain' {\n    return this.m_type;\n  }\n\n  getRadius(): number {\n    return this.m_radius;\n  }\n\n  /**\n   * @internal\n   * Create a loop. This automatically adjusts connectivity.\n   *\n   * @param vertices an array of vertices, these are copied\n   * @param count the vertex count\n   */\n  _createLoop(vertices: Vec2Value[]): ChainShape {\n    _ASSERT && console.assert(this.m_vertices.length == 0 && this.m_count == 0);\n    _ASSERT && console.assert(vertices.length >= 3);\n    for (let i = 1; i < vertices.length; ++i) {\n      const v1 = vertices[i - 1];\n      const v2 = vertices[i];\n      // If the code crashes here, it means your vertices are too close together.\n      _ASSERT && console.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n    }\n\n    this.m_vertices = [];\n    this.m_count = vertices.length + 1;\n    for (let i = 0; i < vertices.length; ++i) {\n      this.m_vertices[i] = Vec2.clone(vertices[i]);\n    }\n    this.m_vertices[vertices.length] = Vec2.clone(vertices[0]);\n\n    this.m_prevVertex = this.m_vertices[this.m_count - 2];\n    this.m_nextVertex = this.m_vertices[1];\n    this.m_hasPrevVertex = true;\n    this.m_hasNextVertex = true;\n    return this;\n  }\n\n  /**\n   * @internal\n   * Create a chain with isolated end vertices.\n   *\n   * @param vertices an array of vertices, these are copied\n   * @param count the vertex count\n   */\n  _createChain(vertices: Vec2Value[]): ChainShape {\n    _ASSERT && console.assert(this.m_vertices.length == 0 && this.m_count == 0);\n    _ASSERT && console.assert(vertices.length >= 2);\n    for (let i = 1; i < vertices.length; ++i) {\n      // If the code crashes here, it means your vertices are too close together.\n      const v1 = vertices[i - 1];\n      const v2 = vertices[i];\n      _ASSERT && console.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n    }\n\n    this.m_count = vertices.length;\n    for (let i = 0; i < vertices.length; ++i) {\n      this.m_vertices[i] = Vec2.clone(vertices[i]);\n    }\n\n    this.m_hasPrevVertex = false;\n    this.m_hasNextVertex = false;\n    this.m_prevVertex = null;\n    this.m_nextVertex = null;\n    return this;\n  }\n\n  /** @internal */\n  _reset(): void {\n    if (this.m_isLoop) {\n      this._createLoop(this.m_vertices);\n    } else {\n      this._createChain(this.m_vertices);\n    }\n  }\n\n  /**\n   * Establish connectivity to a vertex that precedes the first vertex. Don't call\n   * this for loops.\n   */\n  setPrevVertex(prevVertex: Vec2): void {\n    this.m_prevVertex = prevVertex;\n    this.m_hasPrevVertex = true;\n  }\n\n  getPrevVertex(): Vec2 {\n    return this.m_prevVertex;\n  }\n\n  /**\n   * Establish connectivity to a vertex that follows the last vertex. Don't call\n   * this for loops.\n   */\n  setNextVertex(nextVertex: Vec2): void {\n    this.m_nextVertex = nextVertex;\n    this.m_hasNextVertex = true;\n  }\n\n  getNextVertex(): Vec2 {\n    return this.m_nextVertex;\n  }\n\n  /**\n   * @internal\n   * @deprecated Shapes should be treated as immutable.\n   *\n   * clone the concrete shape.\n   */\n  _clone(): ChainShape {\n    const clone = new ChainShape();\n    clone._createChain(this.m_vertices);\n    clone.m_type = this.m_type;\n    clone.m_radius = this.m_radius;\n    clone.m_prevVertex = this.m_prevVertex;\n    clone.m_nextVertex = this.m_nextVertex;\n    clone.m_hasPrevVertex = this.m_hasPrevVertex;\n    clone.m_hasNextVertex = this.m_hasNextVertex;\n    return clone;\n  }\n\n  /**\n   * Get the number of child primitives.\n   */\n  getChildCount(): number {\n    // edge count = vertex count - 1\n    return this.m_count - 1;\n  }\n\n  // Get a child edge.\n  getChildEdge(edge: EdgeShape, childIndex: number): void {\n    _ASSERT && console.assert(0 <= childIndex && childIndex < this.m_count - 1);\n    edge.m_type = EdgeShape.TYPE;\n    edge.m_radius = this.m_radius;\n\n    edge.m_vertex1 = this.m_vertices[childIndex];\n    edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n    if (childIndex > 0) {\n      edge.m_vertex0 = this.m_vertices[childIndex - 1];\n      edge.m_hasVertex0 = true;\n    } else {\n      edge.m_vertex0 = this.m_prevVertex;\n      edge.m_hasVertex0 = this.m_hasPrevVertex;\n    }\n\n    if (childIndex < this.m_count - 2) {\n      edge.m_vertex3 = this.m_vertices[childIndex + 2];\n      edge.m_hasVertex3 = true;\n    } else {\n      edge.m_vertex3 = this.m_nextVertex;\n      edge.m_hasVertex3 = this.m_hasNextVertex;\n    }\n  }\n\n  getVertex(index: number): Vec2 {\n    _ASSERT && console.assert(0 <= index && index <= this.m_count);\n    if (index < this.m_count) {\n      return this.m_vertices[index];\n    } else {\n      return this.m_vertices[0];\n    }\n  }\n\n  isLoop(): boolean {\n    return this.m_isLoop;\n  }\n\n  /**\n   * Test a point for containment in this shape. This only works for convex\n   * shapes.\n   *\n   * This always return false.\n   *\n   * @param xf The shape world transform.\n   * @param p A point in world coordinates.\n   */\n  testPoint(xf: Transform, p: Vec2Value): false {\n    return false;\n  }\n\n  /**\n   * Cast a ray against a child shape.\n   *\n   * @param output The ray-cast results.\n   * @param input The ray-cast input parameters.\n   * @param xf The transform to be applied to the shape.\n   * @param childIndex The child shape index\n   */\n  rayCast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: number): boolean {\n    _ASSERT && console.assert(0 <= childIndex && childIndex < this.m_count);\n\n    const edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n    return edgeShape.rayCast(output, input, xf, 0);\n  }\n\n  /**\n   * Given a transform, compute the associated axis aligned bounding box for a\n   * child shape.\n   *\n   * @param aabb Returns the axis aligned box.\n   * @param xf The world transform of the shape.\n   * @param childIndex The child shape\n   */\n  computeAABB(aabb: AABB, xf: Transform, childIndex: number): void {\n    _ASSERT && console.assert(0 <= childIndex && childIndex < this.m_count);\n\n    const v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n    const v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n    aabb.combinePoints(v1, v2);\n  }\n\n  /**\n   * Compute the mass properties of this shape using its dimensions and density.\n   * The inertia tensor is computed about the local origin.\n   *\n   * Chains have zero mass.\n   *\n   * @param massData Returns the mass data for this shape.\n   * @param density The density in kilograms per meter squared.\n   */\n  computeMass(massData: MassData, density?: number): void {\n    massData.mass = 0.0;\n    massData.center = Vec2.zero();\n    massData.I = 0.0;\n  }\n\n  computeDistanceProxy(proxy: DistanceProxy, childIndex: number): void {\n    _ASSERT && console.assert(0 <= childIndex && childIndex < this.m_count);\n    proxy.m_buffer[0] = this.getVertex(childIndex);\n    proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n    proxy.m_vertices = proxy.m_buffer;\n    proxy.m_count = 2;\n    proxy.m_radius = this.m_radius;\n  }\n}\n\nexport const Chain = ChainShape;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { MassData } from '../../dynamics/Body';\nimport { AABB, RayCastOutput, RayCastInput } from '../AABB';\nimport { DistanceProxy } from '../Distance';\nimport { math as Math } from '../../common/Math';\nimport { Transform } from '../../common/Transform';\nimport { Rot } from '../../common/Rot';\nimport { Vec2, Vec2Value } from '../../common/Vec2';\nimport { Settings } from '../../Settings';\nimport { Shape } from '../Shape';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nexport class PolygonShape extends Shape {\n  static TYPE = 'polygon' as const;\n  m_type: 'polygon';\n\n  m_centroid: Vec2;\n  m_vertices: Vec2[]; // [Settings.maxPolygonVertices]\n  m_normals: Vec2[]; // [Settings.maxPolygonVertices]\n  m_count: number;\n  m_radius: number;\n\n  // @ts-ignore\n  constructor(vertices?: Vec2Value[]) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof PolygonShape)) {\n      return new PolygonShape(vertices);\n    }\n\n    super();\n\n    this.m_type = PolygonShape.TYPE;\n    this.m_radius = Settings.polygonRadius;\n    this.m_centroid = Vec2.zero();\n    this.m_vertices = [];\n    this.m_normals = [];\n    this.m_count = 0;\n\n    if (vertices && vertices.length) {\n      this._set(vertices);\n    }\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n\n      vertices: this.m_vertices,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, fixture: any, restore: any): PolygonShape {\n    const vertices: Vec2[] = [];\n    if (data.vertices) {\n      for (let i = 0; i < data.vertices.length; i++) {\n        vertices.push(restore(Vec2, data.vertices[i]));\n      }\n    }\n\n    const shape = new PolygonShape(vertices);\n    return shape;\n  }\n\n  getType(): 'polygon' {\n    return this.m_type;\n  }\n\n  getRadius(): number {\n    return this.m_radius;\n  }\n\n  getVertex(index: number): Vec2 {\n    _ASSERT && console.assert(0 <= index && index < this.m_count);\n    return this.m_vertices[index];\n  }\n\n  /**\n   * @internal\n   * @deprecated Shapes should be treated as immutable.\n   *\n   * clone the concrete shape.\n   */\n  _clone(): PolygonShape {\n    const clone = new PolygonShape();\n    clone.m_type = this.m_type;\n    clone.m_radius = this.m_radius;\n    clone.m_count = this.m_count;\n    clone.m_centroid.setVec2(this.m_centroid);\n    for (let i = 0; i < this.m_count; i++) {\n      clone.m_vertices.push(this.m_vertices[i].clone());\n    }\n    for (let i = 0; i < this.m_normals.length; i++) {\n      clone.m_normals.push(this.m_normals[i].clone());\n    }\n    return clone;\n  }\n\n  /**\n   * Get the number of child primitives.\n   */\n  getChildCount(): 1 {\n    return 1;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this._set(this.m_vertices);\n  }\n\n  /**\n   * @internal\n   *\n   * Create a convex hull from the given array of local points. The count must be\n   * in the range [3, Settings.maxPolygonVertices].\n   *\n   * Warning: the points may be re-ordered, even if they form a convex polygon\n   * Warning: collinear points are handled but not removed. Collinear points may\n   * lead to poor stacking behavior.\n   */\n  _set(vertices: Vec2Value[]): void {\n    _ASSERT && console.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n    if (vertices.length < 3) {\n      this._setAsBox(1.0, 1.0);\n      return;\n    }\n\n    let n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n    // Perform welding and copy vertices into local buffer.\n    const ps: Vec2[] = []; // [Settings.maxPolygonVertices];\n    for (let i = 0; i < n; ++i) {\n      const v = vertices[i];\n\n      let unique = true;\n      for (let j = 0; j < ps.length; ++j) {\n        if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n          unique = false;\n          break;\n        }\n      }\n\n      if (unique) {\n        ps.push(Vec2.clone(v));\n      }\n    }\n\n    n = ps.length;\n    if (n < 3) {\n      // Polygon is degenerate.\n      _ASSERT && console.assert(false);\n      this._setAsBox(1.0, 1.0);\n      return;\n    }\n\n    // Create the convex hull using the Gift wrapping algorithm\n    // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n    // Find the right most point on the hull (in case of multiple points bottom most is used)\n    let i0 = 0;\n    let x0 = ps[0].x;\n    for (let i = 1; i < n; ++i) {\n      const x = ps[i].x;\n      if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\n        i0 = i;\n        x0 = x;\n      }\n    }\n\n    const hull = [] as number[]; // [Settings.maxPolygonVertices];\n    let m = 0;\n    let ih = i0;\n\n    while (true) {\n      hull[m] = ih;\n\n      let ie = 0;\n      for (let j = 1; j < n; ++j) {\n        if (ie === ih) {\n          ie = j;\n          continue;\n        }\n\n        const r = Vec2.sub(ps[ie], ps[hull[m]]);\n        const v = Vec2.sub(ps[j], ps[hull[m]]);\n        const c = Vec2.crossVec2Vec2(r, v);\n        // c < 0 means counter-clockwise wrapping, c > 0 means clockwise wrapping\n        if (c < 0.0) {\n          ie = j;\n        }\n\n        // Collinearity check\n        if (c === 0.0 && v.lengthSquared() > r.lengthSquared()) {\n          ie = j;\n        }\n      }\n\n      ++m;\n      ih = ie;\n\n      if (ie === i0) {\n        break;\n      }\n    }\n\n    if (m < 3) {\n      // Polygon is degenerate.\n      _ASSERT && console.assert(false);\n      this._setAsBox(1.0, 1.0);\n      return;\n    }\n\n    this.m_count = m;\n\n    // Copy vertices.\n    this.m_vertices = [];\n    for (let i = 0; i < m; ++i) {\n      this.m_vertices[i] = ps[hull[i]];\n    }\n\n    // Compute normals. Ensure the edges have non-zero length.\n    for (let i = 0; i < m; ++i) {\n      const i1 = i;\n      const i2 = i + 1 < m ? i + 1 : 0;\n      const edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n      _ASSERT && console.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n      this.m_normals[i] = Vec2.crossVec2Num(edge, 1.0);\n      this.m_normals[i].normalize();\n    }\n\n    // Compute the polygon centroid.\n    this.m_centroid = ComputeCentroid(this.m_vertices, m);\n  }\n\n  /** @internal */\n  _setAsBox(hx: number, hy: number, center?: Vec2Value, angle?: number): void {\n    // start with right-bottom, counter-clockwise, as in Gift wrapping algorithm in PolygonShape._set()\n    this.m_vertices[0] = Vec2.neo(hx, -hy);\n    this.m_vertices[1] = Vec2.neo(hx, hy);\n    this.m_vertices[2] = Vec2.neo(-hx, hy);\n    this.m_vertices[3] = Vec2.neo(-hx, -hy);\n\n    this.m_normals[0] = Vec2.neo(1.0, 0.0);\n    this.m_normals[1] = Vec2.neo(0.0, 1.0);\n    this.m_normals[2] = Vec2.neo(-1.0, 0.0);\n    this.m_normals[3] = Vec2.neo(0.0, -1.0);\n\n    this.m_count = 4;\n\n    if (Vec2.isValid(center)) {\n      angle = angle || 0;\n\n      this.m_centroid.setVec2(center);\n\n      const xf = Transform.identity();\n      xf.p.setVec2(center);\n      xf.q.setAngle(angle);\n\n      // Transform vertices and normals.\n      for (let i = 0; i < this.m_count; ++i) {\n        this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n        this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n      }\n    }\n  }\n\n  /**\n   * Test a point for containment in this shape. This only works for convex\n   * shapes.\n   *\n   * @param xf The shape world transform.\n   * @param p A point in world coordinates.\n   */\n  testPoint(xf: Transform, p: Vec2): boolean {\n    const pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n      if (dot > 0.0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Cast a ray against a child shape.\n   *\n   * @param output The ray-cast results.\n   * @param input The ray-cast input parameters.\n   * @param xf The transform to be applied to the shape.\n   * @param childIndex The child shape index\n   */\n  rayCast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: number): boolean {\n\n    // Put the ray into the polygon's frame of reference.\n    const p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n    const p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n    const d = Vec2.sub(p2, p1);\n\n    let lower = 0.0;\n    let upper = input.maxFraction;\n\n    let index = -1;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      // p = p1 + a * d\n      // dot(normal, p - v) = 0\n      // dot(normal, p1 - v) + a * dot(normal, d) = 0\n      const numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n      const denominator = Vec2.dot(this.m_normals[i], d);\n\n      if (denominator == 0.0) {\n        if (numerator < 0.0) {\n          return false;\n        }\n      } else {\n        // Note: we want this predicate without division:\n        // lower < numerator / denominator, where denominator < 0\n        // Since denominator < 0, we have to flip the inequality:\n        // lower < numerator / denominator <==> denominator * lower > numerator.\n        if (denominator < 0.0 && numerator < lower * denominator) {\n          // Increase lower.\n          // The segment enters this half-space.\n          lower = numerator / denominator;\n          index = i;\n        } else if (denominator > 0.0 && numerator < upper * denominator) {\n          // Decrease upper.\n          // The segment exits this half-space.\n          upper = numerator / denominator;\n        }\n      }\n\n      // The use of epsilon here causes the assert on lower to trip\n      // in some cases. Apparently the use of epsilon was to make edge\n      // shapes work, but now those are handled separately.\n      // if (upper < lower - Math.EPSILON)\n      if (upper < lower) {\n        return false;\n      }\n    }\n\n    _ASSERT && console.assert(0.0 <= lower && lower <= input.maxFraction);\n\n    if (index >= 0) {\n      output.fraction = lower;\n      output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Given a transform, compute the associated axis aligned bounding box for a\n   * child shape.\n   *\n   * @param aabb Returns the axis aligned box.\n   * @param xf The world transform of the shape.\n   * @param childIndex The child shape\n   */\n  computeAABB(aabb: AABB, xf: Transform, childIndex: number): void {\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = 0; i < this.m_count; ++i) {\n      const v = Transform.mulVec2(xf, this.m_vertices[i]);\n      minX = Math.min(minX, v.x);\n      maxX = Math.max(maxX, v.x);\n      minY = Math.min(minY, v.y);\n      maxY = Math.max(maxY, v.y);\n    }\n\n    aabb.lowerBound.setNum(minX, minY);\n    aabb.upperBound.setNum(maxX, maxY);\n    aabb.extend(this.m_radius);\n  }\n\n  /**\n   * Compute the mass properties of this shape using its dimensions and density.\n   * The inertia tensor is computed about the local origin.\n   *\n   * @param massData Returns the mass data for this shape.\n   * @param density The density in kilograms per meter squared.\n   */\n  computeMass(massData: MassData, density: number): void {\n    // Polygon mass, centroid, and inertia.\n    // Let rho be the polygon density in mass per unit area.\n    // Then:\n    // mass = rho * int(dA)\n    // centroid.x = (1/mass) * rho * int(x * dA)\n    // centroid.y = (1/mass) * rho * int(y * dA)\n    // I = rho * int((x*x + y*y) * dA)\n    //\n    // We can compute these integrals by summing all the integrals\n    // for each triangle of the polygon. To evaluate the integral\n    // for a single triangle, we make a change of variables to\n    // the (u,v) coordinates of the triangle:\n    // x = x0 + e1x * u + e2x * v\n    // y = y0 + e1y * u + e2y * v\n    // where 0 <= u && 0 <= v && u + v <= 1.\n    //\n    // We integrate u from [0,1-v] and then v from [0,1].\n    // We also need to use the Jacobian of the transformation:\n    // D = cross(e1, e2)\n    //\n    // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n    //\n    // The rest of the derivation is handled by computer algebra.\n\n    _ASSERT && console.assert(this.m_count >= 3);\n\n    const center = Vec2.zero();\n    let area = 0.0;\n    let I = 0.0;\n\n    // s is the reference point for forming triangles.\n    // It's location doesn't change the result (except for rounding error).\n    const s = Vec2.zero();\n\n    // This code would put the reference point inside the polygon.\n    for (let i = 0; i < this.m_count; ++i) {\n      s.add(this.m_vertices[i]);\n    }\n    s.mul(1.0 / this.m_count);\n\n    const k_inv3 = 1.0 / 3.0;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      // Triangle vertices.\n      const e1 = Vec2.sub(this.m_vertices[i], s);\n      const e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2 .sub(this.m_vertices[0], s);\n\n      const D = Vec2.crossVec2Vec2(e1, e2);\n\n      const triangleArea = 0.5 * D;\n      area += triangleArea;\n\n      // Area weighted centroid\n      center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n      const ex1 = e1.x;\n      const ey1 = e1.y;\n      const ex2 = e2.x;\n      const ey2 = e2.y;\n\n      const intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n      const inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n      I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n    }\n\n    // Total mass\n    massData.mass = density * area;\n\n    // Center of mass\n    _ASSERT && console.assert(area > Math.EPSILON);\n    center.mul(1.0 / area);\n    massData.center.setCombine(1, center, 1, s);\n\n    // Inertia tensor relative to the local origin (point s).\n    massData.I = density * I;\n\n    // Shift to center of mass then to original body origin.\n    massData.I += massData.mass * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n  }\n\n  /**\n   * Validate convexity. This is a very time consuming operation.\n   * @returns true if valid\n   */\n  validate(): boolean {\n    for (let i = 0; i < this.m_count; ++i) {\n      const i1 = i;\n      const i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n      const p = this.m_vertices[i1];\n      const e = Vec2.sub(this.m_vertices[i2], p);\n\n      for (let j = 0; j < this.m_count; ++j) {\n        if (j == i1 || j == i2) {\n          continue;\n        }\n\n        const v = Vec2.sub(this.m_vertices[j], p);\n        const c = Vec2.crossVec2Vec2(e, v);\n        if (c < 0.0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  computeDistanceProxy(proxy: DistanceProxy): void {\n    proxy.m_vertices = this.m_vertices;\n    proxy.m_count = this.m_count;\n    proxy.m_radius = this.m_radius;\n  }\n}\n\nfunction ComputeCentroid(vs: Vec2[], count: number): Vec2 {\n  _ASSERT && console.assert(count >= 3);\n\n  const c = Vec2.zero();\n  let area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  const pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (let i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  const inv3 = 1.0 / 3.0;\n\n  for (let i = 0; i < count; ++i) {\n    // Triangle vertices.\n    const p1 = pRef;\n    const p2 = vs[i];\n    const p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    const e1 = Vec2.sub(p2, p1);\n    const e2 = Vec2.sub(p3, p1);\n\n    const D = Vec2.crossVec2Vec2(e1, e2);\n\n    const triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && console.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\nexport const Polygon = PolygonShape;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { Vec2Value } from '../../common/Vec2';\nimport { PolygonShape } from './PolygonShape';\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nexport class BoxShape extends PolygonShape {\n  static TYPE = 'polygon' as const;\n\n  constructor(hx: number, hy: number, center?: Vec2Value, angle?: number) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof BoxShape)) {\n      return new BoxShape(hx, hy, center, angle);\n    }\n\n    super();\n\n    this._setAsBox(hx, hy, center, angle);\n  }\n}\n\nexport const Box = BoxShape;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from '../../common/Math';\nimport { Rot } from '../../common/Rot';\nimport { Vec2, Vec2Value } from '../../common/Vec2';\nimport { Shape } from '../Shape';\nimport { AABB, RayCastInput, RayCastOutput } from '../AABB';\nimport { Transform } from '../../common/Transform';\nimport { MassData } from '../../dynamics/Body';\nimport { DistanceProxy } from '../Distance';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nexport class CircleShape extends Shape {\n  static TYPE = 'circle' as const;\n  m_type: 'circle';\n\n  m_p: Vec2;\n  m_radius: number;\n\n  constructor(position: Vec2Value, radius?: number);\n  constructor(radius?: number);\n  // tslint:disable-next-line:typedef\n  constructor(a, b?) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof CircleShape)) {\n      return new CircleShape(a, b);\n    }\n\n    super();\n\n    this.m_type = CircleShape.TYPE;\n    this.m_p = Vec2.zero();\n    this.m_radius = 1;\n\n    if (typeof a === 'object' && Vec2.isValid(a)) {\n      this.m_p.setVec2(a);\n\n      if (typeof b === 'number') {\n        this.m_radius = b;\n      }\n\n    } else if (typeof a === 'number') {\n      this.m_radius = a;\n    }\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n\n      p: this.m_p,\n      radius: this.m_radius,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any): CircleShape {\n    return new CircleShape(data.p, data.radius);\n  }\n\n  /** @internal */\n  _reset(): void {\n    // noop\n  }\n\n  getType(): 'circle' {\n    return this.m_type;\n  }\n\n  getRadius(): number {\n    return this.m_radius;\n  }\n\n  getCenter(): Vec2 {\n    return this.m_p;\n  }\n\n  getVertex(index: 0): Vec2 {\n    _ASSERT && console.assert(index == 0);\n    return this.m_p;\n  }\n\n  /**\n   * @internal\n   * @deprecated Shapes should be treated as immutable.\n   *\n   * clone the concrete shape.\n   */\n  _clone(): CircleShape {\n    const clone = new CircleShape();\n    clone.m_type = this.m_type;\n    clone.m_radius = this.m_radius;\n    clone.m_p = this.m_p.clone();\n    return clone;\n  }\n\n  /**\n   * Get the number of child primitives.\n   */\n  getChildCount(): 1 {\n    return 1;\n  }\n\n  /**\n   * Test a point for containment in this shape. This only works for convex\n   * shapes.\n   *\n   * @param xf The shape world transform.\n   * @param p A point in world coordinates.\n   */\n  testPoint(xf: Transform, p: Vec2Value): boolean {\n    const center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n    const d = Vec2.sub(p, center);\n    return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n  }\n\n  /**\n   * Cast a ray against a child shape.\n   *\n   * @param output The ray-cast results.\n   * @param input The ray-cast input parameters.\n   * @param xf The transform to be applied to the shape.\n   * @param childIndex The child shape index\n   */\n  rayCast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: number): boolean {\n    // Collision Detection in Interactive 3D Environments by Gino van den Bergen\n    // From Section 3.1.2\n    // x = s + a * r\n    // norm(x) = radius\n\n    const position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n    const s = Vec2.sub(input.p1, position);\n    const b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n    // Solve quadratic equation.\n    const r = Vec2.sub(input.p2, input.p1);\n    const c = Vec2.dot(s, r);\n    const rr = Vec2.dot(r, r);\n    const sigma = c * c - rr * b;\n\n    // Check for negative discriminant and short segment.\n    if (sigma < 0.0 || rr < Math.EPSILON) {\n      return false;\n    }\n\n    // Find the point of intersection of the line with the circle.\n    let a = -(c + Math.sqrt(sigma));\n\n    // Is the intersection point on the segment?\n    if (0.0 <= a && a <= input.maxFraction * rr) {\n      a /= rr;\n      output.fraction = a;\n      output.normal = Vec2.add(s, Vec2.mulNumVec2(a, r));\n      output.normal.normalize();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Given a transform, compute the associated axis aligned bounding box for a\n   * child shape.\n   *\n   * @param aabb Returns the axis aligned box.\n   * @param xf The world transform of the shape.\n   * @param childIndex The child shape\n   */\n  computeAABB(aabb: AABB, xf: Transform, childIndex: number): void {\n    const p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n    aabb.lowerBound.setNum(p.x - this.m_radius, p.y - this.m_radius);\n    aabb.upperBound.setNum(p.x + this.m_radius, p.y + this.m_radius);\n  }\n\n  /**\n   * Compute the mass properties of this shape using its dimensions and density.\n   * The inertia tensor is computed about the local origin.\n   *\n   * @param massData Returns the mass data for this shape.\n   * @param density The density in kilograms per meter squared.\n   */\n  computeMass(massData: MassData, density: number): void {\n    massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n    massData.center = this.m_p;\n    // inertia about the local origin\n    massData.I = massData.mass\n        * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n  }\n\n  computeDistanceProxy(proxy: DistanceProxy): void {\n    proxy.m_vertices.push(this.m_p);\n    proxy.m_count = 1;\n    proxy.m_radius = this.m_radius;\n  }\n\n}\n\nexport const Circle = CircleShape;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n */\nexport interface DistanceJointOpt extends JointOpt {\n  /**\n   * The mass-spring-damper frequency in Hertz. A value of 0 disables softness.\n   */\n  frequencyHz?: number;\n  /**\n   * The damping ratio. 0 = no damping, 1 = critical damping.\n   */\n  dampingRatio?: number;\n  /**\n   * Distance length.\n   */\n  length?: number;\n}\n/**\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n */\nexport interface DistanceJointDef extends JointDef, DistanceJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n}\n\nconst DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param anchorA Anchor A in global coordination.\n * @param anchorB Anchor B in global coordination.\n */\nexport class DistanceJoint extends Joint {\n  static TYPE = 'distance-joint' as const;\n\n  // Solver shared\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_length: number;\n  /** @internal */ m_frequencyHz: number;\n  /** @internal */ m_dampingRatio: number;\n  /** @internal */ m_impulse: number;\n  /** @internal */ m_gamma: number;\n  /** @internal */ m_bias: number;\n\n  // Solver temp\n  /** @internal */ m_u: Vec2;\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_mass: number;\n\n  constructor(def: DistanceJointDef);\n  constructor(def: DistanceJointOpt, bodyA: Body, bodyB: Body, anchorA: Vec2, anchorB: Vec2);\n  constructor(def: DistanceJointDef, bodyA?: Body, bodyB?: Body, anchorA?: Vec2, anchorB?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof DistanceJoint)) {\n      return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n    }\n\n    // order of constructor arguments is changed in v0.2\n    if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n      const temp = bodyB;\n      bodyB = anchorA as any as Body;\n      anchorA = temp as any as Vec2;\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = DistanceJoint.TYPE;\n\n    // Solver shared\n    this.m_localAnchorA = Vec2.clone(anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB = Vec2.clone(anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero());\n    this.m_length = Math.isFinite(def.length) ? def.length :\n      Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n    this.m_frequencyHz = def.frequencyHz;\n    this.m_dampingRatio = def.dampingRatio;\n    this.m_impulse = 0.0;\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n\n    // 1-D constrained system\n    // m (v2 - v1) = lambda\n    // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n    // x2 = x1 + h * v2\n\n    // 1-D mass-damper-spring system\n    // m (v2 - v1) + h * d * v2 + h * k *\n\n    // C = norm(p2 - p1) - L\n    // u = (p2 - p1) / norm(p2 - p1)\n    // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n    // J = [-u -cross(r1, u) u cross(r2, u)]\n    // K = J * invM * JT\n    // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      frequencyHz: this.m_frequencyHz,\n      dampingRatio: this.m_dampingRatio,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      length: this.m_length,\n\n      impulse: this.m_impulse,\n      gamma: this.m_gamma,\n      bias: this.m_bias,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): DistanceJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new DistanceJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n    length?: number,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n\n    if (def.length > 0) {\n      this.m_length = +def.length;\n    } else if (def.length < 0) { // don't change length\n    } else if (def.anchorA || def.anchorA || def.anchorA || def.anchorA) {\n      this.m_length = Vec2.distance(\n          this.m_bodyA.getWorldPoint(this.m_localAnchorA),\n          this.m_bodyB.getWorldPoint(this.m_localAnchorB)\n      );\n    }\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * Set the natural length. Manipulating the length can lead to non-physical\n   * behavior when the frequency is zero.\n   */\n  setLength(length: number): void {\n    this.m_length = length;\n  }\n\n  /**\n   * Get the natural length.\n   */\n  getLength(): number {\n    return this.m_length;\n  }\n\n  setFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  getFrequency(): number {\n    return this.m_frequencyHz;\n  }\n\n  setDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  getDampingRatio(): number {\n    return this.m_dampingRatio;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(this.m_impulse, this.m_u).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return 0.0;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n    this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n    // Handle singularity.\n    const length = this.m_u.length();\n    if (length > Settings.linearSlop) {\n      this.m_u.mul(1.0 / length);\n    } else {\n      this.m_u.setNum(0.0, 0.0);\n    }\n\n    const crAu = Vec2.crossVec2Vec2(this.m_rA, this.m_u);\n    const crBu = Vec2.crossVec2Vec2(this.m_rB, this.m_u);\n    let invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n        + this.m_invIB * crBu * crBu;\n\n    // Compute the effective mass matrix.\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n    if (this.m_frequencyHz > 0.0) {\n      const C = length - this.m_length;\n\n      // Frequency\n      const omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n      // Damping coefficient\n      const d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n      // Spring stiffness\n      const k = this.m_mass * omega * omega;\n\n      // magic formulas\n      const h = step.dt;\n      this.m_gamma = h * (d + h * k);\n      this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n      this.m_bias = C * h * k * this.m_gamma;\n\n      invMass += this.m_gamma;\n      this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n    } else {\n      this.m_gamma = 0.0;\n      this.m_bias = 0.0;\n    }\n\n    if (step.warmStarting) {\n      // Scale the impulse to support a variable time step.\n      this.m_impulse *= step.dtRatio;\n\n      const P = Vec2.mulNumVec2(this.m_impulse, this.m_u);\n\n      vA.subMul(this.m_invMassA, P);\n      wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n\n      vB.addMul(this.m_invMassB, P);\n      wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n\n    } else {\n      this.m_impulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    // Cdot = dot(u, v + cross(w, r))\n    const vpA = Vec2.add(vA, Vec2.crossNumVec2(wA, this.m_rA));\n    const vpB = Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB));\n    const Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n    const impulse = -this.m_mass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n    this.m_impulse += impulse;\n\n    const P = Vec2.mulNumVec2(impulse, this.m_u);\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    if (this.m_frequencyHz > 0.0) {\n      // There is no position correction for soft distance constraints.\n      return true;\n    }\n\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n    const rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n    const u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n    const length = u.normalize();\n    let C = length - this.m_length;\n    C = Math\n        .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n    const impulse = -this.m_mass * C;\n    const P = Vec2.mulNumVec2(impulse, u);\n\n    cA.subMul(this.m_invMassA, P);\n    aA -= this.m_invIA * Vec2.crossVec2Vec2(rA, P);\n    cB.addMul(this.m_invMassB, P);\n    aB += this.m_invIB * Vec2.crossVec2Vec2(rB, P);\n\n    this.m_bodyA.c_position.c.setVec2(cA);\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c.setVec2(cB);\n    this.m_bodyB.c_position.a = aB;\n\n    return Math.abs(C) < Settings.linearSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Mat22 } from '../../common/Mat22';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Friction joint definition.\n */\nexport interface FrictionJointOpt extends JointOpt {\n  /**\n   * The maximum friction force in N.\n   */\n  maxForce?: number;\n  /**\n   * The maximum friction torque in N-m.\n   */\n  maxTorque?: number;\n}\n/**\n * Friction joint definition.\n */\nexport interface FrictionJointDef extends JointDef, FrictionJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n}\n\nconst DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param anchor Anchor in global coordination.\n */\nexport class FrictionJoint extends Joint {\n  static TYPE = 'friction-joint' as const;\n\n  /** @internal */ m_type: 'friction-joint';\n\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n\n  // Solver shared\n  /** @internal */ m_linearImpulse: Vec2;\n  /** @internal */ m_angularImpulse: number;\n  /** @internal */ m_maxForce: number;\n  /** @internal */ m_maxTorque: number;\n\n  // Solver temp\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_linearMass: Mat22;\n  /** @internal */ m_angularMass: number;\n\n  constructor(def: FrictionJointDef);\n  constructor(def: FrictionJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2);\n  constructor(def: FrictionJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof FrictionJoint)) {\n      return new FrictionJoint(def, bodyA, bodyB, anchor);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = FrictionJoint.TYPE;\n\n    this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n\n    // Solver shared\n    this.m_linearImpulse = Vec2.zero();\n    this.m_angularImpulse = 0.0;\n    this.m_maxForce = def.maxForce;\n    this.m_maxTorque = def.maxTorque;\n\n    // Point-to-point constraint\n    // Cdot = v2 - v1\n    // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n    // J = [-I -r1_skew I r2_skew ]\n    // Identity used:\n    // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n    // Angle constraint\n    // Cdot = w2 - w1\n    // J = [0 0 -1 0 0 1]\n    // K = invI1 + invI2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      maxForce: this.m_maxForce,\n      maxTorque: this.m_maxTorque,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): FrictionJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new FrictionJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n  }\n\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * Set the maximum friction force in N.\n   */\n  setMaxForce(force: number): void {\n    _ASSERT && console.assert(Math.isFinite(force) && force >= 0.0);\n    this.m_maxForce = force;\n  }\n\n  /**\n   * Get the maximum friction force in N.\n   */\n  getMaxForce(): number {\n    return this.m_maxForce;\n  }\n\n  /**\n   * Set the maximum friction torque in N*m.\n   */\n  setMaxTorque(torque: number): void {\n    _ASSERT && console.assert(Math.isFinite(torque) && torque >= 0.0);\n    this.m_maxTorque = torque;\n  }\n\n  /**\n   * Get the maximum friction torque in N*m.\n   */\n  getMaxTorque(): number {\n    return this.m_maxTorque;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(inv_dt, this.m_linearImpulse);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_angularImpulse;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    // Compute the effective mass matrix.\n    this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // J = [-I -r1_skew I r2_skew]\n    // [ 0 -1 0 1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n    // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n    // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const K = new Mat22();\n    K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n        * this.m_rB.y;\n    K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n        * this.m_rB.x;\n\n    this.m_linearMass = K.getInverse();\n\n    this.m_angularMass = iA + iB;\n    if (this.m_angularMass > 0.0) {\n      this.m_angularMass = 1.0 / this.m_angularMass;\n    }\n\n    if (step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_linearImpulse.mul(step.dtRatio);\n      this.m_angularImpulse *= step.dtRatio;\n\n      const P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_angularImpulse);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_angularImpulse);\n\n    } else {\n      this.m_linearImpulse.setZero();\n      this.m_angularImpulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const h = step.dt; // float\n\n    // Solve angular friction\n    {\n      const Cdot = wB - wA; // float\n      let impulse = -this.m_angularMass * Cdot; // float\n\n      const oldImpulse = this.m_angularImpulse; // float\n      const maxImpulse = h * this.m_maxTorque; // float\n      this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n          -maxImpulse, maxImpulse);\n      impulse = this.m_angularImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve linear friction\n    {\n      const Cdot = Vec2.sub(Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB)), Vec2.add(vA,\n          Vec2.crossNumVec2(wA, this.m_rA))); // Vec2\n\n      let impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n      const oldImpulse = this.m_linearImpulse; // Vec2\n      this.m_linearImpulse.add(impulse);\n\n      const maxImpulse = h * this.m_maxForce; // float\n\n      if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n        this.m_linearImpulse.normalize();\n        this.m_linearImpulse.mul(maxImpulse);\n      }\n\n      impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n      vA.subMul(mA, impulse);\n      wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n\n      vB.addMul(mB, impulse);\n      wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    return true;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Vec2 } from './Vec2';\nimport { Vec3 } from './Vec3';\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nexport class Mat33 {\n  ex: Vec3;\n  ey: Vec3;\n  ez: Vec3;\n\n  constructor(a: Vec3, b: Vec3, c: Vec3);\n  constructor();\n  constructor(a?: Vec3, b?: Vec3, c?: Vec3) {\n    if (typeof a === 'object' && a !== null) {\n      this.ex = Vec3.clone(a);\n      this.ey = Vec3.clone(b);\n      this.ez = Vec3.clone(c);\n    } else {\n      this.ex = Vec3.zero();\n      this.ey = Vec3.zero();\n      this.ez = Vec3.zero();\n    }\n  }\n\n  /** @internal */\n  toString(): string {\n    return JSON.stringify(this);\n  }\n\n  static isValid(obj: any): boolean {\n    if (obj === null || typeof obj === 'undefined') {\n      return false;\n    }\n    return Vec3.isValid(obj.ex) && Vec3.isValid(obj.ey) && Vec3.isValid(obj.ez);\n  }\n\n  static assert(o: any): void {\n    _ASSERT && console.assert(!Mat33.isValid(o), 'Invalid Mat33!', o);\n  }\n\n  /**\n   * Set this matrix to all zeros.\n   */\n  setZero(): Mat33 {\n    this.ex.setZero();\n    this.ey.setZero();\n    this.ez.setZero();\n    return this;\n  }\n\n  /**\n   * Solve A * x = b, where b is a column vector. This is more efficient than\n   * computing the inverse in one-shot cases.\n   */\n  solve33(v: Vec3): Vec3 {\n    let det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    const r = new Vec3();\n    r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n    r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n    r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n    return r;\n  }\n\n  /**\n   * Solve A * x = b, where b is a column vector. This is more efficient than\n   * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n   * equation.\n   */\n  solve22(v: Vec2): Vec2 {\n    const a11 = this.ex.x;\n    const a12 = this.ey.x;\n    const a21 = this.ex.y;\n    const a22 = this.ey.y;\n    let det = a11 * a22 - a12 * a21;\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    const r = Vec2.zero();\n    r.x = det * (a22 * v.x - a12 * v.y);\n    r.y = det * (a11 * v.y - a21 * v.x);\n    return r;\n  }\n\n  /**\n   * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n   * singular.\n   */\n  getInverse22(M: Mat33): void {\n    const a = this.ex.x;\n    const b = this.ey.x;\n    const c = this.ex.y;\n    const d = this.ey.y;\n    let det = a * d - b * c;\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    M.ex.x = det * d;\n    M.ey.x = -det * b;\n    M.ex.z = 0.0;\n    M.ex.y = -det * c;\n    M.ey.y = det * a;\n    M.ey.z = 0.0;\n    M.ez.x = 0.0;\n    M.ez.y = 0.0;\n    M.ez.z = 0.0;\n  }\n\n  /**\n   * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n   * if singular.\n   */\n  getSymInverse33(M: Mat33): void {\n    let det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n    if (det !== 0.0) {\n      det = 1.0 / det;\n    }\n    const a11 = this.ex.x;\n    const a12 = this.ey.x;\n    const a13 = this.ez.x;\n    const a22 = this.ey.y;\n    const a23 = this.ez.y;\n    const a33 = this.ez.z;\n\n    M.ex.x = det * (a22 * a33 - a23 * a23);\n    M.ex.y = det * (a13 * a23 - a12 * a33);\n    M.ex.z = det * (a12 * a23 - a13 * a22);\n\n    M.ey.x = M.ex.y;\n    M.ey.y = det * (a11 * a33 - a13 * a13);\n    M.ey.z = det * (a13 * a12 - a11 * a23);\n\n    M.ez.x = M.ex.z;\n    M.ez.y = M.ey.z;\n    M.ez.z = det * (a11 * a22 - a12 * a12);\n  }\n\n  /**\n   * Multiply a matrix times a vector.\n   */\n  static mul(a: Mat33, b: Vec2): Vec2;\n  static mul(a: Mat33, b: Vec3): Vec3;\n  // tslint:disable-next-line:typedef\n  static mul(a, b) {\n    _ASSERT && Mat33.assert(a);\n    if (b && 'z' in b && 'y' in b && 'x' in b) {\n      _ASSERT && Vec3.assert(b);\n      const x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n      const y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n      const z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n      return new Vec3(x, y, z);\n\n    } else if (b && 'y' in b && 'x' in b) {\n      _ASSERT && Vec2.assert(b);\n      const x = a.ex.x * b.x + a.ey.x * b.y;\n      const y = a.ex.y * b.x + a.ey.y * b.y;\n      return Vec2.neo(x, y);\n    }\n\n    _ASSERT && console.assert(false);\n  }\n\n  static mulVec3(a: Mat33, b: Vec3): Vec3 {\n    _ASSERT && Mat33.assert(a);\n    _ASSERT && Vec3.assert(b);\n    const x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    const y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    const z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n  }\n\n  static mulVec2(a: Mat33, b: Vec2): Vec2 {\n    _ASSERT && Mat33.assert(a);\n    _ASSERT && Vec2.assert(b);\n    const x = a.ex.x * b.x + a.ey.x * b.y;\n    const y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  static add(a: Mat33, b: Mat33): Mat33 {\n    _ASSERT && Mat33.assert(a);\n    _ASSERT && Mat33.assert(b);\n    return new Mat33(\n      Vec3.add(a.ex, b.ex),\n      Vec3.add(a.ey, b.ey),\n      Vec3.add(a.ez, b.ez)\n    );\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Vec3 } from '../../common/Vec3';\nimport { Mat22 } from '../../common/Mat22';\nimport { Mat33 } from '../../common/Mat33';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nconst inactiveLimit = 0;\nconst atLowerLimit = 1;\nconst atUpperLimit = 2;\nconst equalLimits = 3;\n\n/**\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n *\n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n */\nexport interface RevoluteJointOpt extends JointOpt {\n  /**\n   * The lower angle for the joint limit (radians).\n   */\n  lowerAngle?: number;\n  /**\n   * The upper angle for the joint limit (radians).\n   */\n  upperAngle?: number;\n  /**\n   * The maximum motor torque used to achieve the desired motor speed. Usually\n   * in N-m.\n   */\n  maxMotorTorque?: number;\n  /**\n   * The desired motor speed. Usually in radians per second.\n   */\n  motorSpeed?: number;\n  /**\n   * A flag to enable joint limits.\n   */\n  enableLimit?: boolean;\n  /**\n   * A flag to enable the joint motor.\n   */\n  enableMotor?: boolean;\n}\n/**\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n *\n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n */\nexport interface RevoluteJointDef extends JointDef, RevoluteJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n  /**\n   * The bodyB angle minus bodyA angle in the reference state (radians).\n   */\n  referenceAngle: number;\n}\n\nconst DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n */\nexport class RevoluteJoint extends Joint {\n  static TYPE = 'revolute-joint' as const;\n\n  /** @internal */ m_type: 'revolute-joint';\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_referenceAngle: number;\n  /** @internal */ m_impulse: Vec3;\n  /** @internal */ m_motorImpulse: number;\n  /** @internal */ m_lowerAngle: number;\n  /** @internal */ m_upperAngle: number;\n  /** @internal */ m_maxMotorTorque: number;\n  /** @internal */ m_motorSpeed: number;\n  /** @internal */ m_enableLimit: boolean;\n  /** @internal */ m_enableMotor: boolean;\n\n  // Solver temp\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  // effective mass for point-to-point constraint.\n  /** @internal */ m_mass: Mat33 = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  /** @internal */ m_motorMass: number;\n  /** @internal */ m_limitState: number = inactiveLimit; // TODO enum\n\n  constructor(def: RevoluteJointDef);\n  constructor(def: RevoluteJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2);\n  // @ts-ignore\n  constructor(def: RevoluteJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof RevoluteJoint)) {\n      return new RevoluteJoint(def, bodyA, bodyB, anchor);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = RevoluteJoint.TYPE;\n\n    this.m_localAnchorA =  Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB =  Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n    this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n    this.m_impulse = new Vec3();\n    this.m_motorImpulse = 0.0;\n\n    this.m_lowerAngle = def.lowerAngle;\n    this.m_upperAngle = def.upperAngle;\n    this.m_maxMotorTorque = def.maxMotorTorque;\n    this.m_motorSpeed = def.motorSpeed;\n    this.m_enableLimit = def.enableLimit;\n    this.m_enableMotor = def.enableMotor;\n\n    // Point-to-point constraint\n    // C = p2 - p1\n    // Cdot = v2 - v1\n    // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n    // J = [-I -r1_skew I r2_skew ]\n    // Identity used:\n    // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n    // Motor constraint\n    // Cdot = w2 - w1\n    // J = [0 0 -1 0 0 1]\n    // K = invI1 + invI2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      lowerAngle: this.m_lowerAngle,\n      upperAngle: this.m_upperAngle,\n      maxMotorTorque: this.m_maxMotorTorque,\n      motorSpeed: this.m_motorSpeed,\n      enableLimit: this.m_enableLimit,\n      enableMotor: this.m_enableMotor,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      referenceAngle: this.m_referenceAngle,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any):RevoluteJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new RevoluteJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * Get the reference angle.\n   */\n  getReferenceAngle(): number {\n    return this.m_referenceAngle;\n  }\n\n  /**\n   * Get the current joint angle in radians.\n   */\n  getJointAngle(): number {\n    const bA = this.m_bodyA;\n    const bB = this.m_bodyB;\n    return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n  }\n\n  /**\n   * Get the current joint angle speed in radians per second.\n   */\n  getJointSpeed(): number {\n    const bA = this.m_bodyA;\n    const bB = this.m_bodyB;\n    return bB.m_angularVelocity - bA.m_angularVelocity;\n  }\n\n  /**\n   * Is the joint motor enabled?\n   */\n  isMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  /**\n   * Enable/disable the joint motor.\n   */\n  enableMotor(flag: boolean): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableMotor = flag;\n  }\n\n  /**\n   * Get the current motor torque given the inverse time step. Unit is N*m.\n   */\n  getMotorTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  /**\n   * Set the motor speed in radians per second.\n   */\n  setMotorSpeed(speed: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_motorSpeed = speed;\n  }\n\n  /**\n   * Get the motor speed in radians per second.\n   */\n  getMotorSpeed(): number {\n    return this.m_motorSpeed;\n  }\n\n  /**\n   * Set the maximum motor torque, usually in N-m.\n   */\n  setMaxMotorTorque(torque: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_maxMotorTorque = torque;\n  }\n\n  getMaxMotorTorque(): number {\n    return this.m_maxMotorTorque;\n  }\n\n  /**\n   * Is the joint limit enabled?\n   */\n  isLimitEnabled(): boolean {\n    return this.m_enableLimit;\n  }\n\n  /**\n   * Enable/disable the joint limit.\n   */\n  enableLimit(flag: boolean): void {\n    if (flag != this.m_enableLimit) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_enableLimit = flag;\n      this.m_impulse.z = 0.0;\n    }\n  }\n\n  /**\n   * Get the lower joint limit in radians.\n   */\n  getLowerLimit(): number {\n    return this.m_lowerAngle;\n  }\n\n  /**\n   * Get the upper joint limit in radians.\n   */\n  getUpperLimit(): number {\n    return this.m_upperAngle;\n  }\n\n  /**\n   * Set the joint limits in radians.\n   */\n  setLimits(lower: number, upper: number): void {\n    _ASSERT && console.assert(lower <= upper);\n\n    if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_impulse.z = 0.0;\n      this.m_lowerAngle = lower;\n      this.m_upperAngle = upper;\n    }\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force given the inverse time step. Unit is N.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque due to the joint limit given the inverse time step.\n   * Unit is N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.z;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // J = [-I -r1_skew I r2_skew]\n    // [ 0 -1 0 1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n    // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n    // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB; // float\n    const iA = this.m_invIA;\n    const iB = this.m_invIB; // float\n\n    const fixedRotation = (iA + iB === 0.0); // bool\n\n    this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n        * this.m_rB.y * iB;\n    this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n        * this.m_rB.x * iB;\n    this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n    this.m_mass.ex.y = this.m_mass.ey.x;\n    this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n        * this.m_rB.x * iB;\n    this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n    this.m_mass.ex.z = this.m_mass.ez.x;\n    this.m_mass.ey.z = this.m_mass.ez.y;\n    this.m_mass.ez.z = iA + iB;\n\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n\n    if (this.m_enableMotor == false || fixedRotation) {\n      this.m_motorImpulse = 0.0;\n    }\n\n    if (this.m_enableLimit && fixedRotation == false) {\n      const jointAngle = aB - aA - this.m_referenceAngle; // float\n\n      if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n        this.m_limitState = equalLimits;\n\n      } else if (jointAngle <= this.m_lowerAngle) {\n        if (this.m_limitState != atLowerLimit) {\n          this.m_impulse.z = 0.0;\n        }\n        this.m_limitState = atLowerLimit;\n\n      } else if (jointAngle >= this.m_upperAngle) {\n        if (this.m_limitState != atUpperLimit) {\n          this.m_impulse.z = 0.0;\n        }\n        this.m_limitState = atUpperLimit;\n\n      } else {\n        this.m_limitState = inactiveLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n    }\n\n    if (step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_impulse.mul(step.dtRatio);\n      this.m_motorImpulse *= step.dtRatio;\n\n      const P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    } else {\n      this.m_impulse.setZero();\n      this.m_motorImpulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB; // float\n    const iA = this.m_invIA;\n    const iB = this.m_invIB; // float\n\n    const fixedRotation = (iA + iB === 0.0); // bool\n\n    // Solve motor constraint.\n    if (this.m_enableMotor && this.m_limitState != equalLimits\n        && fixedRotation == false) {\n      const Cdot = wB - wA - this.m_motorSpeed; // float\n      let impulse = -this.m_motorMass * Cdot; // float\n      const oldImpulse = this.m_motorImpulse; // float\n      const maxImpulse = step.dt * this.m_maxMotorTorque; // float\n      this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n          -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve limit constraint.\n    if (this.m_enableLimit && this.m_limitState != inactiveLimit\n        && fixedRotation == false) {\n      const Cdot1 = Vec2.zero();\n      Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n      Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n      const Cdot2 = wB - wA; // float\n      const Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n      const impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n      if (this.m_limitState == equalLimits) {\n        this.m_impulse.add(impulse);\n\n      } else if (this.m_limitState == atLowerLimit) {\n        const newImpulse = this.m_impulse.z + impulse.z; // float\n\n        if (newImpulse < 0.0) {\n          const rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n          const reduced = this.m_mass.solve22(rhs); // Vec2\n          impulse.x = reduced.x;\n          impulse.y = reduced.y;\n          impulse.z = -this.m_impulse.z;\n          this.m_impulse.x += reduced.x;\n          this.m_impulse.y += reduced.y;\n          this.m_impulse.z = 0.0;\n\n        } else {\n          this.m_impulse.add(impulse);\n        }\n\n      } else if (this.m_limitState == atUpperLimit) {\n        const newImpulse = this.m_impulse.z + impulse.z; // float\n\n        if (newImpulse > 0.0) {\n          const rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n          const reduced = this.m_mass.solve22(rhs); // Vec2\n          impulse.x = reduced.x;\n          impulse.y = reduced.y;\n          impulse.z = -this.m_impulse.z;\n          this.m_impulse.x += reduced.x;\n          this.m_impulse.y += reduced.y;\n          this.m_impulse.z = 0.0;\n\n        } else {\n          this.m_impulse.add(impulse);\n        }\n      }\n\n      const P = Vec2.neo(impulse.x, impulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + impulse.z);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + impulse.z);\n\n    } else {\n      // Solve point-to-point constraint\n      const Cdot = Vec2.zero();\n      Cdot.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n      Cdot.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n      const impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n      this.m_impulse.x += impulse.x;\n      this.m_impulse.y += impulse.y;\n\n      vA.subMul(mA, impulse);\n      wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n\n      vB.addMul(mB, impulse);\n      wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    let angularError = 0.0; // float\n    let positionError = 0.0; // float\n\n    const fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n    // Solve angular limit constraint.\n    if (this.m_enableLimit && this.m_limitState != inactiveLimit\n        && fixedRotation == false) {\n      const angle = aB - aA - this.m_referenceAngle; // float\n      let limitImpulse = 0.0; // float\n\n      if (this.m_limitState == equalLimits) {\n        // Prevent large angular corrections\n        const C = Math.clamp(angle - this.m_lowerAngle,\n            -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n        limitImpulse = -this.m_motorMass * C;\n        angularError = Math.abs(C);\n\n      } else if (this.m_limitState == atLowerLimit) {\n        let C = angle - this.m_lowerAngle; // float\n        angularError = -C;\n\n        // Prevent large angular corrections and allow some slop.\n        C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n            0.0);\n        limitImpulse = -this.m_motorMass * C;\n\n      } else if (this.m_limitState == atUpperLimit) {\n        let C = angle - this.m_upperAngle; // float\n        angularError = C;\n\n        // Prevent large angular corrections and allow some slop.\n        C = Math.clamp(C - Settings.angularSlop, 0.0,\n            Settings.maxAngularCorrection);\n        limitImpulse = -this.m_motorMass * C;\n      }\n\n      aA -= this.m_invIA * limitImpulse;\n      aB += this.m_invIB * limitImpulse;\n    }\n\n    // Solve point-to-point constraint.\n    {\n      qA.setAngle(aA);\n      qB.setAngle(aB);\n      const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n      const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n      const C = Vec2.zero();\n      C.addCombine(1, cB, 1, rB);\n      C.subCombine(1, cA, 1, rA);\n      positionError = C.length();\n\n      const mA = this.m_invMassA;\n      const mB = this.m_invMassB; // float\n      const iA = this.m_invIA;\n      const iB = this.m_invIB; // float\n\n      const K = new Mat22();\n      K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n      K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n      K.ey.x = K.ex.y;\n      K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n      const impulse = Vec2.neg(K.solve(C)); // Vec2\n\n      cA.subMul(mA, impulse);\n      aA -= iA * Vec2.crossVec2Vec2(rA, impulse);\n\n      cB.addMul(mB, impulse);\n      aB += iB * Vec2.crossVec2Vec2(rB, impulse);\n    }\n\n    this.m_bodyA.c_position.c.setVec2(cA);\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c.setVec2(cB);\n    this.m_bodyB.c_position.a = aB;\n\n    return positionError <= Settings.linearSlop\n        && angularError <= Settings.angularSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Vec3 } from '../../common/Vec3';\nimport { Mat22 } from '../../common/Mat22';\nimport { Mat33 } from '../../common/Mat33';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nconst inactiveLimit = 0;\nconst atLowerLimit = 1;\nconst atUpperLimit = 2;\nconst equalLimits = 3;\n\n/**\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n */\nexport interface PrismaticJointOpt extends JointOpt {\n  /**\n   * Enable/disable the joint limit.\n   */\n  enableLimit?: boolean;\n  /**\n   * The lower translation limit, usually in meters.\n   */\n  lowerTranslation?: number;\n  /**\n   * The upper translation limit, usually in meters.\n   */\n  upperTranslation?: number;\n  /**\n   * Enable/disable the joint motor.\n   */\n  enableMotor?: boolean;\n  /**\n   * The maximum motor torque, usually in N-m.\n   */\n  maxMotorForce?: number;\n  /**\n   * The desired motor speed in radians per second.\n   */\n  motorSpeed?: number;\n}\n/**\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n */\nexport interface PrismaticJointDef extends JointDef, PrismaticJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n  /**\n   * The local translation unit axis in bodyA.\n   */\n  localAxisA: Vec2;\n  /**\n   * referenceAngle The constrained angle between the bodies:\n   * bodyB_angle - bodyA_angle.\n   */\n  referenceAngle: number;\n}\n\nconst DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n */\nexport class PrismaticJoint extends Joint {\n  static TYPE = 'prismatic-joint' as const;\n\n  /** @internal */ m_type: 'prismatic-joint';\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_localXAxisA: Vec2;\n  /** @internal */ m_localYAxisA: Vec2;\n  /** @internal */ m_referenceAngle: number;\n  /** @internal */ m_impulse: Vec3;\n  /** @internal */ m_motorMass: number;\n  /** @internal */ m_motorImpulse: number;\n  /** @internal */ m_lowerTranslation: number;\n  /** @internal */ m_upperTranslation: number;\n  /** @internal */ m_maxMotorForce: number;\n  /** @internal */ m_motorSpeed: number;\n  /** @internal */ m_enableLimit: boolean;\n  /** @internal */ m_enableMotor: boolean;\n  /** @internal */ m_limitState: number; // TODO enum\n  /** @internal */ m_axis: Vec2;\n  /** @internal */ m_perp: Vec2;\n  // Solver temp\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_s1: number;\n  /** @internal */ m_s2: number;\n  /** @internal */ m_a1: number;\n  /** @internal */ m_a2: number;\n  /** @internal */ m_K: Mat33;\n\n  constructor(def: PrismaticJointDef);\n  constructor(def: PrismaticJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2, axis: Vec2);\n  constructor(def: PrismaticJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2, axis?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof PrismaticJoint)) {\n      return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = PrismaticJoint.TYPE;\n\n    this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n    this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0));\n    this.m_localXAxisA.normalize();\n    this.m_localYAxisA = Vec2.crossNumVec2(1.0, this.m_localXAxisA);\n    this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n    this.m_impulse = new Vec3();\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n\n    this.m_lowerTranslation = def.lowerTranslation;\n    this.m_upperTranslation = def.upperTranslation;\n    this.m_maxMotorForce = def.maxMotorForce;\n    this.m_motorSpeed = def.motorSpeed;\n    this.m_enableLimit = def.enableLimit;\n    this.m_enableMotor = def.enableMotor;\n    this.m_limitState = inactiveLimit;\n\n    this.m_axis = Vec2.zero();\n    this.m_perp = Vec2.zero();\n\n    this.m_K = new Mat33();\n\n    // Linear constraint (point-to-line)\n    // d = p2 - p1 = x2 + r2 - x1 - r1\n    // C = dot(perp, d)\n    // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n    // cross(w1, r1))\n    // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n    // dot(cross(r2, perp), v2)\n    // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n    //\n    // Angular constraint\n    // C = a2 - a1 + a_initial\n    // Cdot = w2 - w1\n    // J = [0 0 -1 0 0 1]\n    //\n    // K = J * invM * JT\n    //\n    // J = [-a -s1 a s2]\n    // [0 -1 0 1]\n    // a = perp\n    // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n    // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n    // Motor/Limit linear constraint\n    // C = dot(ax1, d)\n    // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n    // dot(cross(r2, ax1), v2)\n    // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n    // Block Solver\n    // We develop a block solver that includes the joint limit. This makes the\n    // limit stiff (inelastic) even\n    // when the mass has poor distribution (leading to large torques about the\n    // joint anchor points).\n    //\n    // The Jacobian has 3 rows:\n    // J = [-uT -s1 uT s2] // linear\n    // [0 -1 0 1] // angular\n    // [-vT -a1 vT a2] // limit\n    //\n    // u = perp\n    // v = axis\n    // s1 = cross(d + r1, u), s2 = cross(r2, u)\n    // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n    // M * (v2 - v1) = JT * df\n    // J * v2 = bias\n    //\n    // v2 = v1 + invM * JT * df\n    // J * (v1 + invM * JT * df) = bias\n    // K * df = bias - J * v1 = -Cdot\n    // K = J * invM * JT\n    // Cdot = J * v1 - bias\n    //\n    // Now solve for f2.\n    // df = f2 - f1\n    // K * (f2 - f1) = -Cdot\n    // f2 = invK * (-Cdot) + f1\n    //\n    // Clamp accumulated limit impulse.\n    // lower: f2(3) = max(f2(3), 0)\n    // upper: f2(3) = min(f2(3), 0)\n    //\n    // Solve for correct f2(1:2)\n    // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n    // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n    // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n    // K(1:2,1:2) * f1(1:2)\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    //\n    // Now compute impulse to be applied:\n    // df = f2 - f1\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      lowerTranslation: this.m_lowerTranslation,\n      upperTranslation: this.m_upperTranslation,\n      maxMotorForce: this.m_maxMotorForce,\n      motorSpeed: this.m_motorSpeed,\n      enableLimit: this.m_enableLimit,\n      enableMotor: this.m_enableMotor,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      localAxisA: this.m_localXAxisA,\n      referenceAngle: this.m_referenceAngle,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): PrismaticJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    data.localAxisA = Vec2.clone(data.localAxisA);\n    const joint = new PrismaticJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n    localAxisA?: Vec2,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n\n    if (def.localAxisA) {\n      this.m_localXAxisA.setVec2(def.localAxisA);\n      this.m_localYAxisA.setVec2(Vec2.crossNumVec2(1.0, def.localAxisA));\n    }\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * The local joint axis relative to bodyA.\n   */\n  getLocalAxisA(): Vec2 {\n    return this.m_localXAxisA;\n  }\n\n  /**\n   * Get the reference angle.\n   */\n  getReferenceAngle(): number {\n    return this.m_referenceAngle;\n  }\n\n  /**\n   * Get the current joint translation, usually in meters.\n   */\n  getJointTranslation(): number {\n    const pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n    const pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n    const d = Vec2.sub(pB, pA);\n    const axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n    const translation = Vec2.dot(d, axis);\n    return translation;\n  }\n\n  /**\n   * Get the current joint translation speed, usually in meters per second.\n   */\n  getJointSpeed(): number {\n    const bA = this.m_bodyA;\n    const bB = this.m_bodyB;\n\n    const rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n    const rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n    const p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n    const p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n    const d = Vec2.sub(p2, p1); // Vec2\n    const axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n    const vA = bA.m_linearVelocity; // Vec2\n    const vB = bB.m_linearVelocity; // Vec2\n    const wA = bA.m_angularVelocity; // float\n    const wB = bB.m_angularVelocity; // float\n\n    const speed = Vec2.dot(d, Vec2.crossNumVec2(wA, axis))\n        + Vec2.dot(axis, Vec2.sub(Vec2.addCrossNumVec2(vB, wB, rB), Vec2.addCrossNumVec2(vA, wA, rA))); // float\n    return speed;\n  }\n\n  /**\n   * Is the joint limit enabled?\n   */\n  isLimitEnabled(): boolean {\n    return this.m_enableLimit;\n  }\n\n  /**\n   * Enable/disable the joint limit.\n   */\n  enableLimit(flag: boolean): void {\n    if (flag != this.m_enableLimit) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_enableLimit = flag;\n      this.m_impulse.z = 0.0;\n    }\n  }\n\n  /**\n   * Get the lower joint limit, usually in meters.\n   */\n  getLowerLimit(): number {\n    return this.m_lowerTranslation;\n  }\n\n  /**\n   * Get the upper joint limit, usually in meters.\n   */\n  getUpperLimit(): number {\n    return this.m_upperTranslation;\n  }\n\n  /**\n   * Set the joint limits, usually in meters.\n   */\n  setLimits(lower: number, upper: number): void {\n    _ASSERT && console.assert(lower <= upper);\n    if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_lowerTranslation = lower;\n      this.m_upperTranslation = upper;\n      this.m_impulse.z = 0.0;\n    }\n  }\n\n  /**\n   * Is the joint motor enabled?\n   */\n  isMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  /**\n   * Enable/disable the joint motor.\n   */\n  enableMotor(flag: boolean): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableMotor = flag;\n  }\n\n  /**\n   * Set the motor speed, usually in meters per second.\n   */\n  setMotorSpeed(speed: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_motorSpeed = speed;\n  }\n\n  /**\n   * Set the maximum motor force, usually in N.\n   */\n  setMaxMotorForce(force: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_maxMotorForce = force;\n  }\n\n  getMaxMotorForce(): number {\n    return this.m_maxMotorForce;\n  }\n\n  /**\n   * Get the motor speed, usually in meters per second.\n   */\n  getMotorSpeed(): number {\n    return this.m_motorSpeed;\n  }\n\n  /**\n   * Get the current motor force given the inverse time step, usually in N.\n   */\n  getMotorForce(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.y;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    // Compute the effective masses.\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n    const d = Vec2.zero();\n    d.addCombine(1, cB, 1, rB);\n    d.subCombine(1, cA, 1, rA);\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    // Compute motor Jacobian and effective mass.\n    {\n      this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n      this.m_a1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_axis);\n      this.m_a2 = Vec2.crossVec2Vec2(rB, this.m_axis);\n\n      this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n          * this.m_a2;\n      if (this.m_motorMass > 0.0) {\n        this.m_motorMass = 1.0 / this.m_motorMass;\n      }\n    }\n\n    // Prismatic constraint.\n    {\n      this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n      this.m_s1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_perp);\n      this.m_s2 = Vec2.crossVec2Vec2(rB, this.m_perp);\n\n      const s1test = Vec2.crossVec2Vec2(rA, this.m_perp);\n\n      const k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n      const k12 = iA * this.m_s1 + iB * this.m_s2;\n      const k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n      let k22 = iA + iB;\n      if (k22 == 0.0) {\n        // For bodies with fixed rotation.\n        k22 = 1.0;\n      }\n      const k23 = iA * this.m_a1 + iB * this.m_a2;\n      const k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n      this.m_K.ex.set(k11, k12, k13);\n      this.m_K.ey.set(k12, k22, k23);\n      this.m_K.ez.set(k13, k23, k33);\n    }\n\n    // Compute motor and limit terms.\n    if (this.m_enableLimit) {\n\n      const jointTranslation = Vec2.dot(this.m_axis, d); // float\n      if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n        this.m_limitState = equalLimits;\n\n      } else if (jointTranslation <= this.m_lowerTranslation) {\n        if (this.m_limitState != atLowerLimit) {\n          this.m_limitState = atLowerLimit;\n          this.m_impulse.z = 0.0;\n        }\n\n      } else if (jointTranslation >= this.m_upperTranslation) {\n        if (this.m_limitState != atUpperLimit) {\n          this.m_limitState = atUpperLimit;\n          this.m_impulse.z = 0.0;\n        }\n\n      } else {\n        this.m_limitState = inactiveLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n    if (this.m_enableMotor == false) {\n      this.m_motorImpulse = 0.0;\n    }\n\n    if (step.warmStarting) {\n      // Account for variable time step.\n      this.m_impulse.mul(step.dtRatio);\n      this.m_motorImpulse *= step.dtRatio;\n\n      const P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n          + this.m_impulse.z, this.m_axis);\n      const LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n          + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n      const LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n          + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    } else {\n      this.m_impulse.setZero();\n      this.m_motorImpulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    // Solve linear motor constraint.\n    if (this.m_enableMotor && this.m_limitState != equalLimits) {\n      const Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n          - this.m_a1 * wA;\n      let impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n      const oldImpulse = this.m_motorImpulse;\n      const maxImpulse = step.dt * this.m_maxMotorForce;\n      this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n          -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      const P = Vec2.mulNumVec2(impulse, this.m_axis);\n      const LA = impulse * this.m_a1;\n      const LB = impulse * this.m_a2;\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    }\n\n    const Cdot1 = Vec2.zero();\n    Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n    Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n    Cdot1.y = wB - wA;\n\n    if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n      // Solve prismatic and limit constraint in block form.\n      let Cdot2 = 0;\n      Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n      Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n      const Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n      const f1 = Vec3.clone(this.m_impulse);\n      let df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n      this.m_impulse.add(df);\n\n      if (this.m_limitState == atLowerLimit) {\n        this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n      } else if (this.m_limitState == atUpperLimit) {\n        this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n      }\n\n      // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n      // f1(1:2)\n      const b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n      const f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n      this.m_impulse.x = f2r.x;\n      this.m_impulse.y = f2r.y;\n\n      df = Vec3.sub(this.m_impulse, f1);\n\n      const P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n      const LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n      const LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    } else {\n      // Limit is inactive, just solve the prismatic constraint in block form.\n      const df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n      this.m_impulse.x += df.x;\n      this.m_impulse.y += df.y;\n\n      const P = Vec2.mulNumVec2(df.x, this.m_perp); // Vec2\n      const LA = df.x * this.m_s1 + df.y; // float\n      const LB = df.x * this.m_s2 + df.y; // float\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    // Compute fresh Jacobians\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n    const d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n    const axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n    const a1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), axis); // float\n    const a2 = Vec2.crossVec2Vec2(rB, axis); // float\n    const perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n    const s1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), perp); // float\n    const s2 = Vec2.crossVec2Vec2(rB, perp); // float\n\n    let impulse = new Vec3();\n    const C1 = Vec2.zero(); // Vec2\n    C1.x = Vec2.dot(perp, d);\n    C1.y = aB - aA - this.m_referenceAngle;\n\n    let linearError = Math.abs(C1.x); // float\n    const angularError = Math.abs(C1.y); // float\n\n    const linearSlop = Settings.linearSlop;\n    const maxLinearCorrection = Settings.maxLinearCorrection;\n\n    let active = false; // bool\n    let C2 = 0.0; // float\n    if (this.m_enableLimit) {\n\n      const translation = Vec2.dot(axis, d); // float\n      if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n        // Prevent large angular corrections\n        C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n        linearError = Math.max(linearError, Math.abs(translation));\n        active = true;\n\n      } else if (translation <= this.m_lowerTranslation) {\n        // Prevent large linear corrections and allow some slop.\n        C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n            -maxLinearCorrection, 0.0);\n        linearError = Math\n            .max(linearError, this.m_lowerTranslation - translation);\n        active = true;\n\n      } else if (translation >= this.m_upperTranslation) {\n        // Prevent large linear corrections and allow some slop.\n        C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n            maxLinearCorrection);\n        linearError = Math\n            .max(linearError, translation - this.m_upperTranslation);\n        active = true;\n      }\n    }\n\n    if (active) {\n      const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n      const k12 = iA * s1 + iB * s2; // float\n      const k13 = iA * s1 * a1 + iB * s2 * a2; // float\n      let k22 = iA + iB; // float\n      if (k22 == 0.0) {\n        // For fixed rotation\n        k22 = 1.0;\n      }\n      const k23 = iA * a1 + iB * a2; // float\n      const k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n      const K = new Mat33();\n      K.ex.set(k11, k12, k13);\n      K.ey.set(k12, k22, k23);\n      K.ez.set(k13, k23, k33);\n\n      const C = new Vec3();\n      C.x = C1.x;\n      C.y = C1.y;\n      C.z = C2;\n\n      impulse = K.solve33(Vec3.neg(C));\n    } else {\n      const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n      const k12 = iA * s1 + iB * s2; // float\n      let k22 = iA + iB; // float\n      if (k22 == 0.0) {\n        k22 = 1.0;\n      }\n\n      const K = new Mat22();\n      K.ex.setNum(k11, k12);\n      K.ey.setNum(k12, k22);\n\n      const impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n      impulse.x = impulse1.x;\n      impulse.y = impulse1.y;\n      impulse.z = 0.0;\n    }\n\n    const P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n    const LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n    const LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n    cA.subMul(mA, P);\n    aA -= iA * LA;\n    cB.addMul(mB, P);\n    aB += iB * LB;\n\n    this.m_bodyA.c_position.c = cA;\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c = cB;\n    this.m_bodyB.c_position.a = aB;\n\n    return linearError <= Settings.linearSlop\n        && angularError <= Settings.angularSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { RevoluteJoint } from './RevoluteJoint';\nimport { PrismaticJoint } from './PrismaticJoint';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Gear joint definition.\n */\nexport interface GearJointOpt extends JointOpt {\n  /**\n   * The gear ratio. See {@link GearJoint} for explanation.\n   */\n  ratio?: number;\n}\n/**\n * Gear joint definition.\n */\nexport interface GearJointDef extends JointDef, GearJointOpt {\n  /**\n   * The first revolute/prismatic joint attached to the gear joint.\n   */\n  joint1: RevoluteJoint | PrismaticJoint;\n  /**\n   * The second prismatic/revolute joint attached to the gear joint.\n   */\n  joint2: RevoluteJoint | PrismaticJoint;\n}\n\nconst DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n *\n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n *\n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n */\nexport class GearJoint extends Joint {\n  static TYPE = 'gear-joint' as const;\n\n  /** @internal */ m_type: 'gear-joint';\n  /** @internal */ m_joint1: RevoluteJoint | PrismaticJoint;\n  /** @internal */ m_joint2: RevoluteJoint | PrismaticJoint;\n  /** @internal */ m_type1: 'revolute-joint' | 'prismatic-joint';\n  /** @internal */ m_type2: 'revolute-joint' | 'prismatic-joint';\n  /** @internal */ m_bodyC: Body;\n  /** @internal */ m_localAnchorC: Vec2;\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_referenceAngleA: number;\n  /** @internal */ m_localAxisC: Vec2;\n  /** @internal */ m_bodyD: Body;\n  /** @internal */ m_localAnchorD: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_referenceAngleB: number;\n  /** @internal */ m_localAxisD: Vec2;\n  /** @internal */ m_ratio: number;\n  /** @internal */ m_constant: number;\n  /** @internal */ m_impulse: number;\n\n  // Solver temp\n  /** @internal */ m_lcA: Vec2;\n  /** @internal */ m_lcB: Vec2;\n  /** @internal */ m_lcC: Vec2;\n  /** @internal */ m_lcD: Vec2;\n  /** @internal */ m_mA: number;\n  /** @internal */ m_mB: number;\n  /** @internal */ m_mC: number;\n  /** @internal */ m_mD: number;\n  /** @internal */ m_iA: number;\n  /** @internal */ m_iB: number;\n  /** @internal */ m_iC: number;\n  /** @internal */ m_iD: number;\n  /** @internal */ m_JvAC: Vec2;\n  /** @internal */ m_JvBD: Vec2;\n  /** @internal */ m_JwA: number;\n  /** @internal */ m_JwB: number;\n  /** @internal */ m_JwC: number;\n  /** @internal */ m_JwD: number;\n  /** @internal */ m_mass: number;\n\n  constructor(def: GearJointDef);\n  constructor(def: GearJointOpt, bodyA: Body, bodyB: Body, joint1: RevoluteJoint | PrismaticJoint, joint2: RevoluteJoint | PrismaticJoint, ratio?: number);\n  constructor(def: GearJointDef, bodyA?: Body, bodyB?: Body, joint1?: RevoluteJoint | PrismaticJoint, joint2?: RevoluteJoint | PrismaticJoint, ratio?: number) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof GearJoint)) {\n      return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = GearJoint.TYPE;\n\n    _ASSERT && console.assert(joint1.m_type === RevoluteJoint.TYPE\n        || joint1.m_type === PrismaticJoint.TYPE);\n    _ASSERT && console.assert(joint2.m_type === RevoluteJoint.TYPE\n        || joint2.m_type === PrismaticJoint.TYPE);\n\n    this.m_joint1 = joint1 ? joint1 : def.joint1;\n    this.m_joint2 = joint2 ? joint2 : def.joint2;\n    this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n    this.m_type1 = this.m_joint1.getType() as 'revolute-joint' | 'prismatic-joint';\n    this.m_type2 = this.m_joint2.getType() as 'revolute-joint' | 'prismatic-joint';\n\n    // joint1 connects body A to body C\n    // joint2 connects body B to body D\n\n    let coordinateA: number;\n    let coordinateB: number;\n\n    // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n    this.m_bodyC = this.m_joint1.getBodyA();\n    this.m_bodyA = this.m_joint1.getBodyB();\n\n    // Get geometry of joint1\n    const xfA = this.m_bodyA.m_xf;\n    const aA = this.m_bodyA.m_sweep.a;\n    const xfC = this.m_bodyC.m_xf;\n    const aC = this.m_bodyC.m_sweep.a;\n\n    if (this.m_type1 === RevoluteJoint.TYPE) {\n      const revolute = this.m_joint1 as RevoluteJoint;\n      this.m_localAnchorC = revolute.m_localAnchorA;\n      this.m_localAnchorA = revolute.m_localAnchorB;\n      this.m_referenceAngleA = revolute.m_referenceAngle;\n      this.m_localAxisC = Vec2.zero();\n\n      coordinateA = aA - aC - this.m_referenceAngleA;\n    } else {\n      const prismatic = this.m_joint1 as PrismaticJoint;\n      this.m_localAnchorC = prismatic.m_localAnchorA;\n      this.m_localAnchorA = prismatic.m_localAnchorB;\n      this.m_referenceAngleA = prismatic.m_referenceAngle;\n      this.m_localAxisC = prismatic.m_localXAxisA;\n\n      const pC = this.m_localAnchorC;\n      const pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mulVec2(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n      coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n    }\n\n    this.m_bodyD = this.m_joint2.getBodyA();\n    this.m_bodyB = this.m_joint2.getBodyB();\n\n    // Get geometry of joint2\n    const xfB = this.m_bodyB.m_xf;\n    const aB = this.m_bodyB.m_sweep.a;\n    const xfD = this.m_bodyD.m_xf;\n    const aD = this.m_bodyD.m_sweep.a;\n\n    if (this.m_type2 === RevoluteJoint.TYPE) {\n      const revolute = this.m_joint2 as RevoluteJoint;\n      this.m_localAnchorD = revolute.m_localAnchorA;\n      this.m_localAnchorB = revolute.m_localAnchorB;\n      this.m_referenceAngleB = revolute.m_referenceAngle;\n      this.m_localAxisD = Vec2.zero();\n\n      coordinateB = aB - aD - this.m_referenceAngleB;\n    } else {\n      const prismatic = this.m_joint2 as PrismaticJoint;\n      this.m_localAnchorD = prismatic.m_localAnchorA;\n      this.m_localAnchorB = prismatic.m_localAnchorB;\n      this.m_referenceAngleB = prismatic.m_referenceAngle;\n      this.m_localAxisD = prismatic.m_localXAxisA;\n\n      const pD = this.m_localAnchorD;\n      const pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mulVec2(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n      coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n    }\n\n    this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n    this.m_impulse = 0.0;\n\n    // Gear Joint:\n    // C0 = (coordinate1 + ratio * coordinate2)_initial\n    // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n    // J = [J1 ratio * J2]\n    // K = J * invM * JT\n    // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n    //\n    // Revolute:\n    // coordinate = rotation\n    // Cdot = angularVelocity\n    // J = [0 0 1]\n    // K = J * invM * JT = invI\n    //\n    // Prismatic:\n    // coordinate = dot(p - pg, ug)\n    // Cdot = dot(v + cross(w, r), ug)\n    // J = [ug cross(r, ug)]\n    // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      joint1: this.m_joint1,\n      joint2: this.m_joint2,\n      ratio: this.m_ratio,\n\n      // _constant: this.m_constant,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): GearJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    data.joint1 = restore(Joint, data.joint1, world);\n    data.joint2 = restore(Joint, data.joint2, world);\n    const joint = new GearJoint(data);\n    // if (data._constant) joint.m_constant = data._constant;\n    return joint;\n  }\n\n  /**\n   * Get the first joint.\n   */\n  getJoint1(): Joint {\n    return this.m_joint1;\n  }\n\n  /**\n   * Get the second joint.\n   */\n  getJoint2(): Joint {\n    return this.m_joint2;\n  }\n\n  /**\n   * Set the gear ratio.\n   */\n  setRatio(ratio: number): void {\n    _ASSERT && console.assert(Math.isFinite(ratio));\n    this.m_ratio = ratio;\n  }\n\n  /**\n   * Get the gear ratio.\n   */\n  getRatio(): number {\n    return this.m_ratio;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(this.m_impulse, this.m_JvAC).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    const L = this.m_impulse * this.m_JwA; // float\n    return inv_dt * L;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n    this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n    this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n    this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n    this.m_mA = this.m_bodyA.m_invMass;\n    this.m_mB = this.m_bodyB.m_invMass;\n    this.m_mC = this.m_bodyC.m_invMass;\n    this.m_mD = this.m_bodyD.m_invMass;\n    this.m_iA = this.m_bodyA.m_invI;\n    this.m_iB = this.m_bodyB.m_invI;\n    this.m_iC = this.m_bodyC.m_invI;\n    this.m_iD = this.m_bodyD.m_invI;\n\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const aC = this.m_bodyC.c_position.a;\n    const vC = this.m_bodyC.c_velocity.v;\n    let wC = this.m_bodyC.c_velocity.w;\n\n    const aD = this.m_bodyD.c_position.a;\n    const vD = this.m_bodyD.c_velocity.v;\n    let wD = this.m_bodyD.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n    const qC = Rot.neo(aC);\n    const qD = Rot.neo(aD);\n\n    this.m_mass = 0.0;\n\n    if (this.m_type1 == RevoluteJoint.TYPE) {\n      this.m_JvAC = Vec2.zero();\n      this.m_JwA = 1.0;\n      this.m_JwC = 1.0;\n      this.m_mass += this.m_iA + this.m_iC;\n    } else {\n      const u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n      const rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n      const rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n      this.m_JvAC = u;\n      this.m_JwC = Vec2.crossVec2Vec2(rC, u);\n      this.m_JwA = Vec2.crossVec2Vec2(rA, u);\n      this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n    }\n\n    if (this.m_type2 == RevoluteJoint.TYPE) {\n      this.m_JvBD = Vec2.zero();\n      this.m_JwB = this.m_ratio;\n      this.m_JwD = this.m_ratio;\n      this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n    } else {\n      const u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n      const rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n      const rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n      this.m_JvBD = Vec2.mulNumVec2(this.m_ratio, u);\n      this.m_JwD = this.m_ratio * Vec2.crossVec2Vec2(rD, u);\n      this.m_JwB = this.m_ratio * Vec2.crossVec2Vec2(rB, u);\n      this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n    }\n\n    // Compute effective mass.\n    this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n    if (step.warmStarting) {\n      vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n      wA += this.m_iA * this.m_impulse * this.m_JwA;\n\n      vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n      wB += this.m_iB * this.m_impulse * this.m_JwB;\n\n      vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n      wC -= this.m_iC * this.m_impulse * this.m_JwC;\n\n      vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n      wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n    } else {\n      this.m_impulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n    this.m_bodyC.c_velocity.v.setVec2(vC);\n    this.m_bodyC.c_velocity.w = wC;\n    this.m_bodyD.c_velocity.v.setVec2(vD);\n    this.m_bodyD.c_velocity.w = wD;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n    const vC = this.m_bodyC.c_velocity.v;\n    let wC = this.m_bodyC.c_velocity.w;\n    const vD = this.m_bodyD.c_velocity.v;\n    let wD = this.m_bodyD.c_velocity.w;\n\n    let Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n        + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n    Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n        + (this.m_JwB * wB - this.m_JwD * wD);\n\n    const impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    vA.addMul(this.m_mA * impulse, this.m_JvAC);\n    wA += this.m_iA * impulse * this.m_JwA;\n    vB.addMul(this.m_mB * impulse, this.m_JvBD);\n    wB += this.m_iB * impulse * this.m_JwB;\n    vC.subMul(this.m_mC * impulse, this.m_JvAC);\n    wC -= this.m_iC * impulse * this.m_JwC;\n    vD.subMul(this.m_mD * impulse, this.m_JvBD);\n    wD -= this.m_iD * impulse * this.m_JwD;\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n    this.m_bodyC.c_velocity.v.setVec2(vC);\n    this.m_bodyC.c_velocity.w = wC;\n    this.m_bodyD.c_velocity.v.setVec2(vD);\n    this.m_bodyD.c_velocity.w = wD;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n    const cC = this.m_bodyC.c_position.c;\n    let aC = this.m_bodyC.c_position.a;\n    const cD = this.m_bodyD.c_position.c;\n    let aD = this.m_bodyD.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n    const qC = Rot.neo(aC);\n    const qD = Rot.neo(aD);\n\n    const linearError = 0.0;\n\n    let coordinateA: number;\n    let coordinateB: number;\n\n    let JvAC: Vec2;\n    let JvBD: Vec2;\n    let JwA: number;\n    let JwB: number;\n    let JwC: number;\n    let JwD: number;\n    let mass = 0.0;\n\n    if (this.m_type1 == RevoluteJoint.TYPE) {\n      JvAC = Vec2.zero();\n      JwA = 1.0;\n      JwC = 1.0;\n      mass += this.m_iA + this.m_iC;\n\n      coordinateA = aA - aC - this.m_referenceAngleA;\n    } else {\n      const u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n      const rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n      const rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n      JvAC = u;\n      JwC = Vec2.crossVec2Vec2(rC, u);\n      JwA = Vec2.crossVec2Vec2(rA, u);\n      mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n      const pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n      const pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n      coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n    }\n\n    if (this.m_type2 == RevoluteJoint.TYPE) {\n      JvBD = Vec2.zero();\n      JwB = this.m_ratio;\n      JwD = this.m_ratio;\n      mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n      coordinateB = aB - aD - this.m_referenceAngleB;\n    } else {\n      const u = Rot.mulVec2(qD, this.m_localAxisD);\n      const rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n      const rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n      JvBD = Vec2.mulNumVec2(this.m_ratio, u);\n      JwD = this.m_ratio * Vec2.crossVec2Vec2(rD, u);\n      JwB = this.m_ratio * Vec2.crossVec2Vec2(rB, u);\n      mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n          * JwD * JwD + this.m_iB * JwB * JwB;\n\n      const pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n      const pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n      coordinateB = Vec2.dot(pB, this.m_localAxisD)\n          - Vec2.dot(pD, this.m_localAxisD);\n    }\n\n    const C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n    let impulse = 0.0; // float\n    if (mass > 0.0) {\n      impulse = -C / mass;\n    }\n\n    cA.addMul(this.m_mA * impulse, JvAC);\n    aA += this.m_iA * impulse * JwA;\n    cB.addMul(this.m_mB * impulse, JvBD);\n    aB += this.m_iB * impulse * JwB;\n    cC.subMul(this.m_mC * impulse, JvAC);\n    aC -= this.m_iC * impulse * JwC;\n    cD.subMul(this.m_mD * impulse, JvBD);\n    aD -= this.m_iD * impulse * JwD;\n\n    this.m_bodyA.c_position.c.setVec2(cA);\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c.setVec2(cB);\n    this.m_bodyB.c_position.a = aB;\n    this.m_bodyC.c_position.c.setVec2(cC);\n    this.m_bodyC.c_position.a = aC;\n    this.m_bodyD.c_position.c.setVec2(cD);\n    this.m_bodyD.c_position.a = aD;\n\n    // TODO_ERIN not implemented\n    return linearError < Settings.linearSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Mat22 } from '../../common/Mat22';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Motor joint definition.\n */\nexport interface MotorJointOpt extends JointOpt {\n  /**\n   * The bodyB angle minus bodyA angle in radians.\n   */\n  angularOffset?: number;\n  /**\n   * The maximum motor force in N.\n   */\n  maxForce?: number;\n  /**\n   * The maximum motor torque in N-m.\n   */\n  maxTorque?: number;\n  /**\n   * Position correction factor in the range [0,1].\n   */\n  correctionFactor?: number;\n  /**\n   * Position of bodyB minus the position of bodyA, in bodyA's frame, in meters.\n   */\n  linearOffset?: Vec2;\n}\n/**\n * Motor joint definition.\n */\nexport interface MotorJointDef extends JointDef, MotorJointOpt {\n}\n\nconst DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n */\nexport class MotorJoint extends Joint {\n  static TYPE = 'motor-joint' as const;\n\n  /** @internal */ m_type: 'motor-joint';\n  /** @internal */ m_linearOffset: Vec2;\n  /** @internal */ m_angularOffset: number;\n  /** @internal */ m_linearImpulse: Vec2;\n  /** @internal */ m_angularImpulse: number;\n  /** @internal */ m_maxForce: number;\n  /** @internal */ m_maxTorque: number;\n  /** @internal */ m_correctionFactor: number;\n\n  // Solver temp\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_linearError: Vec2;\n  /** @internal */ m_angularError: number;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_linearMass: Mat22;\n  /** @internal */ m_angularMass: number;\n\n  constructor(def: MotorJointDef);\n  constructor(def: MotorJointOpt, bodyA: Body, bodyB: Body);\n  constructor(def: MotorJointDef | MotorJointOpt, bodyA?: Body, bodyB?: Body) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof MotorJoint)) {\n      return new MotorJoint(def, bodyA, bodyB);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = MotorJoint.TYPE;\n\n    this.m_linearOffset = Math.isFinite(def.linearOffset) ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n    this.m_angularOffset = Math.isFinite(def.angularOffset) ? def.angularOffset : bodyB.getAngle() - bodyA.getAngle();\n\n    this.m_linearImpulse = Vec2.zero();\n    this.m_angularImpulse = 0.0;\n\n    this.m_maxForce = def.maxForce;\n    this.m_maxTorque = def.maxTorque;\n    this.m_correctionFactor = def.correctionFactor;\n\n    // Point-to-point constraint\n    // Cdot = v2 - v1\n    // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n    // J = [-I -r1_skew I r2_skew ]\n    // Identity used:\n    // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n    // Angle constraint\n    // Cdot = w2 - w1\n    // J = [0 0 -1 0 0 1]\n    // K = invI1 + invI2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      maxForce: this.m_maxForce,\n      maxTorque: this.m_maxTorque,\n      correctionFactor: this.m_correctionFactor,\n\n      linearOffset: this.m_linearOffset,\n      angularOffset: this.m_angularOffset,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): MotorJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new MotorJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {}): void {\n  }\n\n  /**\n   * Set the maximum friction force in N.\n   */\n  setMaxForce(force: number): void {\n    _ASSERT && console.assert(Math.isFinite(force) && force >= 0.0);\n    this.m_maxForce = force;\n  }\n\n  /**\n   * Get the maximum friction force in N.\n   */\n  getMaxForce(): number {\n    return this.m_maxForce;\n  }\n\n  /**\n   * Set the maximum friction torque in N*m.\n   */\n  setMaxTorque(torque: number): void {\n    _ASSERT && console.assert(Math.isFinite(torque) && torque >= 0.0);\n    this.m_maxTorque = torque;\n  }\n\n  /**\n   * Get the maximum friction torque in N*m.\n   */\n  getMaxTorque(): number {\n    return this.m_maxTorque;\n  }\n\n  /**\n   * Set the position correction factor in the range [0,1].\n   */\n  setCorrectionFactor(factor: number): void {\n    _ASSERT && console.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n    this.m_correctionFactor = factor;\n  }\n\n  /**\n   * Get the position correction factor in the range [0,1].\n   */\n  getCorrectionFactor(): number {\n    return this.m_correctionFactor;\n  }\n\n  /**\n   * Set/get the target linear offset, in frame A, in meters.\n   */\n  setLinearOffset(linearOffset: Vec2): void {\n    if (linearOffset.x != this.m_linearOffset.x\n        || linearOffset.y != this.m_linearOffset.y) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_linearOffset = linearOffset;\n    }\n  }\n\n  getLinearOffset(): Vec2 {\n    return this.m_linearOffset;\n  }\n\n  /**\n   * Set/get the target angular offset, in radians.\n   */\n  setAngularOffset(angularOffset: number): void {\n    if (angularOffset != this.m_angularOffset) {\n      this.m_bodyA.setAwake(true);\n      this.m_bodyB.setAwake(true);\n      this.m_angularOffset = angularOffset;\n    }\n  }\n\n  getAngularOffset(): number {\n    return this.m_angularOffset;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getPosition();\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getPosition();\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(inv_dt, this.m_linearImpulse);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_angularImpulse;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    // Compute the effective mass matrix.\n    this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n    // J = [-I -r1_skew I r2_skew]\n    // [ 0 -1 0 1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n    // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n    // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const K = new Mat22();\n    K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y * this.m_rB.y;\n    K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x * this.m_rB.x;\n\n    this.m_linearMass = K.getInverse();\n\n    this.m_angularMass = iA + iB;\n    if (this.m_angularMass > 0.0) {\n      this.m_angularMass = 1.0 / this.m_angularMass;\n    }\n\n    this.m_linearError = Vec2.zero();\n    this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n    this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n    this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n    this.m_angularError = aB - aA - this.m_angularOffset;\n\n    if (step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_linearImpulse.mul(step.dtRatio);\n      this.m_angularImpulse *= step.dtRatio;\n\n      const P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_angularImpulse);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_angularImpulse);\n\n    } else {\n      this.m_linearImpulse.setZero();\n      this.m_angularImpulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const h = step.dt;\n    const inv_h = step.inv_dt;\n\n    // Solve angular friction\n    {\n      const Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n      let impulse = -this.m_angularMass * Cdot;\n\n      const oldImpulse = this.m_angularImpulse;\n      const maxImpulse = h * this.m_maxTorque;\n      this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n          -maxImpulse, maxImpulse);\n      impulse = this.m_angularImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve linear friction\n    {\n      const Cdot = Vec2.zero();\n      Cdot.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n      Cdot.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n      Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n      let impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n      const oldImpulse = Vec2.clone(this.m_linearImpulse);\n      this.m_linearImpulse.add(impulse);\n\n      const maxImpulse = h * this.m_maxForce;\n\n      this.m_linearImpulse.clamp(maxImpulse);\n\n      impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n      vA.subMul(mA, impulse);\n      wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n\n      vB.addMul(mB, impulse);\n      wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    return true;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { math as Math } from '../../common/Math';\nimport { Vec2, Vec2Value } from '../../common/Vec2';\nimport { Mat22 } from '../../common/Mat22';\nimport { Rot } from '../../common/Rot';\nimport { Transform } from '../../common/Transform';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n */\nexport interface MouseJointOpt extends JointOpt {\n  /**\n   * [maxForce = 0.0] The maximum constraint force that can be exerted to move\n   * the candidate body. Usually you will express as some multiple of the\n   * weight (multiplier * mass * gravity).\n   */\n  maxForce?: number;\n  /**\n   * [frequencyHz = 5.0] The response speed.\n   */\n  frequencyHz?: number;\n  /**\n   * [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n   * damping.\n   */\n  dampingRatio?: number;\n}\n/**\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n */\nexport interface MouseJointDef extends JointDef, MouseJointOpt {\n  /**\n   * The initial world target point. This is assumed to coincide with the body\n   * anchor initially.\n   */\n  target: Vec2Value;\n}\n\nconst DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n *\n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n */\nexport class MouseJoint extends Joint {\n  static TYPE = 'mouse-joint' as const;\n\n  /** @internal */ m_type: 'mouse-joint';\n  /** @internal */ m_targetA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_maxForce: number;\n  /** @internal */ m_impulse: Vec2;\n  /** @internal */ m_frequencyHz: number;\n  /** @internal */ m_dampingRatio: number;\n  /** @internal */ m_beta: number;\n  /** @internal */ m_gamma: number;\n  // Solver temp\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_mass: Mat22;\n  /** @internal */ m_C: Vec2;\n\n  constructor(def: MouseJointDef);\n  constructor(def: MouseJointOpt, bodyA: Body, bodyB: Body, target: Vec2);\n  constructor(def: MouseJointDef, bodyA?: Body, bodyB?: Body, target?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof MouseJoint)) {\n      return new MouseJoint(def, bodyA, bodyB, target);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = MouseJoint.TYPE;\n\n    _ASSERT && console.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n    _ASSERT && console.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n    _ASSERT && console.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n    if (Vec2.isValid(target)) {\n      this.m_targetA = Vec2.clone(target);\n    } else if (Vec2.isValid(def.target)) {\n      this.m_targetA = Vec2.clone(def.target);\n    } else {\n      this.m_targetA = Vec2.zero();\n    }\n\n    this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n    this.m_maxForce = def.maxForce;\n    this.m_impulse = Vec2.zero();\n\n    this.m_frequencyHz = def.frequencyHz;\n    this.m_dampingRatio = def.dampingRatio;\n\n    this.m_beta = 0.0;\n    this.m_gamma = 0.0;\n\n    // Solver temp\n    this.m_rB = Vec2.zero();\n    this.m_localCenterB = Vec2.zero();\n    this.m_invMassB = 0.0;\n    this.m_invIB = 0.0;\n    this.m_mass = new Mat22();\n    this.m_C = Vec2.zero();\n\n    // p = attached point, m = mouse point\n    // C = p - m\n    // Cdot = v\n    // = v + cross(w, r)\n    // J = [I r_skew]\n    // Identity used:\n    // w k % (rx i + ry j) = w * (-ry i + rx j)\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      target: this.m_targetA,\n      maxForce: this.m_maxForce,\n      frequencyHz: this.m_frequencyHz,\n      dampingRatio: this.m_dampingRatio,\n\n      _localAnchorB: this.m_localAnchorB,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): MouseJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    data.target = Vec2.clone(data.target);\n    const joint = new MouseJoint(data);\n    if (data._localAnchorB) {\n      joint.m_localAnchorB = data._localAnchorB;\n    }\n    return joint;\n  }\n\n  /**\n   * Use this to update the target point.\n   */\n  setTarget(target: Vec2Value): void {\n    if (this.m_bodyB.isAwake() == false) {\n      this.m_bodyB.setAwake(true);\n    }\n    this.m_targetA = Vec2.clone(target);\n  }\n\n  getTarget(): Vec2 {\n    return this.m_targetA;\n  }\n\n  /**\n   * Set the maximum force in Newtons.\n   */\n  setMaxForce(force: number): void {\n    this.m_maxForce = force;\n  }\n\n  /**\n   * Get the maximum force in Newtons.\n   */\n  getMaxForce(): number {\n    return this.m_maxForce;\n  }\n\n  /**\n   * Set the frequency in Hertz.\n   */\n  setFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  /**\n   * Get the frequency in Hertz.\n   */\n  getFrequency(): number {\n    return this.m_frequencyHz;\n  }\n\n  /**\n   * Set the damping ratio (dimensionless).\n   */\n  setDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  /**\n   * Get the damping ratio (dimensionless).\n   */\n  getDampingRatio(): number {\n    return this.m_dampingRatio;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return Vec2.clone(this.m_targetA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(inv_dt, this.m_impulse);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * 0.0;\n  }\n\n  /**\n   * Shift the origin for any points stored in world coordinates.\n   */\n  shiftOrigin(newOrigin: Vec2Value): void {\n    this.m_targetA.sub(newOrigin);\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const position = this.m_bodyB.c_position;\n    const velocity = this.m_bodyB.c_velocity;\n\n    const cB = position.c;\n    const aB = position.a;\n    const vB = velocity.v;\n    let wB = velocity.w;\n\n    const qB = Rot.neo(aB);\n\n    const mass = this.m_bodyB.getMass();\n\n    // Frequency\n    const omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    const d = 2.0 * mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    const k = mass * (omega * omega);\n\n    // magic formulas\n    // gamma has units of inverse mass.\n    // beta has units of inverse time.\n    const h = step.dt;\n    _ASSERT && console.assert(d + h * k > Math.EPSILON);\n    this.m_gamma = h * (d + h * k);\n    if (this.m_gamma != 0.0) {\n      this.m_gamma = 1.0 / this.m_gamma;\n    }\n    this.m_beta = h * k * this.m_gamma;\n\n    // Compute the effective mass matrix.\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n    // invI2 * skew(r2)]\n    // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n    // -r1.x*r1.y]\n    // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n    const K = new Mat22();\n    K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n        + this.m_gamma;\n    K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n        + this.m_gamma;\n\n    this.m_mass = K.getInverse();\n\n    this.m_C.setVec2(cB);\n    this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n    this.m_C.mul(this.m_beta);\n\n    // Cheat with some damping\n    wB *= 0.98;\n\n    if (step.warmStarting) {\n      this.m_impulse.mul(step.dtRatio);\n      vB.addMul(this.m_invMassB, this.m_impulse);\n      wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, this.m_impulse);\n\n    } else {\n      this.m_impulse.setZero();\n    }\n\n    velocity.v.setVec2(vB);\n    velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const velocity = this.m_bodyB.c_velocity;\n    const vB = Vec2.clone(velocity.v);\n    let wB = velocity.w;\n\n    // Cdot = v + cross(w, r)\n\n    const Cdot = Vec2.crossNumVec2(wB, this.m_rB);\n    Cdot.add(vB);\n\n    Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n    Cdot.neg();\n\n    let impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n    const oldImpulse = Vec2.clone(this.m_impulse);\n    this.m_impulse.add(impulse);\n    const maxImpulse = step.dt * this.m_maxForce;\n    this.m_impulse.clamp(maxImpulse);\n    impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n    vB.addMul(this.m_invMassB, impulse);\n    wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n\n    velocity.v.setVec2(vB);\n    velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    return true;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PulleyJointOpt extends JointOpt {\n}\n/**\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n */\nexport interface PulleyJointDef extends JointDef, PulleyJointOpt {\n  /**\n   * The first ground anchor in world coordinates. This point never moves.\n   */\n  groundAnchorA: Vec2;\n  /**\n   * The second ground anchor in world coordinates. This point never moves.\n   */\n  groundAnchorB: Vec2;\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n  /**\n   * The reference length for the segment attached to bodyA.\n   */\n  lengthA: number;\n  /**\n   * The reference length for the segment attached to bodyB.\n   */\n  lengthB: number;\n  /**\n   * The pulley ratio, used to simulate a block-and-tackle.\n   */\n  ratio: number;\n}\n\nconst DEFAULTS = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n *\n * Yes, the force transmitted is scaled by the ratio.\n *\n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n */\nexport class PulleyJoint extends Joint {\n  static TYPE = 'pulley-joint' as const;\n  // static MIN_PULLEY_LENGTH: number = 2.0; // TODO where this is used?\n\n  /** @internal */ m_type: 'pulley-joint';\n  /** @internal */ m_groundAnchorA: Vec2;\n  /** @internal */ m_groundAnchorB: Vec2;\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_lengthA: number;\n  /** @internal */ m_lengthB: number;\n  /** @internal */ m_ratio: number;\n  /** @internal */ m_constant: number;\n  /** @internal */ m_impulse: number;\n\n  // Solver temp\n  /** @internal */ m_uA: Vec2;\n  /** @internal */ m_uB: Vec2;\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_mass: number;\n\n  constructor(def: PulleyJointDef);\n  constructor(def: PulleyJointOpt, bodyA: Body, bodyB: Body, groundA: Vec2, groundB: Vec2, anchorA: Vec2, anchorB: Vec2, ratio: number);\n  constructor(def: PulleyJointDef, bodyA?: Body, bodyB?: Body, groundA?: Vec2, groundB?: Vec2, anchorA?: Vec2, anchorB?: Vec2, ratio?: number) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof PulleyJoint)) {\n      return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = PulleyJoint.TYPE;\n    this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n    this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n    this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n    this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n    this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n    this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n    this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n    _ASSERT && console.assert(ratio > Math.EPSILON);\n\n    this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n    this.m_impulse = 0.0;\n\n    // Pulley:\n    // length1 = norm(p1 - s1)\n    // length2 = norm(p2 - s2)\n    // C0 = (length1 + ratio * length2)_initial\n    // C = C0 - (length1 + ratio * length2)\n    // u1 = (p1 - s1) / norm(p1 - s1)\n    // u2 = (p2 - s2) / norm(p2 - s2)\n    // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n    // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n    // K = J * invM * JT\n    // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n    // cross(r2, u2)^2)\n  }\n\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      groundAnchorA: this.m_groundAnchorA,\n      groundAnchorB: this.m_groundAnchorB,\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      lengthA: this.m_lengthA,\n      lengthB: this.m_lengthB,\n      ratio: this.m_ratio,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): PulleyJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new PulleyJoint(data);\n    return joint;\n  }\n\n  /**\n   * Get the first ground anchor.\n   */\n  getGroundAnchorA(): Vec2 {\n    return this.m_groundAnchorA;\n  }\n\n  /**\n   * Get the second ground anchor.\n   */\n  getGroundAnchorB(): Vec2 {\n    return this.m_groundAnchorB;\n  }\n\n  /**\n   * Get the current length of the segment attached to bodyA.\n   */\n  getLengthA(): number {\n    return this.m_lengthA;\n  }\n\n  /**\n   * Get the current length of the segment attached to bodyB.\n   */\n  getLengthB(): number {\n    return this.m_lengthB;\n  }\n\n  /**\n   * Get the pulley ratio.\n   */\n  getRatio(): number {\n    return this.m_ratio;\n  }\n\n  /**\n   * Get the current length of the segment attached to bodyA.\n   */\n  getCurrentLengthA(): number {\n    const p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n    const s = this.m_groundAnchorA;\n    return Vec2.distance(p, s);\n  }\n\n  /**\n   * Get the current length of the segment attached to bodyB.\n   */\n  getCurrentLengthB(): number {\n    const p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n    const s = this.m_groundAnchorB;\n    return Vec2.distance(p, s);\n  }\n\n  /**\n   * Shift the origin for any points stored in world coordinates.\n   *\n   * @param newOrigin\n   */\n  shiftOrigin(newOrigin: Vec2): void {\n    this.m_groundAnchorA.sub(newOrigin);\n    this.m_groundAnchorB.sub(newOrigin);\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(this.m_impulse, this.m_uB).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return 0.0;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // Get the pulley axes.\n    this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n    this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n    const lengthA = this.m_uA.length();\n    const lengthB = this.m_uB.length();\n\n    if (lengthA > 10.0 * Settings.linearSlop) {\n      this.m_uA.mul(1.0 / lengthA);\n    } else {\n      this.m_uA.setZero();\n    }\n\n    if (lengthB > 10.0 * Settings.linearSlop) {\n      this.m_uB.mul(1.0 / lengthB);\n    } else {\n      this.m_uB.setZero();\n    }\n\n    // Compute effective mass.\n    const ruA = Vec2.crossVec2Vec2(this.m_rA, this.m_uA); // float\n    const ruB = Vec2.crossVec2Vec2(this.m_rB, this.m_uB); // float\n\n    const mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n    const mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n    this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n\n    if (step.warmStarting) {\n      // Scale impulses to support variable time steps.\n      this.m_impulse *= step.dtRatio;\n\n      // Warm starting.\n      const PA = Vec2.mulNumVec2(-this.m_impulse, this.m_uA);\n      const PB = Vec2.mulNumVec2(-this.m_ratio * this.m_impulse, this.m_uB);\n\n      vA.addMul(this.m_invMassA, PA);\n      wA += this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, PA);\n\n      vB.addMul(this.m_invMassB, PB);\n      wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, PB);\n\n    } else {\n      this.m_impulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const vpA = Vec2.add(vA, Vec2.crossNumVec2(wA, this.m_rA));\n    const vpB = Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB));\n\n    const Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n        * Vec2.dot(this.m_uB, vpB); // float\n    const impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    const PA = Vec2.mulNumVec2(-impulse, this.m_uA); // Vec2\n    const PB = Vec2.mulNumVec2(-this.m_ratio * impulse, this.m_uB); // Vec2\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, PA);\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, PB);\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // Get the pulley axes.\n    const uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n    const uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n    const lengthA = uA.length();\n    const lengthB = uB.length();\n\n    if (lengthA > 10.0 * Settings.linearSlop) {\n      uA.mul(1.0 / lengthA);\n    } else {\n      uA.setZero();\n    }\n\n    if (lengthB > 10.0 * Settings.linearSlop) {\n      uB.mul(1.0 / lengthB);\n    } else {\n      uB.setZero();\n    }\n\n    // Compute effective mass.\n    const ruA = Vec2.crossVec2Vec2(rA, uA);\n    const ruB = Vec2.crossVec2Vec2(rB, uB);\n\n    const mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n    const mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n    let mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n    if (mass > 0.0) {\n      mass = 1.0 / mass;\n    }\n\n    const C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n    const linearError = Math.abs(C); // float\n\n    const impulse = -mass * C; // float\n\n    const PA = Vec2.mulNumVec2(-impulse, uA); // Vec2\n    const PB = Vec2.mulNumVec2(-this.m_ratio * impulse, uB); // Vec2\n\n    cA.addMul(this.m_invMassA, PA);\n    aA += this.m_invIA * Vec2.crossVec2Vec2(rA, PA);\n    cB.addMul(this.m_invMassB, PB);\n    aB += this.m_invIB * Vec2.crossVec2Vec2(rB, PB);\n\n    this.m_bodyA.c_position.c = cA;\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c = cB;\n    this.m_bodyB.c_position.a = aB;\n\n    return linearError < Settings.linearSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\nconst inactiveLimit = 0;\nconst atLowerLimit = 1;\nconst atUpperLimit = 2;\nconst equalLimits = 3;\n\n/**\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n */\nexport interface RopeJointOpt extends JointOpt {\n  /**\n   * The maximum length of the rope.\n   * Warning: this must be larger than linearSlop or the joint will have no effect.\n   */\n  maxLength?: number;\n}\n/**\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n */\nexport interface RopeJointDef extends JointDef, RopeJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n}\n\nconst DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n *\n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n *\n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See {@link DistanceJoint} if you\n * want to dynamically control length.\n */\nexport class RopeJoint extends Joint {\n  static TYPE = 'rope-joint' as const;\n\n  /** @internal */ m_type: 'rope-joint';\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n\n  /** @internal */ m_maxLength: number;\n\n  /** @internal */ m_mass: number;\n  /** @internal */ m_impulse: number;\n  /** @internal */ m_length: number;\n  /** @internal */ m_state: number; // TODO enum\n\n  // Solver temp\n  /** @internal */ m_u: Vec2;\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n\n  constructor(def: RopeJointDef);\n  constructor(def: RopeJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2);\n  constructor(def: RopeJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof RopeJoint)) {\n      return new RopeJoint(def, bodyA, bodyB, anchor);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = RopeJoint.TYPE;\n    this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n    this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n    this.m_maxLength = def.maxLength;\n\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    this.m_length = 0.0;\n    this.m_state = inactiveLimit;\n\n    // Limit:\n    // C = norm(pB - pA) - L\n    // u = (pB - pA) / norm(pB - pA)\n    // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n    // J = [-u -cross(rA, u) u cross(rB, u)]\n    // K = J * invM * JT\n    // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      maxLength: this.m_maxLength,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): RopeJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new RopeJoint(data);\n    return joint;\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * Set the maximum length of the rope.\n   */\n  setMaxLength(length: number): void {\n    this.m_maxLength = length;\n  }\n\n  /**\n   * Get the maximum length of the rope.\n   */\n  getMaxLength(): number {\n    return this.m_maxLength;\n  }\n\n  getLimitState(): number {\n    // TODO LimitState\n    return this.m_state;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.mulNumVec2(this.m_impulse, this.m_u).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return 0.0;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n    this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n    this.m_u = Vec2.zero();\n    this.m_u.addCombine(1, cB, 1, this.m_rB);\n    this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n    this.m_length = this.m_u.length();\n\n    const C = this.m_length - this.m_maxLength; // float\n    if (C > 0.0) {\n      this.m_state = atUpperLimit;\n    } else {\n      this.m_state = inactiveLimit;\n    }\n\n    if (this.m_length > Settings.linearSlop) {\n      this.m_u.mul(1.0 / this.m_length);\n    } else {\n      this.m_u.setZero();\n      this.m_mass = 0.0;\n      this.m_impulse = 0.0;\n      return;\n    }\n\n    // Compute effective mass.\n    const crA = Vec2.crossVec2Vec2(this.m_rA, this.m_u); // float\n    const crB = Vec2.crossVec2Vec2(this.m_rB, this.m_u); // float\n    const invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n        + this.m_invIB * crB * crB; // float\n\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n    if (step.warmStarting) {\n      // Scale the impulse to support a variable time step.\n      this.m_impulse *= step.dtRatio;\n\n      const P = Vec2.mulNumVec2(this.m_impulse, this.m_u);\n\n      vA.subMul(this.m_invMassA, P);\n      wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n\n      vB.addMul(this.m_invMassB, P);\n      wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n\n    } else {\n      this.m_impulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    // Cdot = dot(u, v + cross(w, r))\n    const vpA = Vec2.addCrossNumVec2(vA, wA, this.m_rA); // Vec2\n    const vpB = Vec2.addCrossNumVec2(vB, wB, this.m_rB); // Vec2\n    const C = this.m_length - this.m_maxLength; // float\n    let Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n    // Predictive constraint.\n    if (C < 0.0) {\n      Cdot += step.inv_dt * C;\n    }\n\n    let impulse = -this.m_mass * Cdot; // float\n    const oldImpulse = this.m_impulse; // float\n    this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n    impulse = this.m_impulse - oldImpulse;\n\n    const P = Vec2.mulNumVec2(impulse, this.m_u); // Vec2\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c; // Vec2\n    let aA = this.m_bodyA.c_position.a; // float\n    const cB = this.m_bodyB.c_position.c; // Vec2\n    let aB = this.m_bodyB.c_position.a; // float\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n    const rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n    const u = Vec2.zero();\n    u.addCombine(1, cB, 1, rB);\n    u.subCombine(1, cA, 1, rA); // Vec2\n\n    const length = u.normalize(); // float\n    let C = length - this.m_maxLength; // float\n\n    C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n    const impulse = -this.m_mass * C; // float\n    const P = Vec2.mulNumVec2(impulse, u); // Vec2\n\n    cA.subMul(this.m_invMassA, P);\n    aA -= this.m_invIA * Vec2.crossVec2Vec2(rA, P);\n    cB.addMul(this.m_invMassB, P);\n    aB += this.m_invIB * Vec2.crossVec2Vec2(rB, P);\n\n    this.m_bodyA.c_position.c.setVec2(cA);\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c.setVec2(cB);\n    this.m_bodyB.c_position.a = aB;\n\n    return length - this.m_maxLength < Settings.linearSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Vec3 } from '../../common/Vec3';\nimport { Mat33 } from '../../common/Mat33';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n *\n * @prop {float} frequencyHz\n * @prop {float} dampingRatio\n *\n * @prop {Vec2} localAnchorA\n * @prop {Vec2} localAnchorB\n * @prop {float} referenceAngle\n */\nexport interface WeldJointOpt extends JointOpt {\n  /**\n   * The mass-spring-damper frequency in Hertz. Rotation only. Disable softness\n   * with a value of 0.\n   */\n  frequencyHz?: number;\n  /**\n   * The damping ratio. 0 = no damping, 1 = critical damping.\n   */\n  dampingRatio?: number;\n  /**\n   * The bodyB angle minus bodyA angle in the reference state (radians).\n   */\n  referenceAngle?: number;\n}\n/**\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n */\nexport interface WeldJointDef extends JointDef, WeldJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n}\n\nconst DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n};\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n */\nexport class WeldJoint extends Joint {\n  static TYPE = 'weld-joint' as const\n\n  /** @internal */ m_type: 'weld-joint';\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_referenceAngle: number;\n\n  /** @internal */ m_frequencyHz: number;\n  /** @internal */ m_dampingRatio: number;\n\n  /** @internal */ m_impulse: Vec3;\n\n  /** @internal */ m_bias: number;\n  /** @internal */ m_gamma: number;\n\n  // Solver temp\n  /** @internal */ m_rA: Vec2;\n  /** @internal */ m_rB: Vec2;\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n  /** @internal */ m_mass: Mat33;\n\n  constructor(def: WeldJointDef);\n  constructor(def: WeldJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2);\n  constructor(def: WeldJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof WeldJoint)) {\n      return new WeldJoint(def, bodyA, bodyB, anchor);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = WeldJoint.TYPE;\n\n    this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n    this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n    this.m_frequencyHz = def.frequencyHz;\n    this.m_dampingRatio = def.dampingRatio;\n\n    this.m_impulse = new Vec3();\n\n    this.m_bias = 0.0;\n    this.m_gamma = 0.0;\n\n    // Solver temp\n    this.m_rA; // Vec2\n    this.m_rB; // Vec2\n    this.m_localCenterA; // Vec2\n    this.m_localCenterB; // Vec2\n    this.m_invMassA; // float\n    this.m_invMassB; // float\n    this.m_invIA; // float\n    this.m_invIB; // float\n    this.m_mass = new Mat33();\n\n    // Point-to-point constraint\n    // C = p2 - p1\n    // Cdot = v2 - v1\n    // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n    // J = [-I -r1_skew I r2_skew ]\n    // Identity used:\n    // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n    // Angle constraint\n    // C = angle2 - angle1 - referenceAngle\n    // Cdot = w2 - w1\n    // J = [0 0 -1 0 0 1]\n    // K = invI1 + invI2\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      frequencyHz: this.m_frequencyHz,\n      dampingRatio: this.m_dampingRatio,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      referenceAngle: this.m_referenceAngle,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): WeldJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new WeldJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * Get the reference angle.\n   */\n  getReferenceAngle(): number {\n    return this.m_referenceAngle;\n  }\n\n  /**\n   * Set frequency in Hz.\n   */\n  setFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  /**\n   * Get frequency in Hz.\n   */\n  getFrequency(): number {\n    return this.m_frequencyHz;\n  }\n\n  /**\n   * Set damping ratio.\n   */\n  setDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  /**\n   * Get damping ratio.\n   */\n  getDampingRatio(): number {\n    return this.m_dampingRatio;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.z;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    // J = [-I -r1_skew I r2_skew]\n    // [ 0 -1 0 1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n    // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n    // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const K = new Mat33();\n    K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n        * iB;\n    K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n    K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n    K.ex.y = K.ey.x;\n    K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n        * iB;\n    K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n    K.ex.z = K.ez.x;\n    K.ey.z = K.ez.y;\n    K.ez.z = iA + iB;\n\n    if (this.m_frequencyHz > 0.0) {\n      K.getInverse22(this.m_mass);\n\n      let invM = iA + iB; // float\n      const m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n      const C = aB - aA - this.m_referenceAngle; // float\n\n      // Frequency\n      const omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      const d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      const k = m * omega * omega; // float\n\n      // magic formulas\n      const h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n      this.m_bias = C * h * k * this.m_gamma;\n\n      invM += this.m_gamma;\n      this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n    } else if (K.ez.z == 0.0) {\n      K.getInverse22(this.m_mass);\n      this.m_gamma = 0.0;\n      this.m_bias = 0.0;\n    } else {\n      K.getSymInverse33(this.m_mass);\n      this.m_gamma = 0.0;\n      this.m_bias = 0.0;\n    }\n\n    if (step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_impulse.mul(step.dtRatio);\n\n      const P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_impulse.z);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_impulse.z);\n\n    } else {\n      this.m_impulse.setZero();\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB; // float\n    const iA = this.m_invIA;\n    const iB = this.m_invIB; // float\n\n    if (this.m_frequencyHz > 0.0) {\n      const Cdot2 = wB - wA; // float\n\n      const impulse2 = -this.m_mass.ez.z\n          * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n      this.m_impulse.z += impulse2;\n\n      wA -= iA * impulse2;\n      wB += iB * impulse2;\n\n      const Cdot1 = Vec2.zero();\n      Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n      Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA)); // Vec2\n\n      const impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n      this.m_impulse.x += impulse1.x;\n      this.m_impulse.y += impulse1.y;\n\n      const P = Vec2.clone(impulse1); // Vec2\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.crossVec2Vec2(this.m_rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.crossVec2Vec2(this.m_rB, P);\n    } else {\n      const Cdot1 = Vec2.zero();\n      Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n      Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA)); // Vec2\n      const Cdot2 = wB - wA; // float\n      const Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n      const impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n      this.m_impulse.add(impulse);\n\n      const P = Vec2.neo(impulse.x, impulse.y);\n\n      vA.subMul(mA, P);\n      wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + impulse.z);\n\n      vB.addMul(mB, P);\n      wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + impulse.z);\n    }\n\n    this.m_bodyA.c_velocity.v = vA;\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v = vB;\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB;\n    const iA = this.m_invIA;\n    const iB = this.m_invIB;\n\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n    let positionError: number;\n    let angularError: number;\n\n    const K = new Mat33();\n    K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n    K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n    K.ez.x = -rA.y * iA - rB.y * iB;\n    K.ex.y = K.ey.x;\n    K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n    K.ez.y = rA.x * iA + rB.x * iB;\n    K.ex.z = K.ez.x;\n    K.ey.z = K.ez.y;\n    K.ez.z = iA + iB;\n\n    if (this.m_frequencyHz > 0.0) {\n      const C1 = Vec2.zero();\n      C1.addCombine(1, cB, 1, rB);\n      C1.subCombine(1, cA, 1, rA); // Vec2\n\n      positionError = C1.length();\n      angularError = 0.0;\n\n      const P = Vec2.neg(K.solve22(C1)); // Vec2\n\n      cA.subMul(mA, P);\n      aA -= iA * Vec2.crossVec2Vec2(rA, P);\n\n      cB.addMul(mB, P);\n      aB += iB * Vec2.crossVec2Vec2(rB, P);\n    } else {\n      const C1 = Vec2.zero();\n      C1.addCombine(1, cB, 1, rB);\n      C1.subCombine(1, cA, 1, rA);\n\n      const C2 = aB - aA - this.m_referenceAngle; // float\n\n      positionError = C1.length();\n      angularError = Math.abs(C2);\n\n      const C = new Vec3(C1.x, C1.y, C2);\n\n      let impulse = new Vec3();\n      if (K.ez.z > 0.0) {\n        impulse = Vec3.neg(K.solve33(C));\n      } else {\n        const impulse2 = Vec2.neg(K.solve22(C1));\n        impulse.set(impulse2.x, impulse2.y, 0.0);\n      }\n\n      const P = Vec2.neo(impulse.x, impulse.y);\n\n      cA.subMul(mA, P);\n      aA -= iA * (Vec2.crossVec2Vec2(rA, P) + impulse.z);\n\n      cB.addMul(mB, P);\n      aB += iB * (Vec2.crossVec2Vec2(rB, P) + impulse.z);\n    }\n\n    this.m_bodyA.c_position.c = cA;\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c = cB;\n    this.m_bodyB.c_position.a = aB;\n\n    return positionError <= Settings.linearSlop && angularError <= Settings.angularSlop;\n  }\n\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { options } from '../../util/options';\nimport { Settings } from '../../Settings';\nimport { math as Math } from '../../common/Math';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Joint, JointOpt, JointDef } from '../Joint';\nimport { Body } from '../Body';\nimport { TimeStep } from \"../Solver\";\n\n\nconst _CONSTRUCTOR_FACTORY = typeof CONSTRUCTOR_FACTORY === 'undefined' ? false : CONSTRUCTOR_FACTORY;\n\n\n/**\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n */\nexport interface WheelJointOpt extends JointOpt {\n  /**\n   * Enable/disable the joint motor.\n   */\n  enableMotor?: boolean;\n  /**\n   * The maximum motor torque, usually in N-m.\n   */\n  maxMotorTorque?: number;\n  /**\n   * The desired motor speed in radians per second.\n   */\n  motorSpeed?: number;\n  /**\n   * Suspension frequency, zero indicates no suspension.\n   */\n  frequencyHz?: number;\n  /**\n   * Suspension damping ratio, one indicates critical damping.\n   */\n  dampingRatio?: number;\n}\n/**\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n */\nexport interface WheelJointDef extends JointDef, WheelJointOpt {\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  localAnchorA: Vec2;\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  localAnchorB: Vec2;\n  /**\n   * The local translation axis in bodyA.\n   */\n  localAxisA: Vec2;\n}\n\nconst DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n */\nexport class WheelJoint extends Joint {\n  static TYPE = 'wheel-joint' as const;\n\n  /** @internal */ m_type: 'wheel-joint';\n  /** @internal */ m_localAnchorA: Vec2;\n  /** @internal */ m_localAnchorB: Vec2;\n  /** @internal */ m_localXAxisA: Vec2;\n  /** @internal */ m_localYAxisA: Vec2;\n\n  /** @internal */ m_mass: number;\n  /** @internal */ m_impulse: number;\n  /** @internal */ m_motorMass: number;\n  /** @internal */ m_motorImpulse: number;\n  /** @internal */ m_springMass: number;\n  /** @internal */ m_springImpulse: number;\n\n  /** @internal */ m_maxMotorTorque: number;\n  /** @internal */ m_motorSpeed: number;\n  /** @internal */ m_enableMotor: boolean;\n\n  /** @internal */ m_frequencyHz: number;\n  /** @internal */ m_dampingRatio: number;\n\n  /** @internal */ m_bias: number;\n  /** @internal */ m_gamma: number;\n\n  // Solver temp\n  /** @internal */ m_localCenterA: Vec2;\n  /** @internal */ m_localCenterB: Vec2;\n  /** @internal */ m_invMassA: number;\n  /** @internal */ m_invMassB: number;\n  /** @internal */ m_invIA: number;\n  /** @internal */ m_invIB: number;\n\n  /** @internal */ m_ax: Vec2 = Vec2.zero();\n  /** @internal */ m_ay: Vec2 = Vec2.zero();\n  /** @internal */ m_sAx: number;\n  /** @internal */ m_sBx: number;\n  /** @internal */ m_sAy: number;\n  /** @internal */ m_sBy: number;\n\n  constructor(def: WheelJointDef);\n  constructor(def: WheelJointOpt, bodyA: Body, bodyB: Body, anchor: Vec2, axis: Vec2);\n  // @ts-ignore\n  constructor(def: WheelJointDef, bodyA?: Body, bodyB?: Body, anchor?: Vec2, axis?: Vec2) {\n    // @ts-ignore\n    if (_CONSTRUCTOR_FACTORY && !(this instanceof WheelJoint)) {\n      return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n    }\n\n    def = options(def, DEFAULTS);\n    super(def, bodyA, bodyB);\n    bodyA = this.m_bodyA;\n    bodyB = this.m_bodyB;\n\n    this.m_type = WheelJoint.TYPE;\n\n    this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n    this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n    // @ts-ignore localAxis\n    this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || def.localAxis || Vec2.neo(1.0, 0.0));\n    this.m_localYAxisA = Vec2.crossNumVec2(1.0, this.m_localXAxisA);\n\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n    this.m_springMass = 0.0;\n    this.m_springImpulse = 0.0;\n\n    this.m_maxMotorTorque = def.maxMotorTorque;\n    this.m_motorSpeed = def.motorSpeed;\n    this.m_enableMotor = def.enableMotor;\n\n    this.m_frequencyHz = def.frequencyHz;\n    this.m_dampingRatio = def.dampingRatio;\n\n    this.m_bias = 0.0;\n    this.m_gamma = 0.0;\n\n    // Linear constraint (point-to-line)\n    // d = pB - pA = xB + rB - xA - rA\n    // C = dot(ay, d)\n    // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n    // rA))\n    // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n    // ay), vB)\n    // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n    // Spring linear constraint\n    // C = dot(ax, d)\n    // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n    // dot(cross(rB, ax), vB)\n    // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n    // Motor rotational constraint\n    // Cdot = wB - wA\n    // J = [0 0 -1 0 0 1]\n  }\n\n  /** @internal */\n  _serialize(): object {\n    return {\n      type: this.m_type,\n      bodyA: this.m_bodyA,\n      bodyB: this.m_bodyB,\n      collideConnected: this.m_collideConnected,\n\n      enableMotor: this.m_enableMotor,\n      maxMotorTorque: this.m_maxMotorTorque,\n      motorSpeed: this.m_motorSpeed,\n      frequencyHz: this.m_frequencyHz,\n      dampingRatio: this.m_dampingRatio,\n\n      localAnchorA: this.m_localAnchorA,\n      localAnchorB: this.m_localAnchorB,\n      localAxisA: this.m_localXAxisA,\n    };\n  }\n\n  /** @internal */\n  static _deserialize(data: any, world: any, restore: any): WheelJoint {\n    data = {...data};\n    data.bodyA = restore(Body, data.bodyA, world);\n    data.bodyB = restore(Body, data.bodyB, world);\n    const joint = new WheelJoint(data);\n    return joint;\n  }\n\n  /** @internal */\n  _setAnchors(def: {\n    anchorA?: Vec2,\n    localAnchorA?: Vec2,\n    anchorB?: Vec2,\n    localAnchorB?: Vec2,\n    localAxisA?: Vec2,\n  }): void {\n    if (def.anchorA) {\n      this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n    } else if (def.localAnchorA) {\n      this.m_localAnchorA.setVec2(def.localAnchorA);\n    }\n\n    if (def.anchorB) {\n      this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n    } else if (def.localAnchorB) {\n      this.m_localAnchorB.setVec2(def.localAnchorB);\n    }\n\n    if (def.localAxisA) {\n      this.m_localXAxisA.setVec2(def.localAxisA);\n      this.m_localYAxisA.setVec2(Vec2.crossNumVec2(1.0, def.localAxisA));\n    }\n  }\n\n  /**\n   * The local anchor point relative to bodyA's origin.\n   */\n  getLocalAnchorA(): Vec2 {\n    return this.m_localAnchorA;\n  }\n\n  /**\n   * The local anchor point relative to bodyB's origin.\n   */\n  getLocalAnchorB(): Vec2 {\n    return this.m_localAnchorB;\n  }\n\n  /**\n   * The local joint axis relative to bodyA.\n   */\n  getLocalAxisA(): Vec2 {\n    return this.m_localXAxisA;\n  }\n\n  /**\n   * Get the current joint translation, usually in meters.\n   */\n  getJointTranslation(): number {\n    const bA = this.m_bodyA;\n    const bB = this.m_bodyB;\n\n    const pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n    const pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n    const d = Vec2.sub(pB, pA); // Vec2\n    const axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n    const translation = Vec2.dot(d, axis); // float\n    return translation;\n  }\n\n  /**\n   * Get the current joint translation speed, usually in meters per second.\n   */\n  getJointSpeed(): number {\n    const wA = this.m_bodyA.m_angularVelocity;\n    const wB = this.m_bodyB.m_angularVelocity;\n    return wB - wA;\n  }\n\n  /**\n   * Is the joint motor enabled?\n   */\n  isMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  /**\n   * Enable/disable the joint motor.\n   */\n  enableMotor(flag: boolean): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableMotor = flag;\n  }\n\n  /**\n   * Set the motor speed, usually in radians per second.\n   */\n  setMotorSpeed(speed: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_motorSpeed = speed;\n  }\n\n  /**\n   * Get the motor speed, usually in radians per second.\n   */\n  getMotorSpeed(): number {\n    return this.m_motorSpeed;\n  }\n\n  /**\n   * Set/Get the maximum motor force, usually in N-m.\n   */\n  setMaxMotorTorque(torque: number): void {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_maxMotorTorque = torque;\n  }\n\n  getMaxMotorTorque(): number {\n    return this.m_maxMotorTorque;\n  }\n\n  /**\n   * Get the current motor torque given the inverse time step, usually in N-m.\n   */\n  getMotorTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  /**\n   * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n   * the spring.\n   */\n  setSpringFrequencyHz(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  getSpringFrequencyHz(): number {\n    return this.m_frequencyHz;\n  }\n\n  /**\n   * Set/Get the spring damping ratio\n   */\n  setSpringDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  getSpringDampingRatio(): number {\n    return this.m_dampingRatio;\n  }\n\n  /**\n   * Get the anchor point on bodyA in world coordinates.\n   */\n  getAnchorA(): Vec2 {\n    return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  }\n\n  /**\n   * Get the anchor point on bodyB in world coordinates.\n   */\n  getAnchorB(): Vec2 {\n    return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  }\n\n  /**\n   * Get the reaction force on bodyB at the joint anchor in Newtons.\n   */\n  getReactionForce(inv_dt: number): Vec2 {\n    return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n  }\n\n  /**\n   * Get the reaction torque on bodyB in N*m.\n   */\n  getReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  initVelocityConstraints(step: TimeStep): void {\n    this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n    this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB; // float\n    const iA = this.m_invIA;\n    const iB = this.m_invIB; // float\n\n    const cA = this.m_bodyA.c_position.c;\n    const aA = this.m_bodyA.c_position.a;\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n\n    const cB = this.m_bodyB.c_position.c;\n    const aB = this.m_bodyB.c_position.a;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    // Compute the effective masses.\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n    const d = Vec2.zero();\n    d.addCombine(1, cB, 1, rB);\n    d.subCombine(1, cA, 1, rA); // Vec2\n\n    // Point to line constraint\n    {\n      this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n      this.m_sAy = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_ay);\n      this.m_sBy = Vec2.crossVec2Vec2(rB, this.m_ay);\n\n      this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n          * this.m_sBy;\n\n      if (this.m_mass > 0.0) {\n        this.m_mass = 1.0 / this.m_mass;\n      }\n    }\n\n    // Spring constraint\n    this.m_springMass = 0.0;\n    this.m_bias = 0.0;\n    this.m_gamma = 0.0;\n    if (this.m_frequencyHz > 0.0) {\n      this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n      this.m_sAx = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_ax);\n      this.m_sBx = Vec2.crossVec2Vec2(rB, this.m_ax);\n\n      const invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n          * this.m_sBx; // float\n\n      if (invMass > 0.0) {\n        this.m_springMass = 1.0 / invMass;\n\n        const C = Vec2.dot(d, this.m_ax); // float\n\n        // Frequency\n        const omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n        // Damping coefficient\n        const damp = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n        // Spring stiffness\n        const k = this.m_springMass * omega * omega; // float\n\n        // magic formulas\n        const h = step.dt; // float\n        this.m_gamma = h * (damp + h * k);\n        if (this.m_gamma > 0.0) {\n          this.m_gamma = 1.0 / this.m_gamma;\n        }\n\n        this.m_bias = C * h * k * this.m_gamma;\n\n        this.m_springMass = invMass + this.m_gamma;\n        if (this.m_springMass > 0.0) {\n          this.m_springMass = 1.0 / this.m_springMass;\n        }\n      }\n    } else {\n      this.m_springImpulse = 0.0;\n    }\n\n    // Rotational motor\n    if (this.m_enableMotor) {\n      this.m_motorMass = iA + iB;\n      if (this.m_motorMass > 0.0) {\n        this.m_motorMass = 1.0 / this.m_motorMass;\n      }\n    } else {\n      this.m_motorMass = 0.0;\n      this.m_motorImpulse = 0.0;\n    }\n\n    if (step.warmStarting) {\n      // Account for variable time step.\n      this.m_impulse *= step.dtRatio;\n      this.m_springImpulse *= step.dtRatio;\n      this.m_motorImpulse *= step.dtRatio;\n\n      const P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n      const LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n      const LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n      vA.subMul(this.m_invMassA, P);\n      wA -= this.m_invIA * LA;\n\n      vB.addMul(this.m_invMassB, P);\n      wB += this.m_invIB * LB;\n\n    } else {\n      this.m_impulse = 0.0;\n      this.m_springImpulse = 0.0;\n      this.m_motorImpulse = 0.0;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  solveVelocityConstraints(step: TimeStep): void {\n    const mA = this.m_invMassA;\n    const mB = this.m_invMassB; // float\n    const iA = this.m_invIA;\n    const iB = this.m_invIB; // float\n\n    const vA = this.m_bodyA.c_velocity.v;\n    let wA = this.m_bodyA.c_velocity.w;\n    const vB = this.m_bodyB.c_velocity.v;\n    let wB = this.m_bodyB.c_velocity.w;\n\n    // Solve spring constraint\n    {\n      const Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n          * wB - this.m_sAx * wA; // float\n      const impulse = -this.m_springMass\n          * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n      this.m_springImpulse += impulse;\n\n      const P = Vec2.mulNumVec2(impulse, this.m_ax); // Vec2\n      const LA = impulse * this.m_sAx; // float\n      const LB = impulse * this.m_sBx; // float\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    }\n\n    // Solve rotational motor constraint\n    {\n      const Cdot = wB - wA - this.m_motorSpeed; // float\n      let impulse = -this.m_motorMass * Cdot; // float\n\n      const oldImpulse = this.m_motorImpulse; // float\n      const maxImpulse = step.dt * this.m_maxMotorTorque; // float\n      this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n          -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve point to line constraint\n    {\n      const Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n          * wB - this.m_sAy * wA; // float\n      const impulse = -this.m_mass * Cdot; // float\n      this.m_impulse += impulse;\n\n      const P = Vec2.mulNumVec2(impulse, this.m_ay); // Vec2\n      const LA = impulse * this.m_sAy; // float\n      const LB = impulse * this.m_sBy; // float\n\n      vA.subMul(mA, P);\n      wA -= iA * LA;\n\n      vB.addMul(mB, P);\n      wB += iB * LB;\n    }\n\n    this.m_bodyA.c_velocity.v.setVec2(vA);\n    this.m_bodyA.c_velocity.w = wA;\n    this.m_bodyB.c_velocity.v.setVec2(vB);\n    this.m_bodyB.c_velocity.w = wB;\n  }\n\n  /**\n   * This returns true if the position errors are within tolerance.\n   */\n  solvePositionConstraints(step: TimeStep): boolean {\n    const cA = this.m_bodyA.c_position.c;\n    let aA = this.m_bodyA.c_position.a;\n    const cB = this.m_bodyB.c_position.c;\n    let aB = this.m_bodyB.c_position.a;\n\n    const qA = Rot.neo(aA);\n    const qB = Rot.neo(aB);\n\n    const rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n    const rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n    const d = Vec2.zero();\n    d.addCombine(1, cB, 1, rB);\n    d.subCombine(1, cA, 1, rA);\n\n    const ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    const sAy = Vec2.crossVec2Vec2(Vec2.add(d, rA), ay); // float\n    const sBy = Vec2.crossVec2Vec2(rB, ay); // float\n\n    const C = Vec2.dot(d, ay); // float\n\n    const k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n        * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n    let impulse; // float\n    if (k != 0.0) {\n      impulse = -C / k;\n    } else {\n      impulse = 0.0;\n    }\n\n    const P = Vec2.mulNumVec2(impulse, ay); // Vec2\n    const LA = impulse * sAy; // float\n    const LB = impulse * sBy; // float\n\n    cA.subMul(this.m_invMassA, P);\n    aA -= this.m_invIA * LA;\n    cB.addMul(this.m_invMassB, P);\n    aB += this.m_invIB * LB;\n\n    this.m_bodyA.c_position.c.setVec2(cA);\n    this.m_bodyA.c_position.a = aA;\n    this.m_bodyB.c_position.c.setVec2(cB);\n    this.m_bodyB.c_position.a = aB;\n\n    return Math.abs(C) <= Settings.linearSlop;\n  }\n\n}\n","// tslint:disable:typedef\nimport { World } from '../dynamics/World';\nimport { Body } from '../dynamics/Body';\nimport { Joint } from '../dynamics/Joint';\nimport { Fixture } from '../dynamics/Fixture';\nimport { Shape } from '../collision/Shape';\nimport { Vec2 } from '../common/Vec2';\nimport { Vec3 } from '../common/Vec3';\nimport { ChainShape } from \"../collision/shape/ChainShape\";\nimport { BoxShape } from \"../collision/shape/BoxShape\";\nimport { EdgeShape } from \"../collision/shape/EdgeShape\";\nimport { PolygonShape } from \"../collision/shape/PolygonShape\";\nimport { CircleShape } from \"../collision/shape/CircleShape\";\nimport { DistanceJoint } from \"../dynamics/joint/DistanceJoint\";\nimport { FrictionJoint } from \"../dynamics/joint/FrictionJoint\";\nimport { GearJoint } from \"../dynamics/joint/GearJoint\";\nimport { MotorJoint } from \"../dynamics/joint/MotorJoint\";\nimport { MouseJoint } from \"../dynamics/joint/MouseJoint\";\nimport { PrismaticJoint } from \"../dynamics/joint/PrismaticJoint\";\nimport { PulleyJoint } from \"../dynamics/joint/PulleyJoint\";\nimport { RevoluteJoint } from \"../dynamics/joint/RevoluteJoint\";\nimport { RopeJoint } from \"../dynamics/joint/RopeJoint\";\nimport { WeldJoint } from \"../dynamics/joint/WeldJoint\";\nimport { WheelJoint } from \"../dynamics/joint/WheelJoint\";\n\nlet SID = 0;\n\nexport function Serializer(opts?) {\n  opts = opts || {};\n\n  const rootClass = opts.rootClass || World;\n\n  const preSerialize = opts.preSerialize || function(obj) { return obj; };\n  const postSerialize = opts.postSerialize || function(data, obj) { return data; };\n\n  const preDeserialize = opts.preDeserialize || function(data) { return data; };\n  const postDeserialize = opts.postDeserialize || function(obj, data) { return obj; };\n\n  // This is used to create ref objects during serialize\n  const refTypes = {\n    World,\n    Body,\n    Joint,\n    Fixture,\n    Shape,\n  };\n\n  // This is used by restore to deserialize objects and refs\n  const restoreTypes = {\n    Vec2,\n    Vec3,\n    ...refTypes\n  };\n\n  const CLASS_BY_TYPE_PROP = {\n    [Body.STATIC]: Body,\n    [Body.DYNAMIC]: Body,\n    [Body.KINEMATIC]: Body,\n    [ChainShape.TYPE]: ChainShape,\n    [BoxShape.TYPE]: BoxShape,\n    [EdgeShape.TYPE]: EdgeShape,\n    [PolygonShape.TYPE]: PolygonShape,\n    [CircleShape.TYPE]: CircleShape,\n    [DistanceJoint.TYPE]: DistanceJoint,\n    [FrictionJoint.TYPE]: FrictionJoint,\n    [GearJoint.TYPE]: GearJoint,\n    [MotorJoint.TYPE]: MotorJoint,\n    [MouseJoint.TYPE]: MouseJoint,\n    [PrismaticJoint.TYPE]: PrismaticJoint,\n    [PulleyJoint.TYPE]: PulleyJoint,\n    [RevoluteJoint.TYPE]: RevoluteJoint,\n    [RopeJoint.TYPE]: RopeJoint,\n    [WeldJoint.TYPE]: WeldJoint,\n    [WheelJoint.TYPE]: WheelJoint,\n  }\n\n  this.toJson = function(root) {\n    const json = [];\n\n    const queue = [root];\n    const refMap = {};\n\n    function storeRef(value, typeName) {\n      value.__sid = value.__sid || ++SID;\n      if (!refMap[value.__sid]) {\n        queue.push(value);\n        const index = json.length + queue.length;\n        const ref = {\n          refIndex: index,\n          refType: typeName\n        };\n        refMap[value.__sid] = ref;\n      }\n      return refMap[value.__sid];\n    }\n\n    function serialize(obj) {\n      obj = preSerialize(obj);\n      let data = obj._serialize();\n      data = postSerialize(data, obj);\n      return data;\n    }\n\n    function toJson(value, top?) {\n      if (typeof value !== 'object' || value === null) {\n        return value;\n      }\n      if (typeof value._serialize === 'function') {\n        if (value !== top) {\n          // tslint:disable-next-line:no-for-in\n          for (const typeName in refTypes) {\n            if (value instanceof refTypes[typeName]) {\n              return storeRef(value, typeName);\n            }\n          }\n        }\n        value = serialize(value);\n      }\n      if (Array.isArray(value)) {\n        const newValue = [];\n        for (let key = 0; key < value.length; key++) {\n          newValue[key] = toJson(value[key]);\n        }\n        value = newValue;\n\n      } else {\n        const newValue = {};\n        // tslint:disable-next-line:no-for-in\n        for (const key in value) {\n          if (value.hasOwnProperty(key)) {\n            newValue[key] = toJson(value[key]);\n          }\n        }\n        value = newValue;\n      }\n      return value;\n    }\n\n    while (queue.length) {\n      const obj = queue.shift();\n      const str = toJson(obj, obj);\n      json.push(str);\n    }\n\n    return json;\n  };\n\n  this.fromJson = function(json: object) {\n    const refMap = {};\n\n    function findDeserilizer(data, cls) {\n      if (!cls || !cls._deserialize) {\n        cls = CLASS_BY_TYPE_PROP[data.type]\n      }\n      return cls && cls._deserialize;\n    }\n\n    /**\n     * Deserialize a data object.\n     */\n    function deserialize(cls, data, ctx) {\n      const deserializer = findDeserilizer(data, cls);\n      if (!deserializer) {\n        return;\n      }\n      data = preDeserialize(data);\n      let obj = deserializer(data, ctx, restoreRef);\n      obj = postDeserialize(obj, data);\n      return obj;\n    }\n\n    /**\n     * Restore a ref object or deserialize a data object.\n     *\n     * This is passed as callback to class deserializers.\n     */\n    function restoreRef(cls, ref, ctx) {\n      if (!ref.refIndex) {\n        return cls && cls._deserialize && deserialize(cls, ref, ctx);\n      }\n      cls = restoreTypes[ref.refType] || cls;\n      const index = ref.refIndex;\n      if (!refMap[index]) {\n        const data = json[index];\n        const obj = deserialize(cls, data, ctx);\n        refMap[index] = obj;\n      }\n      return refMap[index];\n    }\n\n    const root = rootClass._deserialize(json[0], null, restoreRef);\n\n    return root;\n  };\n}\n\nconst serializer = new Serializer();\n\nSerializer.toJson = serializer.toJson;\nSerializer.fromJson = serializer.fromJson;\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\nimport { Transform } from '../../common/Transform';\nimport { Vec2 } from '../../common/Vec2';\nimport { Contact } from '../../dynamics/Contact';\nimport { CircleShape } from './CircleShape';\nimport { Manifold, ContactFeatureType, ManifoldType } from \"../Manifold\";\nimport { Fixture } from \"../../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold: Manifold, xfA: Transform, fixtureA: Fixture, indexA: number, xfB: Transform, fixtureB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && console.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape() as CircleShape, xfA, fixtureB.getShape() as CircleShape, xfB);\n}\n\nexport const CollideCircles = function (manifold: Manifold, circleA: CircleShape, xfA: Transform, circleB: CircleShape, xfB: Transform): void {\n  manifold.pointCount = 0;\n\n  const pA = Transform.mulVec2(xfA, circleA.m_p);\n  const pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  const distSqr = Vec2.distanceSquared(pB, pA);\n  const rA = circleA.m_radius;\n  const rB = circleB.m_radius;\n  const radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = ManifoldType.e_circles;\n  manifold.localPoint.setVec2(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Transform } from '../../common/Transform';\nimport { Vec2 } from '../../common/Vec2';\nimport { Contact } from '../../dynamics/Contact';\nimport { EdgeShape } from './EdgeShape';\nimport { ChainShape } from './ChainShape';\nimport { CircleShape } from './CircleShape';\nimport { Manifold, ContactFeatureType, ManifoldType } from \"../Manifold\";\nimport { Fixture } from \"../../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold: Manifold, xfA: Transform, fixtureA: Fixture, indexA: number, xfB: Transform, fixtureB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && console.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  const shapeA = fixtureA.getShape() as EdgeShape;\n  const shapeB = fixtureB.getShape() as CircleShape;\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold: Manifold, xfA: Transform, fixtureA: Fixture, indexA: number, xfB: Transform, fixtureB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && console.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  const chain = fixtureA.getShape() as ChainShape;\n  const edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  const shapeA = edge;\n  const shapeB = fixtureB.getShape() as CircleShape;\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nexport const CollideEdgeCircle = function (manifold: Manifold, edgeA: EdgeShape, xfA: Transform, circleB: CircleShape, xfB: Transform): void {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  const Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  const A = edgeA.m_vertex1;\n  const B = edgeA.m_vertex2;\n  const e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  const u = Vec2.dot(e, Vec2.sub(B, Q));\n  const v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  const radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    const P = Vec2.clone(A);\n    const d = Vec2.sub(Q, P);\n    const dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      const A1 = edgeA.m_vertex0;\n      const B1 = A;\n      const e1 = Vec2.sub(B1, A1);\n      const u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = ManifoldType.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.setVec2(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    const P = Vec2.clone(B);\n    const d = Vec2.sub(Q, P);\n    const dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      const B2 = edgeA.m_vertex3;\n      const A2 = B;\n      const e2 = Vec2.sub(B2, A2);\n      const v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = ManifoldType.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.setVec2(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n    return;\n  }\n\n  // Region AB\n  const den = Vec2.dot(e, e);\n  _ASSERT && console.assert(den > 0.0);\n  const P = Vec2.combine(u / den, A, v / den, B);\n  const d = Vec2.sub(Q, P);\n  const dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  const n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.setNum(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = ManifoldType.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.setVec2(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = ContactFeatureType.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Transform } from '../../common/Transform';\nimport { Rot } from '../../common/Rot';\nimport { Vec2 } from '../../common/Vec2';\nimport { Settings } from '../../Settings';\nimport { Manifold, clipSegmentToLine, ClipVertex, ContactFeatureType, ManifoldType } from '../Manifold';\nimport { Contact } from '../../dynamics/Contact';\nimport { PolygonShape } from './PolygonShape';\nimport { Fixture } from \"../../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold: Manifold, xfA: Transform, fixtureA: Fixture, indexA: number, xfB: Transform, fixtureB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && console.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape() as PolygonShape, xfA, fixtureB.getShape() as PolygonShape, xfB);\n}\n\ninterface MaxSeparation {\n  maxSeparation: number;\n  bestIndex: number;\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction findMaxSeparation(poly1: PolygonShape, xf1: Transform, poly2: PolygonShape, xf2: Transform, output: MaxSeparation): void {\n  const count1 = poly1.m_count;\n  const count2 = poly2.m_count;\n  const n1s = poly1.m_normals;\n  const v1s = poly1.m_vertices;\n  const v2s = poly2.m_vertices;\n  const xf = Transform.mulTXf(xf2, xf1);\n\n  let bestIndex = 0;\n  let maxSeparation = -Infinity;\n  for (let i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    const n = Rot.mulVec2(xf.q, n1s[i]);\n    const v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    let si = Infinity;\n    for (let j = 0; j < count2; ++j) {\n      const sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  output.maxSeparation = maxSeparation;\n  output.bestIndex = bestIndex;\n}\n\nfunction findIncidentEdge(c: ClipVertex[], poly1: PolygonShape, xf1: Transform, edge1: number, poly2: PolygonShape, xf2: Transform): void {\n  const normals1 = poly1.m_normals;\n\n  const count2 = poly2.m_count;\n  const vertices2 = poly2.m_vertices;\n  const normals2 = poly2.m_normals;\n\n  _ASSERT && console.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  const normal1 = Rot.mulTVec2(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  let index = 0;\n  let minDot = Infinity;\n  for (let i = 0; i < count2; ++i) {\n    const dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  const i1 = index;\n  const i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = ContactFeatureType.e_face;\n  c[0].id.cf.typeB = ContactFeatureType.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = ContactFeatureType.e_face;\n  c[1].id.cf.typeB = ContactFeatureType.e_vertex;\n}\n\nconst maxSeparation = {\n  maxSeparation: 0,\n  bestIndex: 0,\n};\n\n/**\n *\n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n *\n * The normal points from 1 to 2\n */\nexport const CollidePolygons = function (manifold: Manifold, polyA: PolygonShape, xfA: Transform, polyB: PolygonShape, xfB: Transform): void {\n  manifold.pointCount = 0;\n  const totalRadius = polyA.m_radius + polyB.m_radius;\n\n  findMaxSeparation(polyA, xfA, polyB, xfB, maxSeparation);\n  const edgeA = maxSeparation.bestIndex;\n  const separationA = maxSeparation.maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  findMaxSeparation(polyB, xfB, polyA, xfA, maxSeparation);\n  const edgeB = maxSeparation.bestIndex;\n  const separationB = maxSeparation.maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  let poly1; // reference polygon\n  let poly2; // incident polygon\n  let xf1;\n  let xf2;\n  let edge1; // reference edge\n  let flip;\n  const k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = ManifoldType.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = ManifoldType.e_faceA;\n    flip = 0;\n  }\n\n  const incidentEdge = [ new ClipVertex(), new ClipVertex() ];\n  findIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  const count1 = poly1.m_count;\n  const vertices1 = poly1.m_vertices;\n\n  const iv1 = edge1;\n  const iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  let v11 = vertices1[iv1];\n  let v12 = vertices1[iv2];\n\n  const localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  const localNormal = Vec2.crossVec2Num(localTangent, 1.0);\n  const planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  const tangent = Rot.mulVec2(xf1.q, localTangent);\n  const normal = Vec2.crossVec2Num(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  const frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  const sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  const sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  const clipPoints1 = [ new ClipVertex(), new ClipVertex() ];\n  const clipPoints2 = [ new ClipVertex(), new ClipVertex() ];\n  let np;\n\n  // Clip to box side 1\n  np = clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent), sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = clipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  let pointCount = 0;\n  for (let i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    const separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      const cp = manifold.points[pointCount];\n      cp.localPoint.setVec2(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        const cf = cp.id.cf;\n        const indexA = cf.indexA;\n        const indexB = cf.indexB;\n        const typeA = cf.typeA;\n        const typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from '../../common/Math';\nimport { Transform } from '../../common/Transform';\nimport { Vec2 } from '../../common/Vec2';\nimport { Contact } from '../../dynamics/Contact';\nimport { CircleShape } from './CircleShape';\nimport { PolygonShape } from './PolygonShape';\nimport { Manifold, ContactFeatureType, ManifoldType } from \"../Manifold\";\nimport { Fixture } from \"../../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold: Manifold, xfA: Transform, fixtureA: Fixture, indexA: number, xfB: Transform, fixtureB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && console.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape() as PolygonShape, xfA, fixtureB.getShape() as CircleShape, xfB);\n}\n\nexport const CollidePolygonCircle = function (manifold: Manifold, polygonA: PolygonShape, xfA: Transform, circleB: CircleShape, xfB: Transform): void {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  const c = Transform.mulVec2(xfB, circleB.m_p);\n  const cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  let normalIndex = 0;\n  let separation = -Infinity;\n  const radius = polygonA.m_radius + circleB.m_radius;\n  const vertexCount = polygonA.m_count;\n  const vertices = polygonA.m_vertices;\n  const normals = polygonA.m_normals;\n\n  for (let i = 0; i < vertexCount; ++i) {\n    const s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  const vertIndex1 = normalIndex;\n  const vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  const v1 = vertices[vertIndex1];\n  const v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = ManifoldType.e_faceA;\n    manifold.localNormal.setVec2(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  const u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  const u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = ManifoldType.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = ManifoldType.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.setVec2(v2);\n    manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n  } else {\n    const faceCenter = Vec2.mid(v1, v2);\n    const separation = Vec2.dot(cLocal, normals[vertIndex1]) - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = ManifoldType.e_faceA;\n    manifold.localNormal.setVec2(normals[vertIndex1]);\n    manifold.localPoint.setVec2(faceCenter);\n    manifold.points[0].localPoint.setVec2(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n  }\n}\n","/*\n * Planck.js\n * The MIT License\n * Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { math as Math } from '../../common/Math';\nimport { Transform } from '../../common/Transform';\nimport { Vec2 } from '../../common/Vec2';\nimport { Rot } from '../../common/Rot';\nimport { Settings } from '../../Settings';\nimport { Contact } from '../../dynamics/Contact';\nimport { Manifold, clipSegmentToLine, ClipVertex, ContactFeatureType, ManifoldType } from '../Manifold';\nimport { EdgeShape } from './EdgeShape';\nimport { ChainShape } from './ChainShape';\nimport { PolygonShape } from './PolygonShape';\nimport { Fixture } from \"../../dynamics/Fixture\";\n\n\nconst _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold: Manifold, xfA: Transform, fA: Fixture, indexA: number, xfB: Transform, fB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && console.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape() as EdgeShape, xfA, fB.getShape() as PolygonShape, xfB);\n}\n\nfunction ChainPolygonContact(manifold: Manifold, xfA: Transform, fA: Fixture, indexA: number, xfB: Transform, fB: Fixture, indexB: number): void {\n  _ASSERT && console.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && console.assert(fB.getType() == PolygonShape.TYPE);\n\n  const chain = fA.getShape() as ChainShape;\n  const edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape() as PolygonShape, xfB);\n}\n\nenum EPAxisType {\n  e_unknown = -1,\n  e_edgeA = 1,\n  e_edgeB = 2,\n}\n\n// unused?\nenum VertexType {\n e_isolated = 0,\n e_concave = 1,\n e_convex = 2,\n}\n\n/**\n * This structure is used to keep track of the best separating axis.\n */\nclass EPAxis {\n  type: EPAxisType;\n  index: number;\n  separation: number;\n}\n\n/**\n * This holds polygon B expressed in frame A.\n */\nclass TempPolygon {\n  vertices: Vec2[] = []; // [Settings.maxPolygonVertices]\n  normals: Vec2[] = []; // [Settings.maxPolygonVertices];\n  count: number = 0;\n}\n\n/**\n * Reference face used for clipping\n */\nclass ReferenceFace {\n  i1: number;\n  i2: number;\n  v1: Vec2;\n  v2: Vec2;\n  normal: Vec2 = Vec2.zero();\n  sideNormal1: Vec2 = Vec2.zero();\n  sideOffset1: number;\n  sideNormal2: Vec2 = Vec2.zero();\n  sideOffset2: number;\n}\n\n// reused\nconst edgeAxis = new EPAxis();\nconst polygonAxis = new EPAxis();\nconst polygonBA = new TempPolygon();\nconst rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nexport const CollideEdgePolygon = function (manifold: Manifold, edgeA: EdgeShape, xfA: Transform, polygonB: PolygonShape, xfB: Transform): void {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  // let m_type1: VertexType;\n  // let m_type2: VertexType;\n\n  const xf = Transform.mulTXf(xfA, xfB);\n\n  const centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  const v0 = edgeA.m_vertex0;\n  const v1 = edgeA.m_vertex1;\n  const v2 = edgeA.m_vertex2;\n  const v3 = edgeA.m_vertex3;\n\n  const hasVertex0 = edgeA.m_hasVertex0;\n  const hasVertex3 = edgeA.m_hasVertex3;\n\n  const edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  const normal1 = Vec2.neo(edge1.y, -edge1.x);\n  const offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  let offset0 = 0.0;\n  let offset2 = 0.0;\n  let convex1 = false;\n  let convex2 = false;\n\n  let normal0;\n  let normal2;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    const edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.crossVec2Vec2(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    const edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.crossVec2Vec2(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  let front;\n  const normal = Vec2.zero();\n  const lowerLimit = Vec2.zero();\n  const upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal0);\n        upperLimit.setVec2(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal0);\n        upperLimit.setVec2(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal1);\n        upperLimit.setVec2(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal1);\n        upperLimit.setVec2(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setVec2(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setVec2(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setVec2(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setVec2(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setVec2(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.setVec2(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setVec2(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setVec2(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.setVec2(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.setVec2(normal1);\n      upperLimit.setVec2(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (let i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  const radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = EPAxisType.e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (let i = 0; i < polygonBA.count; ++i) {\n      const s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  // @ts-ignore\n  if (edgeAxis.type == EPAxisType.e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = EPAxisType.e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    const perp = Vec2.neo(-normal.y, normal.x);\n\n    for (let i = 0; i < polygonBA.count; ++i) {\n      const n = Vec2.neg(polygonBA.normals[i]);\n\n      const s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      const s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      const s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = EPAxisType.e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = EPAxisType.e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != EPAxisType.e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  const k_relativeTol = 0.98;\n  const k_absoluteTol = 0.001;\n\n  let primaryAxis;\n  if (polygonAxis.type == EPAxisType.e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  const ie = [ new ClipVertex(), new ClipVertex() ];\n\n  if (primaryAxis.type == EPAxisType.e_edgeA) {\n    manifold.type = ManifoldType.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    let bestIndex = 0;\n    let bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (let i = 1; i < polygonBA.count; ++i) {\n      const value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    const i1 = bestIndex;\n    const i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = ContactFeatureType.e_face;\n    ie[0].id.cf.typeB = ContactFeatureType.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = ContactFeatureType.e_face;\n    ie[1].id.cf.typeB = ContactFeatureType.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.setVec2(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = ManifoldType.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = ContactFeatureType.e_vertex;\n    ie[0].id.cf.typeB = ContactFeatureType.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = ContactFeatureType.e_vertex;\n    ie[1].id.cf.typeB = ContactFeatureType.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.setVec2(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.setNum(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  const clipPoints1 = [ new ClipVertex(), new ClipVertex() ];\n  const clipPoints2 = [ new ClipVertex(), new ClipVertex() ];\n\n  let np;\n\n  // Clip to box side 1\n  np = clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == EPAxisType.e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  let pointCount = 0;\n  for (let i = 0; i < Settings.maxManifoldPoints; ++i) {\n    const separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      const cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == EPAxisType.e_edgeA) {\n        cp.localPoint = Transform.mulTVec2(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","export * from './serializer/index';\n\nexport * from './common/Math';\n\nexport * from './common/Vec2';\nexport * from './common/Vec3';\nexport * from './common/Mat22';\nexport * from './common/Mat33';\nexport * from './common/Transform';\nexport * from './common/Rot';\n\nexport * from './collision/AABB';\n\nexport * from './collision/Shape';\nexport * from './dynamics/Fixture';\nexport * from './dynamics/Body';\nexport * from './dynamics/Contact';\nexport * from './dynamics/Joint';\nexport * from './dynamics/World';\n\nexport * from './collision/shape/CircleShape';\nexport * from './collision/shape/EdgeShape';\nexport * from './collision/shape/PolygonShape';\nexport * from './collision/shape/ChainShape';\nexport * from './collision/shape/BoxShape';\n\nexport * from './collision/shape/CollideCircle';\nexport * from './collision/shape/CollideEdgeCircle';\nexport * from './collision/shape/CollidePolygon';\nexport * from './collision/shape/CollideCirclePolygon';\nexport * from './collision/shape/CollideEdgePolygon';\n\nexport * from './dynamics/joint/DistanceJoint';\nexport * from './dynamics/joint/FrictionJoint';\nexport * from './dynamics/joint/GearJoint';\nexport * from './dynamics/joint/MotorJoint';\nexport * from './dynamics/joint/MouseJoint';\nexport * from './dynamics/joint/PrismaticJoint';\nexport * from './dynamics/joint/PulleyJoint';\nexport * from './dynamics/joint/RevoluteJoint';\nexport * from './dynamics/joint/RopeJoint';\nexport * from './dynamics/joint/WeldJoint';\nexport * from './dynamics/joint/WheelJoint';\n\nexport * from './Settings';\n\nexport * from './common/Sweep';\nexport * from './collision/Manifold';\nexport * from './collision/Distance';\nexport * from './collision/TimeOfImpact';\nexport * from './collision/DynamicTree';\nexport * from './util/stats';\n\nimport { math } from './common/Math';\n\nexport const Math = math;\n\nimport { CollidePolygons } from './collision/shape/CollidePolygon';\nimport { Settings } from './Settings';\nimport { Sweep } from './common/Sweep';\nimport { DynamicTree } from './collision/DynamicTree';\nimport { Manifold } from './collision/Manifold';\nimport { Distance } from './collision/Distance';\nimport { TimeOfImpact } from './collision/TimeOfImpact';\nimport { stats } from './util/stats';\n\n/** @deprecated Merged with main namespace */\nexport const internal = {\n  CollidePolygons,\n  Settings,\n  Sweep,\n  Manifold,\n  Distance,\n  TimeOfImpact,\n  DynamicTree,\n  stats\n};\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","options","input","defaults","output","key","getOwnPropertySymbols","symbols","symbol","propertyIsEnumerable","math","Math","EPSILON","isFinite","x","isNaN","assert","nextPowerOfTwo","isPowerOfTwo","mod","num","min","max","clamp","random","Vec2","y","_serialize","_deserialize","data","obj","zero","neo","clone","v","toString","JSON","stringify","isValid","o","setZero","set","setNum","setVec2","value","wSet","a","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","m","lengthOf","lengthSquared","normalize","invLength","sqrt","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","crossVec2Vec2","crossVec2Num","crossNumVec2","addCross","addCrossVec2Num","addCrossNumVec2","combine","mulNumVec2","mulVec2Num","neg","abs","mid","upper","lower","lengthSqr","scale","r","scaleFn","translateFn","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","aabb","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","rayCast","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Settings","defineProperty","linearSlop","maxTranslation","maxRotation","get","pow","linearSleepTolerance","angularSleepTolerance","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","angularSlop","PI","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","baumgarte","toiBaugarte","timeToSleep","Pool","opts","_list","_max","_createCount","_outCount","_inCount","_discardCount","_createFn","_outFn","allocate","_inFn","release","_discardFn","discard","size","item","shift","push","TreeNode","id","userData","parent","child1","child2","height","isLeaf","DynamicTree","inputPool","stack","stackPool","iteratorPool","Iterator","iterator","close","m_root","m_nodes","m_lastProxyId","m_pool","getUserData","getFatAABB","allocateNode","node","freeNode","createProxy","insertLeaf","destroyProxy","removeLeaf","moveProxy","leaf","leafAABB","index","area","combinedAABB","combinedArea","cost","inheritanceCost","cost1","oldArea","cost2","sibling","oldParent","newParent","balance","grandParent","iA","A","B","C","F","G","D","E","getHeight","getAreaRatio","rootArea","totalArea","it","preorder","next","computeHeight","height1","height2","validateStructure","validateMetrics","validate","getMaxBalance","maxBalance","rebuildBottomUp","nodes","count","minCost","iMin","jMin","aabbi","j","aabbj","parent_1","shiftOrigin","newOrigin","query","queryCallback","pop","rayCastCallback","abs_v","segmentAABB","subInput","c","h","parents","states","root","BroadPhase","_this","m_tree","m_proxyCount","m_moveBuffer","proxyId","m_queryProxyId","proxyIdA","proxyIdB","userDataA","userDataB","m_callback","aabbA","aabbB","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","bufferMove","unbufferMove","displacement","touchProxy","updatePairs","addPairCallback","fatAABB","Rot","angle","setAngle","setRot","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Transform","position","rotation","q","xf","setTransform","isArray","arr","mulXf","mulAll","mulFn","mulTXf","px","py","Sweep","localCenter","alpha0","c0","a0","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Velocity","Position","Shape","m_type","m_radius","FixtureDefDefault","friction","restitution","density","isSensor","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","fixture","childIndex","Fixture","body","shape","def","m_body","m_friction","m_restitution","m_density","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","m_next","m_proxies","childCount","getChildCount","m_userData","_reset","getBody","broadPhase","m_world","m_broadPhase","destroyProxies","createProxies","m_xf","resetMassData","restore","getType","getShape","setSensor","sensor","setAwake","setUserData","getNext","getDensity","setDensity","getFriction","setFriction","getRestitution","setRestitution","testPoint","getMassData","massData","computeMass","getAABB","proxy","computeAABB","synchronize","xf1","xf2","aabb1","aabb2","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","setFilterGroupIndex","getFilterCategoryBits","setFilterCategoryBits","getFilterMaskBits","setFilterMaskBits","edge","getContactList","contact","fixtureA","getFixtureA","fixtureB","getFixtureB","flagForFiltering","world","getWorld","shouldCollide","collideA","collideB","STATIC","KINEMATIC","DYNAMIC","BodyDefDefault","type","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","MassData","mass","center","I","Body","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_islandFlag","m_toiFlag","m_mass","m_invMass","m_I","m_invI","m_sweep","c_velocity","c_position","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_contactList","m_fixtureList","m_prev","m_destroyed","fixtures","_addFixture","isWorldLocked","isLocked","getFixtureList","getJointList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","synchronizeFixtures","ce","ce0","destroyContact","proxyCount","isBullet","setBullet","flag","isSleepingAllowed","setSleepingAllowed","isAwake","isActive","setActive","isFixedRotation","setFixedRotation","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","localPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","oldCenter","setMassData","applyForce","force","point","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","impulse","applyAngularImpulse","jn","other","joint","m_collideConnected","m_newFixture","createFixture","fixdef","destroyFixture","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","JointEdge","prev","Joint","bodyA","bodyB","m_edgeA","m_edgeB","m_bodyA","m_bodyB","collideConnected","getBodyA","getBodyB","getCollideConnected","stats","gjkCalls","gjkIters","gjkMaxIters","toiTime","toiMaxTime","toiCalls","toiIters","toiMaxIters","toiRootIters","toiMaxRootIters","newline","string","name_1","Timer","Date","now","time","DistanceInput","proxyA","DistanceProxy","proxyB","transformA","transformB","useRadii","DistanceOutput","pointA","pointB","SimplexCache","metric","indexA","indexB","Distance","cache","xfA","xfB","simplex","Simplex","readCache","vertices","m_v","k_maxIters","saveA","saveB","saveCount","iter","m_count","solve","getClosestPoint","getSearchDirection","vertex","getSupport","wA","getVertex","wB","duplicate","getWitnessPoints","iterations","writeCache","rA","rB","m_buffer","m_vertices","getVertexCount","bestIndex","bestValue","getSupportVertex","computeDistanceProxy","SimplexVertex","m_v1","m_v2","m_v3","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","shapeA","shapeB","Input","Output","Proxy","Cache","TOIOutputState","TOIInput","sweepA","sweepB","exports","TOIOutput","SeparationFunctionType","TimeOfImpact","timer","state","e_unknown","tMax","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","evaluate","e_failed","rootIterCount","a1","a2","m_proxyA","m_proxyB","m_localPoint","m_axis","m_sweepA","m_sweepB","e_points","localPointA","localPointB","e_faceB","localPointB1","localPointB2","e_faceA","localPointA1","localPointA2","compute","find","axisA","axisB","TimeStep","dt","inv_dt","velocityIterations","positionIterations","warmStarting","blockSolve","inv_dt0","dtRatio","reset","s_subStep","ContactImpulse","normals","tangents","v_points","normalImpulse","tangentImpulse","Solver","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","solveWorld","step","m_bodyList","seed","isEnabled","isTouching","sensorA","m_fixtureA","sensorB","m_fixtureB","je","solveIsland","gravity","m_gravity","m_allowSleep","initConstraint","initVelocityConstraint","warmStartConstraint","initVelocityConstraints","solveVelocityConstraints","solveVelocityConstraint","storeConstraintImpulses","translation","maxTranslationSquared","ratio","maxRotationSquared","positionSolved","minSeparation","separation","solvePositionConstraint","contactsOkay","jointsOkay","jointOkay","solvePositionConstraints","postSolveIsland","minSleepTime","linTolSqr","linearSleepToleranceSqr","angTolSqr","angularSleepToleranceSqr","solveWorldTOI","m_stepComplete","m_toiCount","m_toi","minContact","minAlpha","fA_1","fB_1","bA_1","bB_1","activeA","activeB","getChildIndexA","getChildIndexB","fA","fB","bA","bB","backup1","backup2","update","bodies","backup","solveIslandTOI","findNewContacts","m_subStepping","setEnabled","subStep","toiA","toiB","solvePositionConstraintTOI","postSolve","m_impulse","ManifoldType","ContactFeatureType","PointState","Mat22","ex","ey","getInverse","det","imx","mx","mulMat22","mulTMat22","mx1","mx2","ClipVertex","ContactID","Manifold","localNormal","points","ManifoldPoint","pointCount","getWorldManifold","wm","radiusA","radiusB","WorldManifold","separations","e_circles","dist","cA","cB","planePoint","clipPoint","clipSegmentToLine","getPointStates","cf","ContactFeature","typeA","typeB","state1","state2","manifold1","manifold2","removeState","persistState","addState","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","ContactEdge","mixFriction","friction1","friction2","mixRestitution","restitution1","restitution2","s_registers","VelocityConstraintPoint","normalMass","tangentMass","velocityBias","Contact","evaluateFcn","m_manifold","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_normal","v_normalMass","v_K","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","m_nodeA","m_nodeB","m_indexA","m_indexB","m_evaluateFcn","manifold","getManifold","v_invMassA","v_invMassB","v_invIA","v_invIB","v_friction","v_restitution","v_tangentSpeed","v_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","p_radiusA","p_radiusB","p_type","p_pointCount","cp","vcp","worldManifold","resetFriction","resetRestitution","setTangentSpeed","speed","getTangentSpeed","listener","oldManifold","touching","wasTouching","nmp","omp","beginContact","endContact","preSolve","_solvePositionConstraint","toi","positionA","positionB","localCenterA","localCenterB","mA","mB","iB","aA","aB","rnA","rnB","K","P","velocityA","velocityB","vA","vB","kNormal","tangent","rtA","rtB","kTangent","vRel","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","addType","type1","type2","callback","destroy","WorldDefDefault","continuousPhysics","subStepping","World","s_step","m_solver","m_contactCount","m_bodyCount","m_jointCount","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","joints","getBodyList","context","_addBody","createJoint","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","point1","point2","createBody","arg1","arg2","createDynamicBody","createKinematicBody","destroyBody","je0","destroyJoint","f0","timeStep","updateContacts","createContact","next_c","on","name","_listeners","off","listeners","indexOf","splice","arg3","l","Vec3","z","EdgeShape","_super","v1","v2","TYPE","polygonRadius","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","vertex1","vertex2","vertex0","vertex3","hasVertex0","hasVertex3","setPrevVertex","setNextVertex","getRadius","setNext","getNextVertex","setPrev","getPrevVertex","_set","_clone","e","numerator","denominator","rr","Edge","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","m_isLoop","_createLoop","_createChain","isLoop","hasPrevVertex","hasNextVertex","prevVertex","nextVertex","getChildEdge","Chain","PolygonShape","m_centroid","m_normals","_setAsBox","ps","unique","linearSlopSquared","i0","x0","hull","ih","ie","i1","i2","vs","pRef","inv3","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","pLocal","minX","minY","maxX","maxY","k_inv3","ex1","ey1","ex2","ey2","Polygon","BoxShape","Box","CircleShape","m_p","radius","sigma","Circle","DEFAULTS","frequencyHz","dampingRatio","DistanceJoint","anchorA","anchorB","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","gamma","bias","_setAnchors","getLocalAnchorA","getLocalAnchorB","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","getAnchorA","getAnchorB","getReactionForce","m_u","getReactionTorque","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","qA","qB","m_rA","m_rB","crAu","crBu","invMass","omega","k","vpA","vpB","Cdot","u","maxForce","maxTorque","FrictionJoint","anchor","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","m_linearMass","m_angularMass","oldImpulse","maxImpulse","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","RevoluteJoint","m_limitState","m_referenceAngle","referenceAngle","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","getReferenceAngle","getJointAngle","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","getMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","m_motorMass","jointAngle","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","lowerTranslation","upperTranslation","maxMotorForce","PrismaticJoint","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_K","getLocalAxisA","getJointTranslation","setMaxMotorForce","getMaxMotorForce","getMotorForce","m_a1","m_a2","m_s1","m_s2","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","impulse1","GearJoint","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","getJoint1","getJoint2","setRatio","getRatio","m_JvAC","m_JwA","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","vC","wC","vD","qC","qD","m_JwC","rC","m_JvBD","m_JwB","m_JwD","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","MotorJoint","m_linearOffset","linearOffset","m_angularOffset","angularOffset","m_correctionFactor","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","getAngularOffset","m_linearError","m_angularError","inv_h","MouseJoint","m_targetA","m_beta","m_C","_localAnchorB","setTarget","getTarget","velocity","PulleyJoint","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","m_uB","m_uA","ruA","ruB","PA","PB","uA","uB","maxLength","RopeJoint","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","WeldJoint","invM","impulse2","WheelJoint","m_ax","m_ay","localAxis","m_springMass","m_springImpulse","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","m_sAy","m_sBy","m_sAx","m_sBx","damp","ay","sAy","sBy","SID","Serializer","rootClass","preSerialize","postSerialize","preDeserialize","postDeserialize","refTypes","restoreTypes","CLASS_BY_TYPE_PROP","_a","toJson","json","queue","refMap","storeRef","typeName","__sid","ref","refIndex","refType","top","serialize","newValue","str","fromJson","deserialize","cls","ctx","deserializer","findDeserilizer","restoreRef","serializer","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","chain","edgeA","Q","P_1","d_1","A1","B1","P_2","d_2","B2","A2","den","findMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","CollidePolygons","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","findIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","CollidePolygonCircle","EPAxisType","VertexType","polygonA","cLocal","normalIndex","vertexCount","vertIndex1","vertIndex2","u1","u2","faceCenter","CollideEdgePolygon","EPAxis","TempPolygon","ReferenceFace","sideNormal1","sideNormal2","edgeAxis","polygonAxis","polygonBA","rf","polygonB","centroidB","v0","v3","normal0","normal2","front","offset1","offset0","offset2","convex1","convex2","edge0","edge2","lowerLimit","upperLimit","e_edgeA","e_edgeB","primaryAxis","internal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,MAC3EN,EAAGC,IAGrB,SAASS,EAAUV,EAAGC,GACzB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIU,UAAU,uBAAyBC,OAAOX,GAAK,iCAE7D,SAASY,IAAOC,KAAKC,YAAcf,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOc,OAAOf,IAAMY,EAAGN,UAAYN,EAAEM,UAAW,IAAIM,GAG5E,IAAII,EAAW,WAQlB,OAPAA,EAAWf,OAAOgB,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIf,KADTc,EAAIG,UAAUF,GACOnB,OAAOK,UAAUC,eAAeC,KAAKW,EAAGd,KAAIa,EAAEb,GAAKc,EAAEd,IAE9E,OAAOa,IAEKM,MAAMX,KAAMS,YCvCnBG,EAAU,SAAYC,EAAUC,GACvCD,MAAAA,IAEFA,EAAQ,IAGV,IAAME,EAAMZ,EAAA,GAAOU,GAGnB,IAAK,IAAMG,KAAOF,EACZA,EAASpB,eAAesB,SAA8B,IAAfH,EAAMG,KAC/CD,EAAOC,GAAOF,EAASE,IAI3B,GAA4C,mBAAjC5B,OAAO6B,sBAEhB,IADA,IAAMC,EAAU9B,OAAO6B,sBAAsBH,GACpCP,EAAI,EAAGA,EAAIW,EAAQR,OAAQH,IAAK,CACvC,IAAMY,EAASD,EAAQX,GACnBO,EAASM,qBAAqBD,SAAoC,IAAlBN,EAAMM,KACxDJ,EAAOI,GAAUL,EAASK,IAKhC,OAAOJ,GCDTM,EAAAjC,OAAAgB,OAAAhB,OAAAc,OAAAoB,MAAA,CACIC,QAAS,KAKTC,SAAC,SAAAC,GACG,MAAqB,iBAANA,GAAmBD,SAASC,KAAOC,MAAMD,IAE5DE,OAAC,SAAAF,KAUDG,eAAgB,SAAUH,GAOtB,OALAA,GAAMA,GAAK,EACXA,GAAMA,GAAK,EACXA,GAAMA,GAAK,EACdA,GAAAA,GAAA,GACGA,GAAMA,GAAK,IACR,GAEPI,aAAc,SAAAJ,GACV,OAAOA,EAAG,GAAA,IAAAA,EAAAA,EAAA,IAEdK,IAAK,SAAUC,EAAAC,EAAAC,GASX,YARS,IAAAD,GACbC,EAAA,EACJD,EAAA,QAEgC,IAARC,IACpBA,EAAAD,EACJA,EAAA,GAEYC,EAAMD,GACND,GAAEA,EAAAC,IAAAC,EAAAD,KACAD,EAAA,EAAAE,EAAAD,IAGFD,GAAEA,EAAAE,IAAAD,EAAAC,KACTF,GAAA,EAAAC,EAAAC,IAMDC,MAAO,SAAUH,EAAaC,EAAQC,GACrC,OAAAF,EAAAC,EACDA,EAEaD,EAAME,EAClBA,EAGYF,GAQbI,OAAQ,SAAUH,EAAcC,GAS5B,YARmB,IAARD,GACPC,EAAM,EACbD,EAAA,QAE2B,IAARC,IACZA,EAAED,EACFA,EAAE,GAECA,IAACC,EAAAD,EAAAV,KAAAa,UAAAF,EAAAD,GAAAA,KCjEhBI,EAAA,WAQE,SAAYA,EAAAX,EAAIY,GACd,KAA8BrC,gBAAgBoC,GAC5C,OAAO,IAAIA,EAAKX,EAAGY,QAEJ,IAANZ,GACTzB,KAAKyB,EAAI,EACTzB,KAAKqC,EAAI,GACa,iBAANZ,GAChBzB,KAAKyB,EAAIA,EAAEA,EACXzB,KAAKqC,EAAIZ,EAAEY,IAEXrC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,GAskBf,OAhkBED,EAAA3C,UAAA6C,WAAA,WACE,MAAO,CACLb,EAAGzB,KAAKyB,EACRY,EAAGrC,KAAKqC,IAKLD,EAAYG,aAAnB,SAAoBC,GAClB,IAAMC,EAAMrD,OAAOc,OAAOkC,EAAK3C,WAG/B,OAFAgD,EAAIhB,EAAIe,EAAKf,EACbgB,EAAIJ,EAAIG,EAAKH,EACNI,GAGFL,EAAAM,KAAP,WACE,IAAMD,EAAMrD,OAAOc,OAAOkC,EAAK3C,WAG/B,OAFAgD,EAAIhB,EAAI,EACRgB,EAAIJ,EAAI,EACDI,GAIFL,EAAAO,IAAP,SAAWlB,EAAWY,GACpB,IAAMI,EAAMrD,OAAOc,OAAOkC,EAAK3C,WAG/B,OAFAgD,EAAIhB,EAAIA,EACRgB,EAAIJ,EAAIA,EACDI,GAGFL,EAAKQ,MAAZ,SAAaC,GAEX,OAAOT,EAAKO,IAAIE,EAAEpB,EAAGoB,EAAER,IAIzBD,EAAA3C,UAAAqD,SAAA,WACE,OAAOC,KAAKC,UAAUhD,OAMjBoC,EAAOa,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGnB,EAAKE,SAASiB,EAAIhB,IAAMH,EAAKE,SAASiB,EAAIJ,KAG5CD,EAAMT,OAAb,SAAcuB,KAIdd,EAAA3C,UAAAmD,MAAA,WACE,OAAOR,EAAKQ,MAAM5C,OAQpBoC,EAAA3C,UAAA0D,QAAA,WAGE,OAFAnD,KAAKyB,EAAI,EACTzB,KAAKqC,EAAI,EACFrC,MAWToC,EAAA3C,UAAA2D,IAAA,SAAI3B,EAAGY,GAWL,MAViB,iBAANZ,GAETzB,KAAKyB,EAAIA,EAAEA,EACXzB,KAAKqC,EAAIZ,EAAEY,IAIXrC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,GAEJrC,MAQRoC,EAAA3C,UAAA4D,OAAA,SAAO5B,EAAWY,GAMjB,OAHArC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,EAEFrC,MAQToC,EAAO3C,UAAA6D,QAAP,SAAQC,GAKN,OAHAvD,KAAKyB,EAAI8B,EAAM9B,EACfzB,KAAKqC,EAAIkB,EAAMlB,EAERrC,MAOToC,EAAI3C,UAAA+D,KAAJ,SAAKC,EAAWZ,EAAc1D,EAAYuE,GACxC,YAAiB,IAANvE,QAAkC,IAANuE,EAC9B1D,KAAK2D,WAAWF,EAAGZ,EAAG1D,EAAGuE,GAEzB1D,KAAK4D,OAAOH,EAAGZ,IAO1BT,EAAU3C,UAAAkE,WAAV,SAAWF,EAAWZ,EAAc1D,EAAWuE,GAK7C,IAAMjC,EAAIgC,EAAIZ,EAAEpB,EAAItC,EAAIuE,EAAEjC,EACpBY,EAAIoB,EAAIZ,EAAER,EAAIlD,EAAIuE,EAAErB,EAK1B,OAFArC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,EACFrC,MAGToC,EAAA3C,UAAAmE,OAAA,SAAOH,EAAWZ,GAGhB,IAAMpB,EAAIgC,EAAIZ,EAAEpB,EACVY,EAAIoB,EAAIZ,EAAER,EAIhB,OAFArC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,EACFrC,MAQToC,EAAG3C,UAAAoE,IAAH,SAAIH,GAIF,OAFA1D,KAAKyB,GAAKiC,EAAEjC,EACZzB,KAAKqC,GAAKqB,EAAErB,EACLrC,MAOToC,EAAI3C,UAAAqE,KAAJ,SAAKL,EAAWZ,EAAc1D,EAAYuE,GACxC,YAAiB,IAANvE,QAAkC,IAANuE,EAC9B1D,KAAK+D,WAAWN,EAAGZ,EAAG1D,EAAGuE,GAEzB1D,KAAKgE,OAAOP,EAAGZ,IAO1BT,EAAU3C,UAAAsE,WAAV,SAAWN,EAAWZ,EAAc1D,EAAWuE,GAM7C,IAAMjC,EAAIgC,EAAIZ,EAAEpB,EAAItC,EAAIuE,EAAEjC,EACpBY,EAAIoB,EAAIZ,EAAER,EAAIlD,EAAIuE,EAAErB,EAK1B,OAFArC,KAAKyB,GAAKA,EACVzB,KAAKqC,GAAKA,EACHrC,MAGToC,EAAA3C,UAAAuE,OAAA,SAAOP,EAAWZ,GAGhB,IAAMpB,EAAIgC,EAAIZ,EAAEpB,EACVY,EAAIoB,EAAIZ,EAAER,EAIhB,OAFArC,KAAKyB,GAAKA,EACVzB,KAAKqC,GAAKA,EACHrC,MAMToC,EAAI3C,UAAAwE,KAAJ,SAAKR,EAAWZ,EAAc1D,EAAYuE,GACxC,YAAiB,IAANvE,QAAkC,IAANuE,EAC9B1D,KAAKkE,WAAWT,EAAGZ,EAAG1D,EAAGuE,GAEzB1D,KAAKmE,OAAOV,EAAGZ,IAM1BT,EAAU3C,UAAAyE,WAAV,SAAWT,EAAWZ,EAAc1D,EAAWuE,GAK7C,IAAMjC,EAAIgC,EAAIZ,EAAEpB,EAAItC,EAAIuE,EAAEjC,EACpBY,EAAIoB,EAAIZ,EAAER,EAAIlD,EAAIuE,EAAErB,EAK1B,OAFArC,KAAKyB,GAAKA,EACVzB,KAAKqC,GAAKA,EACHrC,MAGToC,EAAA3C,UAAA0E,OAAA,SAAOV,EAAWZ,GAGhB,IAAMpB,EAAIgC,EAAIZ,EAAEpB,EACVY,EAAIoB,EAAIZ,EAAER,EAIhB,OAFArC,KAAKyB,GAAKA,EACVzB,KAAKqC,GAAKA,EACHrC,MAQToC,EAAG3C,UAAA2E,IAAH,SAAIV,GAIF,OAFA1D,KAAKyB,GAAKiC,EAAEjC,EACZzB,KAAKqC,GAAKqB,EAAErB,EACLrC,MAQToC,EAAG3C,UAAA4E,IAAH,SAAIC,GAIF,OAFAtE,KAAKyB,GAAK6C,EACVtE,KAAKqC,GAAKiC,EACHtE,MAQToC,EAAA3C,UAAAiB,OAAA,WACE,OAAO0B,EAAKmC,SAASvE,OAMvBoC,EAAA3C,UAAA+E,cAAA,WACE,OAAOpC,EAAKoC,cAAcxE,OAQ5BoC,EAAA3C,UAAAgF,UAAA,WACE,IAAM/D,EAASV,KAAKU,SACpB,GAAIA,EAASY,EAAKC,QAChB,OAAO,EAET,IAAMmD,EAAY,EAAMhE,EAGxB,OAFAV,KAAKyB,GAAKiD,EACV1E,KAAKqC,GAAKqC,EACHhE,GAQF0B,EAAQmC,SAAf,SAAgB1B,GAEd,OAAOvB,EAAKqD,KAAK9B,EAAEpB,EAAIoB,EAAEpB,EAAIoB,EAAER,EAAIQ,EAAER,IAMhCD,EAAaoC,cAApB,SAAqB3B,GAEnB,OAAOA,EAAEpB,EAAIoB,EAAEpB,EAAIoB,EAAER,EAAIQ,EAAER,GAGtBD,EAAAwC,SAAP,SAAgB/B,EAAca,GAG5B,IAAMmB,EAAKhC,EAAEpB,EAAIiC,EAAEjC,EACbqD,EAAKjC,EAAER,EAAIqB,EAAErB,EACnB,OAAOf,EAAKqD,KAAKE,EAAKA,EAAKC,EAAKA,IAG3B1C,EAAA2C,gBAAP,SAAuBlC,EAAca,GAGnC,IAAMmB,EAAKhC,EAAEpB,EAAIiC,EAAEjC,EACbqD,EAAKjC,EAAER,EAAIqB,EAAErB,EACnB,OAAOwC,EAAKA,EAAKC,EAAKA,GAGjB1C,EAAA4C,SAAP,SAAgBnC,EAAca,GAG5B,OAAOb,IAAMa,GAAkB,iBAANA,GAAwB,OAANA,GAAcb,EAAEpB,IAAMiC,EAAEjC,GAAKoB,EAAER,IAAMqB,EAAErB,GAM7ED,EAAI6C,KAAX,SAAYpC,GAEV,OAAOT,EAAKO,KAAKE,EAAER,EAAGQ,EAAEpB,IAMnBW,EAAA8C,IAAP,SAAWrC,EAAca,GAGvB,OAAOb,EAAEpB,EAAIiC,EAAEjC,EAAIoB,EAAER,EAAIqB,EAAErB,GAatBD,EAAA+C,MAAP,SAAatC,EAAGa,GACd,MAAiB,iBAANA,EAGFtB,EAAKO,IAAIe,EAAIb,EAAER,GAAIqB,EAAIb,EAAEpB,GAEV,iBAANoB,EAGTT,EAAKO,KAAKE,EAAIa,EAAErB,EAAGQ,EAAIa,EAAEjC,GAKzBoB,EAAEpB,EAAIiC,EAAErB,EAAIQ,EAAER,EAAIqB,EAAEjC,GAOxBW,EAAAgD,cAAP,SAAqBvC,EAAca,GAGjC,OAAOb,EAAEpB,EAAIiC,EAAErB,EAAIQ,EAAER,EAAIqB,EAAEjC,GAOtBW,EAAAiD,aAAP,SAAoBxC,EAAca,GAGhC,OAAOtB,EAAKO,IAAIe,EAAIb,EAAER,GAAIqB,EAAIb,EAAEpB,IAO3BW,EAAAkD,aAAP,SAAoBzC,EAAWa,GAG7B,OAAOtB,EAAKO,KAAKE,EAAIa,EAAErB,EAAGQ,EAAIa,EAAEjC,IAS3BW,EAAAmD,SAAP,SAAgB9B,EAAGZ,EAAGa,GACpB,MAAiB,iBAANA,EAGFtB,EAAKO,IAAIe,EAAIb,EAAER,EAAIoB,EAAEhC,GAAIiC,EAAIb,EAAEpB,EAAIgC,EAAEpB,GAEtB,iBAANQ,EAGTT,EAAKO,KAAKE,EAAIa,EAAErB,EAAIoB,EAAEhC,EAAGoB,EAAIa,EAAEjC,EAAIgC,EAAEpB,QAHvC,GAYFD,EAAAoD,gBAAP,SAAuB/B,EAAcZ,EAAca,GAGjD,OAAOtB,EAAKO,IAAIe,EAAIb,EAAER,EAAIoB,EAAEhC,GAAIiC,EAAIb,EAAEpB,EAAIgC,EAAEpB,IAMvCD,EAAAqD,gBAAP,SAAuBhC,EAAcZ,EAAWa,GAG9C,OAAOtB,EAAKO,KAAKE,EAAIa,EAAErB,EAAIoB,EAAEhC,EAAGoB,EAAIa,EAAEjC,EAAIgC,EAAEpB,IAGvCD,EAAAyB,IAAP,SAAWhB,EAAca,GAGvB,OAAOtB,EAAKO,IAAIE,EAAEpB,EAAIiC,EAAEjC,EAAGoB,EAAER,EAAIqB,EAAErB,IAI9BD,EAAI0B,KAAX,SAAYL,EAAWZ,EAAS1D,EAAWuE,GACzC,YAAiB,IAANvE,QAAkC,IAANuE,EAC9BtB,EAAKsD,QAAQjC,EAAGZ,EAAG1D,EAAGuE,GAEtBtB,EAAKuD,WAAWlC,EAAGZ,IAIvBT,EAAOsD,QAAd,SAAejC,EAAWZ,EAAS1D,EAAWuE,GAC5C,OAAOtB,EAAKM,OAAOiB,WAAWF,EAAGZ,EAAG1D,EAAGuE,IAGlCtB,EAAAgC,IAAP,SAAWvB,EAAca,GAGvB,OAAOtB,EAAKO,IAAIE,EAAEpB,EAAIiC,EAAEjC,EAAGoB,EAAER,EAAIqB,EAAErB,IAM9BD,EAAAiC,IAAP,SAAWZ,EAAGtE,GACZ,MAAiB,iBAANsE,EAGFrB,EAAKO,IAAIc,EAAEhC,EAAItC,EAAGsE,EAAEpB,EAAIlD,GAET,iBAANA,EAGTiD,EAAKO,IAAIc,EAAItE,EAAEsC,EAAGgC,EAAItE,EAAEkD,QAH1B,GAOFD,EAAAwD,WAAP,SAAkBnC,EAActE,GAG9B,OAAOiD,EAAKO,IAAIc,EAAEhC,EAAItC,EAAGsE,EAAEpB,EAAIlD,IAG1BiD,EAAAuD,WAAP,SAAkBlC,EAAWtE,GAG3B,OAAOiD,EAAKO,IAAIc,EAAItE,EAAEsC,EAAGgC,EAAItE,EAAEkD,IAGjCD,EAAA3C,UAAAoG,IAAA,WAGE,OAFA7F,KAAKyB,GAAKzB,KAAKyB,EACfzB,KAAKqC,GAAKrC,KAAKqC,EACRrC,MAGFoC,EAAGyD,IAAV,SAAWhD,GAET,OAAOT,EAAKO,KAAKE,EAAEpB,GAAIoB,EAAER,IAGpBD,EAAG0D,IAAV,SAAWjD,GAET,OAAOT,EAAKO,IAAIrB,EAAKwE,IAAIjD,EAAEpB,GAAIH,EAAKwE,IAAIjD,EAAER,KAGrCD,EAAA2D,IAAP,SAAWlD,EAAca,GAGvB,OAAOtB,EAAKO,IAAkB,IAAbE,EAAEpB,EAAIiC,EAAEjC,GAAwB,IAAboB,EAAER,EAAIqB,EAAErB,KAGvCD,EAAA4D,MAAP,SAAanD,EAAca,GAGzB,OAAOtB,EAAKO,IAAIrB,EAAKW,IAAIY,EAAEpB,EAAGiC,EAAEjC,GAAIH,EAAKW,IAAIY,EAAER,EAAGqB,EAAErB,KAG/CD,EAAA6D,MAAP,SAAapD,EAAca,GAGzB,OAAOtB,EAAKO,IAAIrB,EAAKU,IAAIa,EAAEpB,EAAGiC,EAAEjC,GAAIH,EAAKU,IAAIa,EAAER,EAAGqB,EAAErB,KAGtDD,EAAK3C,UAAAyC,MAAL,SAAMD,GACJ,IAAMiE,EAAYlG,KAAKyB,EAAIzB,KAAKyB,EAAIzB,KAAKqC,EAAIrC,KAAKqC,EAClD,GAAI6D,EAAYjE,EAAMA,EAAK,CACzB,IAAMkE,EAAQlE,EAAMX,EAAKqD,KAAKuB,GAC9BlG,KAAKyB,GAAK0E,EACVnG,KAAKqC,GAAK8D,EAEZ,OAAOnG,MAGFoC,EAAAF,MAAP,SAAaW,EAAcZ,GACzB,IAAMmE,EAAIhE,EAAKO,IAAIE,EAAEpB,EAAGoB,EAAER,GAE1B,OADA+D,EAAElE,MAAMD,GACDmE,GAKFhE,EAAAiE,QAAP,SAAe5E,EAAWY,GACxB,OAAO,SAASQ,GACd,OAAOT,EAAKO,IAAIE,EAAEpB,EAAIA,EAAGoB,EAAER,EAAIA,KAM5BD,EAAAkE,YAAP,SAAmB7E,EAAWY,GAC5B,OAAO,SAASQ,GACd,OAAOT,EAAKO,IAAIE,EAAEpB,EAAIA,EAAGoB,EAAER,EAAIA,KAGpCD,KC1kBDmE,EAAA,WAIE,SAAYA,EAAAN,EAAmBD,GAC7B,KAA8BhG,gBAAgBuG,GAC5C,OAAO,IAAIA,EAAKN,EAAOD,GAGzBhG,KAAKwG,WAAapE,EAAKM,OACvB1C,KAAKyG,WAAarE,EAAKM,OAEF,iBAAVuD,GACTjG,KAAKwG,WAAWlD,QAAQ2C,GAEL,iBAAVD,EACThG,KAAKyG,WAAWnD,QAAQ0C,GACE,iBAAVC,GAChBjG,KAAKyG,WAAWnD,QAAQ2C,GA6L9B,OAtLEM,EAAA9G,UAAAwD,QAAA,WACE,OAAOsD,EAAKtD,QAAQjD,OAGfuG,EAAOtD,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGL,EAAKa,QAAQR,EAAI+D,aAAepE,EAAKa,QAAQR,EAAIgE,aAAerE,EAAKgC,IAAI3B,EAAIgE,WAAYhE,EAAI+D,YAAYhC,iBAAmB,IAG9H+B,EAAM5E,OAAb,SAAcuB,KAOdqD,EAAA9G,UAAAiH,UAAA,WACE,OAAOtE,EAAKO,IAA8C,IAAzC3C,KAAKwG,WAAW/E,EAAIzB,KAAKyG,WAAWhF,GAAoD,IAAzCzB,KAAKwG,WAAWnE,EAAIrC,KAAKyG,WAAWpE,KAMtGkE,EAAA9G,UAAAkH,WAAA,WACE,OAAOvE,EAAKO,IAA8C,IAAzC3C,KAAKyG,WAAWhF,EAAIzB,KAAKwG,WAAW/E,GAAoD,IAAzCzB,KAAKyG,WAAWpE,EAAIrC,KAAKwG,WAAWnE,KAMtGkE,EAAA9G,UAAAmH,aAAA,WACE,OAAO,GAAO5G,KAAKyG,WAAWhF,EAAIzB,KAAKwG,WAAW/E,EAAIzB,KAAKyG,WAAWpE,EAAIrC,KAAKwG,WAAWnE,IAM5FkE,EAAA9G,UAAAiG,QAAA,SAAQjC,EAAStE,GACfA,EAAIA,GAAKa,KAET,IAAM6G,EAASpD,EAAE+C,WACXM,EAASrD,EAAEgD,WACXM,EAAS5H,EAAEqH,WACXQ,EAAS7H,EAAEsH,WAEXQ,EAAS3F,EAAKU,IAAI6E,EAAOpF,EAAGsF,EAAOtF,GACnCyF,EAAS5F,EAAKU,IAAI6E,EAAOxE,EAAG0E,EAAO1E,GACnC8E,EAAS7F,EAAKW,IAAI+E,EAAOvF,EAAGqF,EAAOrF,GACnC2F,EAAS9F,EAAKW,IAAI+E,EAAO3E,EAAGyE,EAAOzE,GAEzCrC,KAAKwG,WAAWnD,OAAO4D,EAAQC,GAC/BlH,KAAKyG,WAAWpD,OAAO8D,EAAQC,IAGjCb,EAAA9G,UAAA4H,cAAA,SAAc5D,EAActE,GAC1Ba,KAAKwG,WAAWnD,OAAO/B,EAAKU,IAAIyB,EAAEhC,EAAGtC,EAAEsC,GAAIH,EAAKU,IAAIyB,EAAEpB,EAAGlD,EAAEkD,IAC3DrC,KAAKyG,WAAWpD,OAAO/B,EAAKW,IAAIwB,EAAEhC,EAAGtC,EAAEsC,GAAIH,EAAKW,IAAIwB,EAAEpB,EAAGlD,EAAEkD,KAG7DkE,EAAG9G,UAAA2D,IAAH,SAAIkE,GACFtH,KAAKwG,WAAWnD,OAAOiE,EAAKd,WAAW/E,EAAG6F,EAAKd,WAAWnE,GAC1DrC,KAAKyG,WAAWpD,OAAOiE,EAAKb,WAAWhF,EAAG6F,EAAKb,WAAWpE,IAG5DkE,EAAQ9G,UAAA8H,SAAR,SAASD,GACP,IAAIE,GAAS,EAKb,OADAA,GADAA,GADAA,GADAA,EAASA,GAAUxH,KAAKwG,WAAW/E,GAAK6F,EAAKd,WAAW/E,IACrCzB,KAAKwG,WAAWnE,GAAKiF,EAAKd,WAAWnE,IACrCiF,EAAKb,WAAWhF,GAAKzB,KAAKyG,WAAWhF,IACrC6F,EAAKb,WAAWpE,GAAKrC,KAAKyG,WAAWpE,GAI1DkE,EAAM9G,UAAAgI,OAAN,SAAOlE,GAEL,OADAgD,EAAKkB,OAAOzH,KAAMuD,GACXvD,MAGFuG,EAAAkB,OAAP,SAAcH,EAAY/D,GACxB+D,EAAKd,WAAW/E,GAAK8B,EACrB+D,EAAKd,WAAWnE,GAAKkB,EACrB+D,EAAKb,WAAWhF,GAAK8B,EACrB+D,EAAKb,WAAWpE,GAAKkB,GAGhBgD,EAAAmB,YAAP,SAAmBjE,EAAStE,GAC1B,IAAMwI,EAAMxI,EAAEqH,WAAW/E,EAAIgC,EAAEgD,WAAWhF,EACpCmG,EAAMnE,EAAE+C,WAAW/E,EAAItC,EAAEsH,WAAWhF,EAEpCoG,EAAM1I,EAAEqH,WAAWnE,EAAIoB,EAAEgD,WAAWpE,EACpCyF,EAAMrE,EAAE+C,WAAWnE,EAAIlD,EAAEsH,WAAWpE,EAE1C,QAAIsF,EAAM,GAAKE,EAAM,GAAKD,EAAM,GAAKE,EAAM,IAMtCvB,EAAAvB,SAAP,SAAgBvB,EAAStE,GACvB,OAAOiD,EAAK4C,SAASvB,EAAE+C,WAAYrH,EAAEqH,aAAepE,EAAK4C,SAASvB,EAAEgD,WAAYtH,EAAEsH,aAG7EF,EAAAwB,KAAP,SAAYtE,EAAStE,GACnB,IAAM6I,EAAK1G,EAAKW,IAAI,EAAGX,EAAKU,IAAIyB,EAAEgD,WAAWhF,EAAGtC,EAAEsH,WAAWhF,GAAKH,EAAKW,IAAI9C,EAAEqH,WAAW/E,EAAGgC,EAAE+C,WAAW/E,IAClGwG,EAAK3G,EAAKW,IAAI,EAAGX,EAAKU,IAAIyB,EAAEgD,WAAWpE,EAAGlD,EAAEsH,WAAWpE,GAAKf,EAAKW,IAAI9C,EAAEqH,WAAWnE,EAAGoB,EAAE+C,WAAWnE,IAQxG,OANWoB,EAAEgD,WAAWhF,EAAIgC,EAAE+C,WAAW/E,IAC9BgC,EAAEgD,WAAWpE,EAAIoB,EAAE+C,WAAWnE,IAE9BlD,EAAEsH,WAAWhF,EAAItC,EAAEqH,WAAW/E,IAC9BtC,EAAEsH,WAAWpE,EAAIlD,EAAEqH,WAAWnE,GAEd2F,EAAKC,GAGlC1B,EAAA9G,UAAAyI,QAAA,SAAQnH,EAAuBF,GAY7B,IATA,IAAIsH,GAAQC,EAAAA,EACRC,EAAOD,EAAAA,EAEL5I,EAAIqB,EAAMyH,GACVpJ,EAAIkD,EAAKgC,IAAIvD,EAAM0H,GAAI1H,EAAMyH,IAC7BE,EAAOpG,EAAK0D,IAAI5G,GAEhBuJ,EAASrG,EAAKM,OAEXgG,EAAe,IAAW,OAANA,EAAYA,EAAW,MAANA,EAAY,IAAM,KAC9D,GAAIF,EAAK/G,EAAIH,EAAKC,SAEhB,GAAI/B,EAAEkJ,GAAK1I,KAAKwG,WAAWkC,IAAM1I,KAAKyG,WAAWiC,GAAKlJ,EAAEkJ,GACtD,OAAO,MAEJ,CACL,IAAMC,EAAQ,EAAMzJ,EAAEwJ,GAClBE,GAAM5I,KAAKwG,WAAWkC,GAAKlJ,EAAEkJ,IAAMC,EACnCE,GAAM7I,KAAKyG,WAAWiC,GAAKlJ,EAAEkJ,IAAMC,EAGnCrI,GAAK,EAET,GAAIsI,EAAKC,EAAI,CACX,IAAMC,EAAOF,EACbA,EAAKC,EACLA,EAAKC,EACLxI,EAAI,EAaN,GATIsI,EAAKT,IACPM,EAAOtF,UACPsF,EAAOC,GAAKpI,EACZ6H,EAAOS,GAMLT,GAFJE,EAAO/G,EAAKU,IAAIqG,EAAMQ,IAGpB,OAAO,EAOb,QAAIV,EAAO,GAAOtH,EAAMkI,YAAcZ,KAKtCpH,EAAOiI,SAAWb,EAClBpH,EAAO0H,OAASA,GACT,IAITlC,EAAA9G,UAAAqD,SAAA,WACE,OAAOC,KAAKC,UAAUhD,OAEzBuG,KCrOD0C,EAAA,WAAA,SAAAA,KAiIA,OAjGE7J,OAAA8J,eAAWD,EAAiB,oBAAA,KAA5B,WAAyC,OAAOA,EAASE,WAAaF,EAASE,4CAc/E/J,OAAA8J,eAAWD,EAAa,gBAAA,KAAxB,WAAqC,OAAO,EAAMA,EAASE,4CA+C3D/J,OAAA8J,eAAWD,EAAqB,wBAAA,KAAhC,WAA6C,OAAOA,EAASG,eAAiBH,EAASG,gDAOvFhK,OAAA8J,eAAWD,EAAkB,qBAAA,KAA7B,WAA0C,OAAOA,EAASI,YAAcJ,EAASI,6CAqBjFjK,OAAA8J,eAAWD,EAAuB,0BAAA,CAAlCK,IAAA,WAA+C,OAAOhI,KAAKiI,IAAIN,EAASO,qBAAsB,oCAM9FpK,OAAA8J,eAAWD,EAAwB,2BAAA,CAAnCK,IAAA,WAAgD,OAAOhI,KAAKiI,IAAIN,EAASQ,sBAAuB,oCAzHzFR,EAAiBS,kBAAW,EAM5BT,EAAkBU,mBAAW,GAM7BV,EAAaW,cAAW,GAOxBX,EAAcY,eAAW,EAMzBZ,EAAUE,WAAW,KAOrBF,EAAWa,YAAY,EAAM,IAAQxI,KAAKyI,GAa1Cd,EAAWe,YAAW,EAOtBf,EAAcgB,eAAW,GAKzBhB,EAAgBiB,iBAAW,GAK3BjB,EAAoBkB,qBAAW,GAM/BlB,EAAiBmB,kBAAW,EAM5BnB,EAAmBoB,oBAAW,GAM9BpB,EAAoBqB,qBAAY,EAAM,IAAQhJ,KAAKyI,GAMnDd,EAAcG,eAAW,EAOzBH,EAAWI,YAAY,GAAM/H,KAAKyI,GAQlCd,EAASsB,UAAW,GACpBtB,EAAWuB,YAAW,IAOtBvB,EAAWwB,YAAW,GAKtBxB,EAAoBO,qBAAW,IAM/BP,EAAqBQ,sBAAY,EAAM,IAAQnI,KAAKyI,GAG5Dd,KC7IDyB,EAAA,WAcE,SAAAA,EAAYC,GAbZ3K,KAAK4K,MAAQ,GACb5K,KAAI6K,KAAWzC,EAAAA,EAOfpI,KAAY8K,aAAW,EACvB9K,KAAS+K,UAAW,EACpB/K,KAAQgL,SAAW,EACnBhL,KAAaiL,cAAW,EAStBjL,KAAK4K,MAAQ,GACb5K,KAAK6K,KAAOF,EAAK1I,KAAOjC,KAAK6K,KAE7B7K,KAAKkL,UAAYP,EAAKzK,OACtBF,KAAKmL,OAASR,EAAKS,SACnBpL,KAAKqL,MAAQV,EAAKW,QAClBtL,KAAKuL,WAAaZ,EAAKa,QAuD3B,OApDEd,EAAGjL,UAAAwC,IAAH,SAAIzB,GACF,MAAiB,iBAANA,GACTR,KAAK6K,KAAOrK,EACLR,MAEFA,KAAK6K,MAGdH,EAAAjL,UAAAgM,KAAA,WACE,OAAOzL,KAAK4K,MAAMlK,QAGpBgK,EAAAjL,UAAA2L,SAAA,WACE,IAAIM,EAgBJ,OAfI1L,KAAK4K,MAAMlK,OAAS,EACtBgL,EAAO1L,KAAK4K,MAAMe,SAElB3L,KAAK8K,eAEHY,EAD4B,mBAAnB1L,KAAKkL,UACPlL,KAAKkL,YAGL,IAGXlL,KAAK+K,YACsB,mBAAhB/K,KAAKmL,QACdnL,KAAKmL,OAAOO,GAEPA,GAGThB,EAAOjL,UAAA6L,QAAP,SAAQI,GACF1L,KAAK4K,MAAMlK,OAASV,KAAK6K,MAC3B7K,KAAKgL,WACqB,mBAAfhL,KAAKqL,OACdrL,KAAKqL,MAAMK,GAEb1L,KAAK4K,MAAMgB,KAAKF,KAEhB1L,KAAKiL,gBAC0B,mBAApBjL,KAAKuL,aACdG,EAAO1L,KAAKuL,WAAWG,MAM7BhB,EAAAjL,UAAAqD,SAAA,WACE,MAAO,KAAO9C,KAAK8K,aAAe,KAAO9K,KAAK+K,UAAY,KAAO/K,KAAKgL,SAAW,KAC7EhL,KAAKiL,cAAgB,KAAOjL,KAAK4K,MAAMlK,OAAS,IAAMV,KAAK6K,MAElEH,KC7DDmB,EAAA,WAWE,SAAAA,EAAYC,GARZ9L,KAAAsH,KAAa,IAAIf,EACjBvG,KAAQ+L,SAAM,KACd/L,KAAMgM,OAAgB,KACtBhM,KAAMiM,OAAgB,KACtBjM,KAAMkM,OAAgB,KAEtBlM,KAAMmM,QAAY,EAGhBnM,KAAK8L,GAAKA,EAWd,OAPED,EAAApM,UAAAqD,SAAA,WACE,OAAO9C,KAAK8L,GAAK,KAAO9L,KAAK+L,UAG/BF,EAAApM,UAAA2M,OAAA,WACE,OAAsB,MAAfpM,KAAKiM,QAEfJ,KAaDQ,EAAA,WAQE,SAAAA,IAswBQrM,KAASsM,UAAuB,IAAI5B,EAAmB,CAC7DxK,OAAA,WAEE,MAAO,IAEToL,QAAA,SAAQiB,OAIFvM,KAASwM,UAA6B,IAAI9B,EAAyB,CACzExK,OAAA,WACE,MAAO,IAEToL,QAAA,SAAQiB,GACNA,EAAM7L,OAAS,KAIXV,KAAYyM,aAAsB,IAAI/B,EAAkB,CAC9DxK,OAAA,WACE,OAAO,IAAIwM,GAEbpB,QAAA,SAAQqB,GACNA,EAASC,WA5xBX5M,KAAK6M,OAAS,KACd7M,KAAK8M,QAAU,GACf9M,KAAK+M,cAAgB,EAErB/M,KAAKgN,OAAS,IAAItC,EAAkB,CAClCxK,OAAA,WACE,OAAO,IAAI2L,KA0xBnB,OAhxBEQ,EAAW5M,UAAAwN,YAAX,SAAYnB,GAGV,OAFa9L,KAAK8M,QAAQhB,GAEdC,UAQdM,EAAU5M,UAAAyN,WAAV,SAAWpB,GAGT,OAFa9L,KAAK8M,QAAQhB,GAEdxE,MAGd+E,EAAA5M,UAAA0N,aAAA,WACE,IAAMC,EAAOpN,KAAKgN,OAAO5B,WAQzB,OAPAgC,EAAKtB,KAAO9L,KAAK+M,cACjBK,EAAKrB,SAAW,KAChBqB,EAAKpB,OAAS,KACdoB,EAAKnB,OAAS,KACdmB,EAAKlB,OAAS,KACdkB,EAAKjB,QAAU,EACfnM,KAAK8M,QAAQM,EAAKtB,IAAMsB,EACjBA,GAGTf,EAAQ5M,UAAA4N,SAAR,SAASD,GACPpN,KAAKgN,OAAO1B,QAAQ8B,GACpBA,EAAKjB,QAAU,SAERnM,KAAK8M,QAAQM,EAAKtB,KAS3BO,EAAA5M,UAAA6N,YAAA,SAAYhG,EAAYyE,GAGtB,IAAMqB,EAAOpN,KAAKmN,eAYlB,OAVAC,EAAK9F,KAAKlE,IAAIkE,GAGdf,EAAKkB,OAAO2F,EAAK9F,KAAM2B,EAASW,eAEhCwD,EAAKrB,SAAWA,EAChBqB,EAAKjB,OAAS,EAEdnM,KAAKuN,WAAWH,GAETA,EAAKtB,IAMdO,EAAY5M,UAAA+N,aAAZ,SAAa1B,GACX,IAAMsB,EAAOpN,KAAK8M,QAAQhB,GAK1B9L,KAAKyN,WAAWL,GAChBpN,KAAKqN,SAASD,IAYhBf,EAAA5M,UAAAiO,UAAA,SAAU5B,EAAYxE,EAAYpI,GAIhC,IAAMkO,EAAOpN,KAAK8M,QAAQhB,GAK1B,OAAIsB,EAAK9F,KAAKC,SAASD,KAIvBtH,KAAKyN,WAAWL,GAEhBA,EAAK9F,KAAKlE,IAAIkE,GAGdA,EAAO8F,EAAK9F,KACZf,EAAKkB,OAAOH,EAAM2B,EAASW,eAKvB1K,EAAEuC,EAAI,EACR6F,EAAKd,WAAW/E,GAAKvC,EAAEuC,EAAIwH,EAASY,eAEpCvC,EAAKb,WAAWhF,GAAKvC,EAAEuC,EAAIwH,EAASY,eAGlC3K,EAAEmD,EAAI,EACRiF,EAAKd,WAAWnE,GAAKnD,EAAEmD,EAAI4G,EAASY,eAEpCvC,EAAKb,WAAWpE,GAAKnD,EAAEmD,EAAI4G,EAASY,eAGtC7J,KAAKuN,WAAWH,IAET,IAGTf,EAAU5M,UAAA8N,WAAV,SAAWI,GAGT,GAAmB,MAAf3N,KAAK6M,OAGP,OAFA7M,KAAK6M,OAASc,OACd3N,KAAK6M,OAAOb,OAAS,MAOvB,IAFA,IAAM4B,EAAWD,EAAKrG,KAClBuG,EAAQ7N,KAAK6M,QACTgB,EAAMzB,UAAU,CACtB,IAAMH,EAAS4B,EAAM5B,OACfC,EAAS2B,EAAM3B,OAEf4B,EAAOD,EAAMvG,KAAKV,eAElBmH,EAAe,IAAIxH,EACzBwH,EAAarI,QAAQmI,EAAMvG,KAAMsG,GACjC,IAAMI,EAAeD,EAAanH,eAG5BqH,EAAO,EAAMD,EAGbE,EAAkB,GAAOF,EAAeF,GAG1CK,SACJ,GAAIlC,EAAOG,SAAU,EACb9E,EAAO,IAAIf,GACZb,QAAQkI,EAAU3B,EAAO3E,MAC9B6G,EAAQ7G,EAAKV,eAAiBsH,MACzB,EACC5G,EAAO,IAAIf,GACZb,QAAQkI,EAAU3B,EAAO3E,MAC9B,IAAM8G,EAAUnC,EAAO3E,KAAKV,eAE5BuH,EADgB7G,EAAKV,eACFwH,EAAWF,EAIhC,IAAIG,SACJ,GAAInC,EAAOE,SAAU,EACb9E,EAAO,IAAIf,GACZb,QAAQkI,EAAU1B,EAAO5E,MAC9B+G,EAAQ/G,EAAKV,eAAiBsH,MACzB,CACL,IAAM5G,GAAAA,EAAO,IAAIf,GACZb,QAAQkI,EAAU1B,EAAO5E,MACxB8G,EAAUlC,EAAO5E,KAAKV,eAE5ByH,EADgB/G,EAAKV,eACHwH,EAAUF,EAI9B,GAAID,EAAOE,GAASF,EAAOI,EACzB,MAKAR,EADEM,EAAQE,EACFpC,EAEAC,EAIZ,IAAMoC,EAAUT,EAGVU,EAAYD,EAAQtC,OACpBwC,EAAYxO,KAAKmN,eA6BvB,IA5BAqB,EAAUxC,OAASuC,EACnBC,EAAUzC,SAAW,KACrByC,EAAUlH,KAAK5B,QAAQkI,EAAUU,EAAQhH,MACzCkH,EAAUrC,OAASmC,EAAQnC,OAAS,EAEnB,MAAboC,GAEEA,EAAUtC,SAAWqC,EACvBC,EAAUtC,OAASuC,EAEnBD,EAAUrC,OAASsC,EAGrBA,EAAUvC,OAASqC,EACnBE,EAAUtC,OAASyB,EACnBW,EAAQtC,OAASwC,EACjBb,EAAK3B,OAASwC,IAGdA,EAAUvC,OAASqC,EACnBE,EAAUtC,OAASyB,EACnBW,EAAQtC,OAASwC,EACjBb,EAAK3B,OAASwC,EACdxO,KAAK6M,OAAS2B,GAIhBX,EAAQF,EAAK3B,OACG,MAAT6B,GAAe,CAGd5B,GAFN4B,EAAQ7N,KAAKyO,QAAQZ,IAEA5B,OACfC,EAAS2B,EAAM3B,OAKrB2B,EAAM1B,OAAS,EAAI7K,EAAKW,IAAIgK,EAAOE,OAAQD,EAAOC,QAClD0B,EAAMvG,KAAK5B,QAAQuG,EAAO3E,KAAM4E,EAAO5E,MAEvCuG,EAAQA,EAAM7B,SAMlBK,EAAU5M,UAAAgO,WAAV,SAAWE,GACT,GAAIA,IAAS3N,KAAK6M,OAAlB,CAKA,IAEIyB,EAFEtC,EAAS2B,EAAK3B,OACd0C,EAAc1C,EAAOA,OAQ3B,GALEsC,EADEtC,EAAOC,SAAW0B,EACV3B,EAAOE,OAEPF,EAAOC,OAGA,MAAfyC,EAAqB,CAEnBA,EAAYzC,SAAWD,EACzB0C,EAAYzC,OAASqC,EAErBI,EAAYxC,OAASoC,EAEvBA,EAAQtC,OAAS0C,EACjB1O,KAAKqN,SAASrB,GAId,IADA,IAAI6B,EAAQa,EACI,MAATb,GAAe,CAGpB,IAAM5B,GAFN4B,EAAQ7N,KAAKyO,QAAQZ,IAEA5B,OACfC,EAAS2B,EAAM3B,OAErB2B,EAAMvG,KAAK5B,QAAQuG,EAAO3E,KAAM4E,EAAO5E,MACvCuG,EAAM1B,OAAS,EAAI7K,EAAKW,IAAIgK,EAAOE,OAAQD,EAAOC,QAElD0B,EAAQA,EAAM7B,aAGhBhM,KAAK6M,OAASyB,EACdA,EAAQtC,OAAS,KACjBhM,KAAKqN,SAASrB,QAvCdhM,KAAK6M,OAAS,MAiDlBR,EAAO5M,UAAAgP,QAAP,SAAQE,GAGN,IAAMC,EAAID,EACV,GAAIC,EAAExC,UAAYwC,EAAEzC,OAAS,EAC3B,OAAOwC,EAGT,IAAME,EAAID,EAAE3C,OACN6C,EAAIF,EAAE1C,OAENuC,EAAUK,EAAE3C,OAAS0C,EAAE1C,OAG7B,GAAIsC,EAAU,EAAG,CACf,IAAMM,EAAID,EAAE7C,OACN+C,EAAIF,EAAE5C,OAuCZ,OApCA4C,EAAE7C,OAAS2C,EACXE,EAAE9C,OAAS4C,EAAE5C,OACb4C,EAAE5C,OAAS8C,EAGK,MAAZA,EAAE9C,OACA8C,EAAE9C,OAAOC,SAAW0C,EACtBG,EAAE9C,OAAOC,OAAS6C,EAElBA,EAAE9C,OAAOE,OAAS4C,EAGpB9O,KAAK6M,OAASiC,EAIZC,EAAE5C,OAAS6C,EAAE7C,QACf2C,EAAE5C,OAAS6C,EACXH,EAAE1C,OAAS8C,EACXA,EAAEhD,OAAS4C,EACXA,EAAEtH,KAAK5B,QAAQmJ,EAAEvH,KAAM0H,EAAE1H,MACzBwH,EAAExH,KAAK5B,QAAQkJ,EAAEtH,KAAMyH,EAAEzH,MAEzBsH,EAAEzC,OAAS,EAAI7K,EAAKW,IAAI4M,EAAE1C,OAAQ6C,EAAE7C,QACpC2C,EAAE3C,OAAS,EAAI7K,EAAKW,IAAI2M,EAAEzC,OAAQ4C,EAAE5C,UAEpC2C,EAAE5C,OAAS8C,EACXJ,EAAE1C,OAAS6C,EACXA,EAAE/C,OAAS4C,EACXA,EAAEtH,KAAK5B,QAAQmJ,EAAEvH,KAAMyH,EAAEzH,MACzBwH,EAAExH,KAAK5B,QAAQkJ,EAAEtH,KAAM0H,EAAE1H,MAEzBsH,EAAEzC,OAAS,EAAI7K,EAAKW,IAAI4M,EAAE1C,OAAQ4C,EAAE5C,QACpC2C,EAAE3C,OAAS,EAAI7K,EAAKW,IAAI2M,EAAEzC,OAAQ6C,EAAE7C,SAG/B2C,EAIT,GAAIL,GAAW,EAAG,CAChB,IAAMQ,EAAIJ,EAAE5C,OACNiD,EAAIL,EAAE3C,OAuCZ,OApCA2C,EAAE5C,OAAS2C,EACXC,EAAE7C,OAAS4C,EAAE5C,OACb4C,EAAE5C,OAAS6C,EAGK,MAAZA,EAAE7C,OACA6C,EAAE7C,OAAOC,SAAW2C,EACtBC,EAAE7C,OAAOC,OAAS4C,EAElBA,EAAE7C,OAAOE,OAAS2C,EAGpB7O,KAAK6M,OAASgC,EAIZI,EAAE9C,OAAS+C,EAAE/C,QACf0C,EAAE3C,OAAS+C,EACXL,EAAE3C,OAASiD,EACXA,EAAElD,OAAS4C,EACXA,EAAEtH,KAAK5B,QAAQoJ,EAAExH,KAAM4H,EAAE5H,MACzBuH,EAAEvH,KAAK5B,QAAQkJ,EAAEtH,KAAM2H,EAAE3H,MAEzBsH,EAAEzC,OAAS,EAAI7K,EAAKW,IAAI6M,EAAE3C,OAAQ+C,EAAE/C,QACpC0C,EAAE1C,OAAS,EAAI7K,EAAKW,IAAI2M,EAAEzC,OAAQ8C,EAAE9C,UAEpC0C,EAAE3C,OAASgD,EACXN,EAAE3C,OAASgD,EACXA,EAAEjD,OAAS4C,EACXA,EAAEtH,KAAK5B,QAAQoJ,EAAExH,KAAM2H,EAAE3H,MACzBuH,EAAEvH,KAAK5B,QAAQkJ,EAAEtH,KAAM4H,EAAE5H,MAEzBsH,EAAEzC,OAAS,EAAI7K,EAAKW,IAAI6M,EAAE3C,OAAQ8C,EAAE9C,QACpC0C,EAAE1C,OAAS,EAAI7K,EAAKW,IAAI2M,EAAEzC,OAAQ+C,EAAE/C,SAG/B0C,EAGT,OAAOD,GAOTvC,EAAA5M,UAAA0P,UAAA,WACE,OAAmB,MAAfnP,KAAK6M,OACA,EAGF7M,KAAK6M,OAAOV,QAMrBE,EAAA5M,UAAA2P,aAAA,WACE,GAAmB,MAAfpP,KAAK6M,OACP,OAAO,EAST,IANA,IAIIO,EAHEiC,EADOrP,KAAK6M,OACIvF,KAAKV,eAEvB0I,EAAY,EAEVC,EAAKvP,KAAKyM,aAAarB,WAAWoE,SAASxP,KAAK6M,QAC/CO,EAAOmC,EAAGE,QACXrC,EAAKjB,OAAS,IAKlBmD,GAAalC,EAAK9F,KAAKV,gBAKzB,OAFA5G,KAAKyM,aAAanB,QAAQiE,GAEnBD,EAAYD,GAMrBhD,EAAa5M,UAAAiQ,cAAb,SAAc5D,GACZ,IAAIsB,EASJ,IAPEA,OADgB,IAAPtB,EACF9L,KAAK8M,QAAQhB,GAEb9L,KAAK6M,QAKLT,SACP,OAAO,EAGT,IAAMuD,EAAU3P,KAAK0P,cAActC,EAAKnB,OAAOH,IACzC8D,EAAU5P,KAAK0P,cAActC,EAAKlB,OAAOJ,IAC/C,OAAO,EAAIxK,EAAKW,IAAI0N,EAASC,IAG/BvD,EAAiB5M,UAAAoQ,kBAAjB,SAAkBzC,GAChB,GAAY,MAARA,EAAJ,CAIapN,KAAK6M,OAIlB,IAAMZ,EAASmB,EAAKnB,OACdC,EAASkB,EAAKlB,OAEhBkB,EAAKhB,WAaTpM,KAAK6P,kBAAkB5D,GACvBjM,KAAK6P,kBAAkB3D,MAGzBG,EAAe5M,UAAAqQ,gBAAf,SAAgB1C,GACd,GAAY,MAARA,EAAJ,CAIA,IAAMnB,EAASmB,EAAKnB,OACdC,EAASkB,EAAKlB,OAEpB,IAAIkB,EAAKhB,SAAT,CAUA,IAAMuD,EAAU1D,EAAOE,OACjByD,EAAU1D,EAAOC,OACJ7K,EAAKW,IAAI0N,EAASC,IAGxB,IAAIrJ,GACZb,QAAQuG,EAAO3E,KAAM4E,EAAO5E,MAIjCtH,KAAK8P,gBAAgB7D,GACrBjM,KAAK8P,gBAAgB5D,MAMvBG,EAAA5M,UAAAsQ,SAAA,WACE/P,KAAK6P,kBAAkB7P,KAAK6M,QAC5B7M,KAAK8P,gBAAgB9P,KAAK6M,SAQ5BR,EAAA5M,UAAAuQ,cAAA,WAIE,IAHA,IACI5C,EADA6C,EAAa,EAEXV,EAAKvP,KAAKyM,aAAarB,WAAWoE,SAASxP,KAAK6M,QAC/CO,EAAOmC,EAAGE,QACf,KAAIrC,EAAKjB,QAAU,GAAnB,CAMA,IAAMsC,EAAUnN,EAAKwE,IAAIsH,EAAKlB,OAAOC,OAASiB,EAAKnB,OAAOE,QAC1D8D,EAAa3O,EAAKW,IAAIgO,EAAYxB,GAIpC,OAFAzO,KAAKyM,aAAanB,QAAQiE,GAEnBU,GAMT5D,EAAA5M,UAAAyQ,gBAAA,WAOE,IANA,IAII9C,EAJE+C,EAAQ,GACVC,EAAQ,EAINb,EAAKvP,KAAKyM,aAAarB,WAAWoE,SAASxP,KAAK6M,QAC/CO,EAAOmC,EAAGE,QACXrC,EAAKjB,OAAS,IAKdiB,EAAKhB,UACPgB,EAAKpB,OAAS,KACdmE,EAAMC,GAAShD,IACbgD,GAEFpQ,KAAKqN,SAASD,IAKlB,IAFApN,KAAKyM,aAAanB,QAAQiE,GAEnBa,EAAQ,GAAG,CAIhB,IAHA,IAAIC,EAAUjI,EAAAA,EACVkI,GAAQ,EACRC,GAAQ,EACHhQ,EAAI,EAAGA,EAAI6P,IAAS7P,EAE3B,IADA,IAAMiQ,EAAQL,EAAM5P,GAAG+G,KACdmJ,EAAIlQ,EAAI,EAAGkQ,EAAIL,IAASK,EAAG,CAClC,IAAMC,EAAQP,EAAMM,GAAGnJ,KACjBnI,EAAI,IAAIoH,EACdpH,EAAEuG,QAAQ8K,EAAOE,GACjB,IAAMzC,EAAO9O,EAAEyH,eACXqH,EAAOoC,IACTC,EAAO/P,EACPgQ,EAAOE,EACPJ,EAAUpC,GAKhB,IAAMhC,EAASkE,EAAMG,GACfpE,EAASiE,EAAMI,GAEfI,EAAS3Q,KAAKmN,eACpBwD,EAAO1E,OAASA,EAChB0E,EAAOzE,OAASA,EAChByE,EAAOxE,OAAS,EAAI7K,EAAKW,IAAIgK,EAAOE,OAAQD,EAAOC,QACnDwE,EAAOrJ,KAAK5B,QAAQuG,EAAO3E,KAAM4E,EAAO5E,MACxCqJ,EAAO3E,OAAS,KAEhBC,EAAOD,OAAS2E,EAChBzE,EAAOF,OAAS2E,EAEhBR,EAAMI,GAAQJ,EAAMC,EAAQ,GAC5BD,EAAMG,GAAQK,IACZP,EAGJpQ,KAAK6M,OAASsD,EAAM,IAWtB9D,EAAW5M,UAAAmR,YAAX,SAAYC,GAIV,IAFA,IAAIzD,EACEmC,EAAKvP,KAAKyM,aAAarB,WAAWoE,SAASxP,KAAK6M,QAC/CO,EAAOmC,EAAGE,QAAQ,CACvB,IAAMnI,EAAO8F,EAAK9F,KAClBA,EAAKd,WAAW/E,GAAKoP,EAAUpP,EAC/B6F,EAAKd,WAAWnE,GAAKwO,EAAUxO,EAC/BiF,EAAKb,WAAWhF,GAAKoP,EAAUpP,EAC/B6F,EAAKb,WAAWpE,GAAKwO,EAAUxO,EAEjCrC,KAAKyM,aAAanB,QAAQiE,IAO5BlD,EAAA5M,UAAAqR,MAAA,SAAMxJ,EAAYyJ,GAEhB,IAAMxE,EAAQvM,KAAKwM,UAAUpB,WAG7B,IADAmB,EAAMX,KAAK5L,KAAK6M,QACTN,EAAM7L,OAAS,GAAG,CACvB,IAAM0M,EAAOb,EAAMyE,MACnB,GAAY,MAAR5D,EAIJ,GAAI7G,EAAKmB,YAAY0F,EAAK9F,KAAMA,GAC9B,GAAI8F,EAAKhB,UAEP,IAAgB,IADA2E,EAAc3D,EAAKtB,IAEjC,YAGFS,EAAMX,KAAKwB,EAAKnB,QAChBM,EAAMX,KAAKwB,EAAKlB,QAKtBlM,KAAKwM,UAAUlB,QAAQiB,IAazBF,EAAA5M,UAAAyI,QAAA,SAAQrH,EAAqBoQ,GAG3B,IAAM3I,EAAKzH,EAAMyH,GACXC,EAAK1H,EAAM0H,GACXnC,EAAIhE,EAAKgC,IAAImE,EAAID,GAEvBlC,EAAE3B,YAGF,IAAM5B,EAAIT,EAAKkD,aAAa,EAAKc,GAC3B8K,EAAQ9O,EAAK0D,IAAIjD,GAKnBkG,EAAclI,EAAMkI,YAGlBoI,EAAc,IAAI5K,EACpBlG,EAAI+B,EAAKsD,QAAS,EAAIqD,EAAcT,EAAIS,EAAaR,GACzD4I,EAAY9J,cAAciB,EAAIjI,GAE9B,IAAMkM,EAAQvM,KAAKwM,UAAUpB,WACvBgG,EAAWpR,KAAKsM,UAAUlB,WAGhC,IADAmB,EAAMX,KAAK5L,KAAK6M,QACTN,EAAM7L,OAAS,GAAG,CACvB,IAAM0M,EAAOb,EAAMyE,MACnB,GAAY,MAAR5D,IAI6C,IAA7C7G,EAAKmB,YAAY0F,EAAK9F,KAAM6J,GAAhC,CAMA,IAAME,EAAIjE,EAAK9F,KAAKZ,YACd4K,EAAIlE,EAAK9F,KAAKX,aAEpB,KADmBrF,EAAKwE,IAAI1D,EAAK8C,IAAIrC,EAAGT,EAAKgC,IAAIkE,EAAI+I,KAAOjP,EAAK8C,IAAIgM,EAAOI,GAC3D,GAIjB,GAAIlE,EAAKhB,SAAU,CACjBgF,EAAS9I,GAAKlG,EAAKQ,MAAM/B,EAAMyH,IAC/B8I,EAAS7I,GAAKnG,EAAKQ,MAAM/B,EAAM0H,IAC/B6I,EAASrI,YAAcA,EAEvB,IAAMxF,EAAQ0N,EAAgBG,EAAUhE,EAAKtB,IAE7C,GAAc,IAAVvI,EAEF,OAGEA,EAAQ,IAEVwF,EAAcxF,EACdlD,EAAI+B,EAAKsD,QAAS,EAAIqD,EAAcT,EAAIS,EAAaR,GACrD4I,EAAY9J,cAAciB,EAAIjI,SAGhCkM,EAAMX,KAAKwB,EAAKnB,QAChBM,EAAMX,KAAKwB,EAAKlB,SAGpBlM,KAAKwM,UAAUlB,QAAQiB,GACvBvM,KAAKsM,UAAUhB,QAAQ8F,IA8B1B/E,KAEDK,EAAA,WAAA,SAAAA,IACE1M,KAAOuR,QAAuB,GAC9BvR,KAAMwR,OAAa,GAuCrB,OAtCE9E,EAAQjN,UAAA+P,SAAR,SAASiC,GAKP,OAJAzR,KAAKuR,QAAQ7Q,OAAS,EACtBV,KAAKuR,QAAQ3F,KAAK6F,GAClBzR,KAAKwR,OAAO9Q,OAAS,EACrBV,KAAKwR,OAAO5F,KAAK,GACV5L,MAET0M,EAAAjN,UAAAgQ,KAAA,WACE,KAAOzP,KAAKuR,QAAQ7Q,OAAS,GAAG,CAC9B,IAAMH,EAAIP,KAAKuR,QAAQ7Q,OAAS,EAC1B0M,EAAOpN,KAAKuR,QAAQhR,GAC1B,GAAuB,IAAnBP,KAAKwR,OAAOjR,GAEd,OADAP,KAAKwR,OAAOjR,GAAK,EACV6M,EAET,GAAuB,IAAnBpN,KAAKwR,OAAOjR,KACdP,KAAKwR,OAAOjR,GAAK,EACb6M,EAAKnB,QAGP,OAFAjM,KAAKuR,QAAQ3F,KAAKwB,EAAKnB,QACvBjM,KAAKwR,OAAO5F,KAAK,GACVwB,EAAKnB,OAGhB,GAAuB,IAAnBjM,KAAKwR,OAAOjR,KACdP,KAAKwR,OAAOjR,GAAK,EACb6M,EAAKlB,QAGP,OAFAlM,KAAKuR,QAAQ3F,KAAKwB,EAAKlB,QACvBlM,KAAKwR,OAAO5F,KAAK,GACVwB,EAAKlB,OAGhBlM,KAAKuR,QAAQP,MACbhR,KAAKwR,OAAOR,QAGhBtE,EAAAjN,UAAAmN,MAAA,WACE5M,KAAKuR,QAAQ7Q,OAAS,GAEzBgM,KCz3BDgF,EAAA,WAAA,SAAAA,IAAA,IA6LCC,EAAA3R,KA5LCA,KAAA4R,OAAoC,IAAIvF,EACxCrM,KAAY6R,aAAW,EACvB7R,KAAY8R,aAAa,GA4DzB9R,KAAA8Q,MAAQ,SAACxJ,EAAYyJ,GACnBY,EAAKC,OAAOd,MAAMxJ,EAAMyJ,IA0G1B/Q,KAAa+Q,cAAG,SAACgB,GAEf,GAAIA,IAAYJ,EAAKK,eACnB,OAAO,EAGT,IAAMC,EAAW3Q,EAAKU,IAAI+P,EAASJ,EAAKK,gBAClCE,EAAW5Q,EAAKW,IAAI8P,EAASJ,EAAKK,gBAIlCG,EAAYR,EAAKC,OAAO3E,YAAYgF,GACpCG,EAAYT,EAAKC,OAAO3E,YAAYiF,GAK1C,OAFAP,EAAKU,WAAWF,EAAWC,IAEpB,GAEX,OAlLEV,EAAWjS,UAAAwN,YAAX,SAAY8E,GACV,OAAO/R,KAAK4R,OAAO3E,YAAY8E,IAMjCL,EAAAjS,UAAAiI,YAAA,SAAYuK,EAAkBC,GAC5B,IAAMI,EAAQtS,KAAK4R,OAAO1E,WAAW+E,GAC/BM,EAAQvS,KAAK4R,OAAO1E,WAAWgF,GACrC,OAAO3L,EAAKmB,YAAY4K,EAAOC,IAMjCb,EAAUjS,UAAAyN,WAAV,SAAW6E,GACT,OAAO/R,KAAK4R,OAAO1E,WAAW6E,IAMhCL,EAAAjS,UAAA+S,cAAA,WACE,OAAOxS,KAAK6R,cAMdH,EAAAjS,UAAAgT,cAAA,WACE,OAAOzS,KAAK4R,OAAOzC,aAMrBuC,EAAAjS,UAAAiT,eAAA,WACE,OAAO1S,KAAK4R,OAAO5B,iBAMrB0B,EAAAjS,UAAAkT,eAAA,WACE,OAAO3S,KAAK4R,OAAOxC,gBAqBrBsC,EAAAjS,UAAAyI,QAAA,SAAQrH,EAAqBoQ,GAC3BjR,KAAK4R,OAAO1J,QAAQrH,EAAOoQ,IAS7BS,EAAWjS,UAAAmR,YAAX,SAAYC,GACV7Q,KAAK4R,OAAOhB,YAAYC,IAO1Ba,EAAAjS,UAAA6N,YAAA,SAAYhG,EAAYyE,GAEtB,IAAMgG,EAAU/R,KAAK4R,OAAOtE,YAAYhG,EAAMyE,GAG9C,OAFA/L,KAAK6R,eACL7R,KAAK4S,WAAWb,GACTA,GAMTL,EAAYjS,UAAA+N,aAAZ,SAAauE,GACX/R,KAAK6S,aAAad,GAClB/R,KAAK6R,eACL7R,KAAK4R,OAAOpE,aAAauE,IAO3BL,EAAAjS,UAAAiO,UAAA,SAAUqE,EAAiBzK,EAAYwL,GAErB9S,KAAK4R,OAAOlE,UAAUqE,EAASzK,EAAMwL,IAEnD9S,KAAK4S,WAAWb,IAQpBL,EAAUjS,UAAAsT,WAAV,SAAWhB,GACT/R,KAAK4S,WAAWb,IAGlBL,EAAUjS,UAAAmT,WAAV,SAAWb,GACT/R,KAAK8R,aAAalG,KAAKmG,IAGzBL,EAAYjS,UAAAoT,aAAZ,SAAad,GACX,IAAK,IAAIxR,EAAI,EAAGA,EAAIP,KAAK8R,aAAapR,SAAUH,EAC1CP,KAAK8R,aAAavR,KAAOwR,IAC3B/R,KAAK8R,aAAavR,GAAK,OAQ7BmR,EAAWjS,UAAAuT,YAAX,SAAYC,GAKV,IAHAjT,KAAKqS,WAAaY,EAGXjT,KAAK8R,aAAapR,OAAS,GAEhC,GADAV,KAAKgS,eAAiBhS,KAAK8R,aAAad,MACZ,OAAxBhR,KAAKgS,eAAT,CAMA,IAAMkB,EAAUlT,KAAK4R,OAAO1E,WAAWlN,KAAKgS,gBAG5ChS,KAAK4R,OAAOd,MAAMoC,EAASlT,KAAK+Q,iBA0BrCW,KCnMDyB,EAAA,WAKE,SAAAA,EAAYC,GACV,KAA8BpT,gBAAgBmT,GAC5C,OAAO,IAAIA,EAAIC,GAEI,iBAAVA,EACTpT,KAAKqT,SAASD,GACY,iBAAVA,EAChBpT,KAAKsT,OAAOF,GAEZpT,KAAKuT,cAkLX,OA7KSJ,EAAGxQ,IAAV,SAAWyQ,GACT,IAAM3Q,EAAMrD,OAAOc,OAAOiT,EAAI1T,WAE9B,OADAgD,EAAI4Q,SAASD,GACN3Q,GAGF0Q,EAAKvQ,MAAZ,SAAa4Q,GAEX,IAAM/Q,EAAMrD,OAAOc,OAAOiT,EAAI1T,WAG9B,OAFAgD,EAAInC,EAAIkT,EAAIlT,EACZmC,EAAI4O,EAAImC,EAAInC,EACL5O,GAGF0Q,EAAAM,SAAP,WACE,IAAMhR,EAAMrD,OAAOc,OAAOiT,EAAI1T,WAG9B,OAFAgD,EAAInC,EAAI,EACRmC,EAAI4O,EAAI,EACD5O,GAGF0Q,EAAOlQ,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGnB,EAAKE,SAASiB,EAAInC,IAAMgB,EAAKE,SAASiB,EAAI4O,KAG5C8B,EAAMxR,OAAb,SAAcuB,KAKdiQ,EAAA1T,UAAA8T,YAAA,WACEvT,KAAKM,EAAI,EACTN,KAAKqR,EAAI,GAGX8B,EAAG1T,UAAA2D,IAAH,SAAIgQ,GACmB,iBAAVA,GAETpT,KAAKM,EAAI8S,EAAM9S,EACfN,KAAKqR,EAAI+B,EAAM/B,IAKfrR,KAAKM,EAAIgB,EAAKoS,IAAIN,GAClBpT,KAAKqR,EAAI/P,EAAKqS,IAAIP,KAItBD,EAAM1T,UAAA6T,OAAN,SAAOF,GAELpT,KAAKM,EAAI8S,EAAM9S,EACfN,KAAKqR,EAAI+B,EAAM/B,GAIjB8B,EAAQ1T,UAAA4T,SAAR,SAASD,GAGPpT,KAAKM,EAAIgB,EAAKoS,IAAIN,GAClBpT,KAAKqR,EAAI/P,EAAKqS,IAAIP,IAIpBD,EAAA1T,UAAAmU,SAAA,WACE,OAAOtS,EAAKuS,MAAM7T,KAAKM,EAAGN,KAAKqR,IAIjC8B,EAAA1T,UAAAqU,SAAA,WACE,OAAO1R,EAAKO,IAAI3C,KAAKqR,EAAGrR,KAAKM,IAI/B6S,EAAA1T,UAAAsU,SAAA,WACE,OAAO3R,EAAKO,KAAK3C,KAAKM,EAAGN,KAAKqR,IAQzB8B,EAAA9O,IAAP,SAAWmP,EAAKlP,GAEd,GAAI,MAAOA,GAAK,MAAOA,EAAG,CAMxB,IAAM0P,EAAKb,EAAIM,WAGf,OAFAO,EAAG1T,EAAIkT,EAAIlT,EAAIgE,EAAE+M,EAAImC,EAAInC,EAAI/M,EAAEhE,EAC/B0T,EAAG3C,EAAImC,EAAInC,EAAI/M,EAAE+M,EAAImC,EAAIlT,EAAIgE,EAAEhE,EACxB0T,EAEF,GAAI,MAAO1P,GAAK,MAAOA,EAE5B,OAAOlC,EAAKO,IAAI6Q,EAAInC,EAAI/M,EAAE7C,EAAI+R,EAAIlT,EAAIgE,EAAEjC,EAAGmR,EAAIlT,EAAIgE,EAAE7C,EAAI+R,EAAInC,EAAI/M,EAAEjC,IAKhE8Q,EAAAc,OAAP,SAAcT,EAAUlP,GAOtB,IAAM0P,EAAKb,EAAIM,WAGf,OAFAO,EAAG1T,EAAIkT,EAAIlT,EAAIgE,EAAE+M,EAAImC,EAAInC,EAAI/M,EAAEhE,EAC/B0T,EAAG3C,EAAImC,EAAInC,EAAI/M,EAAE+M,EAAImC,EAAIlT,EAAIgE,EAAEhE,EACxB0T,GAIFb,EAAAe,QAAP,SAAeV,EAAUlP,GAGvB,OAAOlC,EAAKO,IAAI6Q,EAAInC,EAAI/M,EAAE7C,EAAI+R,EAAIlT,EAAIgE,EAAEjC,EAAGmR,EAAIlT,EAAIgE,EAAE7C,EAAI+R,EAAInC,EAAI/M,EAAEjC,IAG9D8Q,EAAAgB,OAAP,SAAcX,EAAU3Q,EAASa,GAC/B,IAAMjC,EAAI+R,EAAInC,GAAKxO,EAAEpB,EAAIiC,EAAEjC,GAAK+R,EAAIlT,GAAKuC,EAAER,EAAIqB,EAAErB,GAC3CA,EAAImR,EAAIlT,GAAKuC,EAAEpB,EAAIiC,EAAEjC,GAAK+R,EAAInC,GAAKxO,EAAER,EAAIqB,EAAErB,GACjD,OAAOD,EAAKO,IAAIlB,EAAGY,IAQd8Q,EAAAiB,KAAP,SAAYZ,EAAKlP,GACf,GAAI,MAAOA,GAAK,MAAOA,EAAG,CAMxB,IAAM0P,EAAKb,EAAIM,WAGf,OAFAO,EAAG1T,EAAIkT,EAAInC,EAAI/M,EAAEhE,EAAIkT,EAAIlT,EAAIgE,EAAE+M,EAC/B2C,EAAG3C,EAAImC,EAAInC,EAAI/M,EAAE+M,EAAImC,EAAIlT,EAAIgE,EAAEhE,EACxB0T,EAEF,GAAI,MAAO1P,GAAK,MAAOA,EAE5B,OAAOlC,EAAKO,IAAI6Q,EAAInC,EAAI/M,EAAE7C,EAAI+R,EAAIlT,EAAIgE,EAAEjC,GAAImR,EAAIlT,EAAIgE,EAAE7C,EAAI+R,EAAInC,EAAI/M,EAAEjC,IAKjE8Q,EAAAkB,QAAP,SAAeb,EAAUlP,GAMvB,IAAM0P,EAAKb,EAAIM,WAGf,OAFAO,EAAG1T,EAAIkT,EAAInC,EAAI/M,EAAEhE,EAAIkT,EAAIlT,EAAIgE,EAAE+M,EAC/B2C,EAAG3C,EAAImC,EAAInC,EAAI/M,EAAE+M,EAAImC,EAAIlT,EAAIgE,EAAEhE,EACxB0T,GAIFb,EAAAmB,SAAP,SAAgBd,EAAUlP,GAExB,OAAOlC,EAAKO,IAAI6Q,EAAInC,EAAI/M,EAAE7C,EAAI+R,EAAIlT,EAAIgE,EAAEjC,GAAImR,EAAIlT,EAAIgE,EAAE7C,EAAI+R,EAAInC,EAAI/M,EAAEjC,IAEvE8Q,KC3LDoB,EAAA,WAOE,SAAYA,EAAAC,EAAsBC,GAChC,KAA8BzU,gBAAgBuU,GAC5C,OAAO,IAAIA,EAAUC,EAAUC,GAEjCzU,KAAKR,EAAI4C,EAAKM,OACd1C,KAAK0U,EAAIvB,EAAIM,gBACW,IAAbe,GACTxU,KAAKR,EAAE8D,QAAQkR,QAEO,IAAbC,GACTzU,KAAK0U,EAAErB,SAASoB,GAwKtB,OApKSF,EAAK3R,MAAZ,SAAa+R,GACX,IAAMlS,EAAMrD,OAAOc,OAAOqU,EAAU9U,WAGpC,OAFAgD,EAAIjD,EAAI4C,EAAKQ,MAAM+R,EAAGnV,GACtBiD,EAAIiS,EAAIvB,EAAIvQ,MAAM+R,EAAGD,GACdjS,GAIF8R,EAAA5R,IAAP,SAAW6R,EAAgBC,GACzB,IAAMhS,EAAMrD,OAAOc,OAAOqU,EAAU9U,WAGpC,OAFAgD,EAAIjD,EAAI4C,EAAKQ,MAAM4R,GACnB/R,EAAIiS,EAAIvB,EAAIvQ,MAAM6R,GACXhS,GAGF8R,EAAAd,SAAP,WACE,IAAMhR,EAAMrD,OAAOc,OAAOqU,EAAU9U,WAGpC,OAFAgD,EAAIjD,EAAI4C,EAAKM,OACbD,EAAIiS,EAAIvB,EAAIM,WACLhR,GAMT8R,EAAA9U,UAAA8T,YAAA,WACEvT,KAAKR,EAAE2D,UACPnD,KAAK0U,EAAEnB,eASTgB,EAAA9U,UAAA2D,IAAA,SAAIK,EAAGtE,QACY,IAANA,GACTa,KAAKR,EAAE4D,IAAIK,EAAEjE,GACbQ,KAAK0U,EAAEtR,IAAIK,EAAEiR,KAEb1U,KAAKR,EAAE4D,IAAIK,GACXzD,KAAK0U,EAAEtR,IAAIjE,KAOfoV,EAAA9U,UAAA4D,OAAA,SAAOmR,EAAgBC,GACrBzU,KAAKR,EAAE8D,QAAQkR,GACfxU,KAAK0U,EAAErB,SAASoB,IAGlBF,EAAY9U,UAAAmV,aAAZ,SAAaD,GACX3U,KAAKR,EAAE8D,QAAQqR,EAAGnV,GAClBQ,KAAK0U,EAAEpB,OAAOqB,EAAGD,IAGZH,EAAOtR,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGL,EAAKa,QAAQR,EAAIjD,IAAM2T,EAAIlQ,QAAQR,EAAIiS,KAGzCH,EAAM5S,OAAb,SAAcuB,KASPqR,EAAAlQ,IAAP,SAAWZ,EAAGtE,GACZ,GAAII,MAAMsV,QAAQ1V,GAAI,CAGpB,IADA,IAAM2V,EAAM,GACHvU,EAAI,EAAGA,EAAIpB,EAAEuB,OAAQH,IAC5BuU,EAAIvU,GAAKgU,EAAUlQ,IAAIZ,EAAGtE,EAAEoB,IAE9B,OAAOuU,EAEF,MAAI,MAAO3V,GAAK,MAAOA,EACrBoV,EAAUL,QAAQzQ,EAAGtE,GAEnB,MAAOA,GAAK,MAAOA,EACrBoV,EAAUQ,MAAMtR,EAAGtE,QADrB,GAQFoV,EAAAS,OAAP,SAAcvR,EAActE,GAG1B,IADA,IAAM2V,EAAM,GACHvU,EAAI,EAAGA,EAAIpB,EAAEuB,OAAQH,IAC5BuU,EAAIvU,GAAKgU,EAAUlQ,IAAIZ,EAAGtE,EAAEoB,IAE9B,OAAOuU,GAKFP,EAAKU,MAAZ,SAAaxR,GAEX,OAAO,SAAStE,GACd,OAAOoV,EAAUlQ,IAAIZ,EAAGtE,KAIrBoV,EAAAL,QAAP,SAAezQ,EAActE,GAG3B,IAAMsC,EAAKgC,EAAEiR,EAAErD,EAAIlS,EAAEsC,EAAIgC,EAAEiR,EAAEpU,EAAInB,EAAEkD,EAAKoB,EAAEjE,EAAEiC,EACtCY,EAAKoB,EAAEiR,EAAEpU,EAAInB,EAAEsC,EAAIgC,EAAEiR,EAAErD,EAAIlS,EAAEkD,EAAKoB,EAAEjE,EAAE6C,EAC5C,OAAOD,EAAKO,IAAIlB,EAAGY,IAGdkS,EAAAQ,MAAP,SAAatR,EAActE,GAKzB,IAAMwV,EAAKJ,EAAUd,WAGrB,OAFAkB,EAAGD,EAAIvB,EAAIc,OAAOxQ,EAAEiR,EAAGvV,EAAEuV,GACzBC,EAAGnV,EAAI4C,EAAKyB,IAAIsP,EAAIe,QAAQzQ,EAAEiR,EAAGvV,EAAEK,GAAIiE,EAAEjE,GAClCmV,GAMFJ,EAAAH,KAAP,SAAY3Q,EAAGtE,GACb,MAAI,MAAOA,GAAK,MAAOA,EACdoV,EAAUD,SAAS7Q,EAAGtE,GAEpB,MAAOA,GAAK,MAAOA,EACrBoV,EAAUW,OAAOzR,EAAGtE,QADtB,GAKFoV,EAAAD,SAAP,SAAgB7Q,EAActE,GAG5B,IAAMgW,EAAKhW,EAAEsC,EAAIgC,EAAEjE,EAAEiC,EACf2T,EAAKjW,EAAEkD,EAAIoB,EAAEjE,EAAE6C,EACfZ,EAAKgC,EAAEiR,EAAErD,EAAI8D,EAAK1R,EAAEiR,EAAEpU,EAAI8U,EAC1B/S,GAAMoB,EAAEiR,EAAEpU,EAAI6U,EAAK1R,EAAEiR,EAAErD,EAAI+D,EACjC,OAAOhT,EAAKO,IAAIlB,EAAGY,IAGdkS,EAAAW,OAAP,SAAczR,EAActE,GAK1B,IAAMwV,EAAKJ,EAAUd,WAGrB,OAFAkB,EAAGD,EAAEpB,OAAOH,EAAIkB,QAAQ5Q,EAAEiR,EAAGvV,EAAEuV,IAC/BC,EAAGnV,EAAE8D,QAAQ6P,EAAImB,SAAS7Q,EAAEiR,EAAGtS,EAAKgC,IAAIjF,EAAEK,EAAGiE,EAAEjE,KACxCmV,GAEVJ,KCvLDc,EAAA,WAgBE,SAAYA,EAAAhE,EAAU5N,GAGpBzD,KAAKsV,YAAclT,EAAKM,OACxB1C,KAAKqR,EAAIjP,EAAKM,OACd1C,KAAKyD,EAAI,EACTzD,KAAKuV,OAAS,EACdvV,KAAKwV,GAAKpT,EAAKM,OACf1C,KAAKyV,GAAK,EAgFd,OA7EEJ,EAAY5V,UAAAmV,aAAZ,SAAaD,GACX,IAAMtD,EAAIkD,EAAUL,QAAQS,EAAI3U,KAAKsV,aACrCtV,KAAKqR,EAAE/N,QAAQ+N,GACfrR,KAAKwV,GAAGlS,QAAQ+N,GAEhBrR,KAAKyD,EAAIkR,EAAGD,EAAEd,WACd5T,KAAKyV,GAAKd,EAAGD,EAAEd,YAGjByB,EAAA5V,UAAAiW,eAAA,SAAeJ,EAAmBX,GAChC3U,KAAKsV,YAAYhS,QAAQgS,GAEzB,IAAMjE,EAAIkD,EAAUL,QAAQS,EAAI3U,KAAKsV,aACrCtV,KAAKqR,EAAE/N,QAAQ+N,GACfrR,KAAKwV,GAAGlS,QAAQ+N,IASlBgE,EAAA5V,UAAAkW,aAAA,SAAahB,EAAeiB,QAAA,IAAAA,IAAAA,EAAgB,GAC1CjB,EAAGD,EAAErB,UAAU,EAAMuC,GAAQ5V,KAAKyV,GAAKG,EAAO5V,KAAKyD,GACnDkR,EAAGnV,EAAEmE,WAAY,EAAMiS,EAAO5V,KAAKwV,GAAII,EAAM5V,KAAKqR,GAGlDsD,EAAGnV,EAAE4E,IAAI+O,EAAIe,QAAQS,EAAGD,EAAG1U,KAAKsV,eAQlCD,EAAO5V,UAAAoW,QAAP,SAAQC,GAEN,IAAMF,GAAQE,EAAQ9V,KAAKuV,SAAW,EAAMvV,KAAKuV,QACjDvV,KAAKwV,GAAG7R,WAAWiS,EAAM5V,KAAKqR,EAAG,EAAIuE,EAAM5V,KAAKwV,IAChDxV,KAAKyV,GAAKG,EAAO5V,KAAKyD,GAAK,EAAImS,GAAQ5V,KAAKyV,GAC5CzV,KAAKuV,OAASO,GAGhBT,EAAA5V,UAAAsW,QAAA,WACE/V,KAAKyV,GAAKzV,KAAKyD,EACfzD,KAAKwV,GAAGlS,QAAQtD,KAAKqR,IAMvBgE,EAAA5V,UAAAgF,UAAA,WACE,IAAMgR,EAAKnU,EAAKQ,IAAI9B,KAAKyV,IAAKnU,EAAKyI,IAAKzI,EAAKyI,IAC7C/J,KAAKyD,GAAKzD,KAAKyV,GAAKA,EACpBzV,KAAKyV,GAAKA,GAGZJ,EAAA5V,UAAAmD,MAAA,WACE,IAAMA,EAAQ,IAAIyS,EAOlB,OANAzS,EAAM0S,YAAYhS,QAAQtD,KAAKsV,aAC/B1S,EAAM2S,OAASvV,KAAKuV,OACpB3S,EAAM6S,GAAKzV,KAAKyV,GAChB7S,EAAMa,EAAIzD,KAAKyD,EACfb,EAAM4S,GAAGlS,QAAQtD,KAAKwV,IACtB5S,EAAMyO,EAAE/N,QAAQtD,KAAKqR,GACdzO,GAGTyS,EAAG5V,UAAA2D,IAAH,SAAI4S,GACFhW,KAAKsV,YAAYhS,QAAQ0S,EAAKV,aAC9BtV,KAAKuV,OAASS,EAAKT,OACnBvV,KAAKyV,GAAKO,EAAKP,GACfzV,KAAKyD,EAAIuS,EAAKvS,EACdzD,KAAKwV,GAAGlS,QAAQ0S,EAAKR,IACrBxV,KAAKqR,EAAE/N,QAAQ0S,EAAK3E,IAEvBgE,KCrHDY,EAOE,WACEjW,KAAK6C,EAAIT,EAAKM,OACd1C,KAAK0D,EAAI,GCNbwS,EAAA,WAOE,SAAAA,IACElW,KAAKqR,EAAIjP,EAAKM,OACd1C,KAAKyD,EAAI,EAQb,OALEyS,EAAAzW,UAAAkW,aAAA,SAAahB,EAAenV,GAG1B,OAFAmV,EAAGD,EAAErB,SAASrT,KAAKyD,GACnBkR,EAAGnV,EAAE8D,QAAQlB,EAAKgC,IAAIpE,KAAKqR,EAAG8B,EAAIe,QAAQS,EAAGD,EAAGlV,KACzCmV,GAEVuB,KCTDC,EAAA,WAAA,SAAAA,KA6EA,OAtESA,EAAOlT,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGyB,iBAAfA,EAAI2T,QAA+C,iBAAjB3T,EAAI4T,WAkEvDF,KCnCKG,EAAgC,CACpCvK,SAAW,KACXwK,SAAW,GACXC,YAAc,EACdC,QAAU,EACVC,UAAW,EAEXC,iBAAmB,EACnBC,mBAAqB,EACrBC,eAAiB,OAMnBC,EAKE,SAAYC,EAAkBC,GAC5BhX,KAAKsH,KAAO,IAAIf,EAChBvG,KAAK+W,QAAUA,EACf/W,KAAKgX,WAAaA,EAClBhX,KAAK+R,SAWTkF,EAAA,WAmBmB,SAAYA,EAAAC,EAAYC,EAAQC,GAC3CD,EAAMA,OACRC,EAAMD,EACNA,EAAQA,EAAMA,OAEU,iBAARC,IAChBA,EAAM,CAACX,QAAUW,IAGnBA,EAAMxW,EAAQwW,EAAKd,GAEnBtW,KAAKqX,OAASH,EAEdlX,KAAKsX,WAAaF,EAAIb,SACtBvW,KAAKuX,cAAgBH,EAAIZ,YACzBxW,KAAKwX,UAAYJ,EAAIX,QACrBzW,KAAKyX,WAAaL,EAAIV,SAEtB1W,KAAK0X,mBAAqBN,EAAIT,iBAC9B3W,KAAK2X,qBAAuBP,EAAIR,mBAChC5W,KAAK4X,iBAAmBR,EAAIP,eAG5B7W,KAAK6X,QAAUV,EAEfnX,KAAK8X,OAAS,KAEd9X,KAAK+X,UAAY,GACjB/X,KAAK6R,aAAe,EAGpB,IADA,IAAMmG,EAAahY,KAAK6X,QAAQI,gBACvB1X,EAAI,EAAGA,EAAIyX,IAAczX,EAChCP,KAAK+X,UAAUxX,GAAK,IAAIuW,EAAa9W,KAAMO,GAG7CP,KAAKkY,WAAad,EAAIrL,SAgV1B,OAzUEkL,EAAAxX,UAAA0Y,OAAA,WACE,IAAMjB,EAAOlX,KAAKoY,UACZC,EAAanB,EAAKoB,QAAQC,aAChCvY,KAAKwY,eAAeH,GAChBrY,KAAK6X,QAAQM,QACfnY,KAAK6X,QAAQM,SAGf,IADA,IAAMH,EAAahY,KAAK6X,QAAQI,gBACvB1X,EAAI,EAAGA,EAAIyX,IAAczX,EAChCP,KAAK+X,UAAUxX,GAAK,IAAIuW,EAAa9W,KAAMO,GAE7CP,KAAKyY,cAAcJ,EAAYnB,EAAKwB,MACpCxB,EAAKyB,iBAIP1B,EAAAxX,UAAA6C,WAAA,WACE,MAAO,CACLiU,SAAUvW,KAAKsX,WACfd,YAAaxW,KAAKuX,cAClBd,QAASzW,KAAKwX,UACdd,SAAU1W,KAAKyX,WAEfd,iBAAkB3W,KAAK0X,mBACvBd,mBAAoB5W,KAAK2X,qBACzBd,eAAgB7W,KAAK4X,iBAErBT,MAAOnX,KAAK6X,UAKTZ,EAAA1U,aAAP,SAAoBC,EAAW0U,EAAW0B,GACxC,IAAMzB,EAAQyB,EAAQzC,EAAO3T,EAAK2U,OAElC,OADgBA,GAAS,IAAIF,EAAQC,EAAMC,EAAO3U,IAQpDyU,EAAAxX,UAAAoZ,QAAA,WACE,OAAO7Y,KAAK6X,QAAQgB,WAQtB5B,EAAAxX,UAAAqZ,SAAA,WACE,OAAO9Y,KAAK6X,SAOdZ,EAAAxX,UAAAiX,SAAA,WACE,OAAO1W,KAAKyX,YAMdR,EAASxX,UAAAsZ,UAAT,SAAUC,GACJA,GAAUhZ,KAAKyX,aACjBzX,KAAKqX,OAAO4B,UAAS,GACrBjZ,KAAKyX,WAAauB,IAetB/B,EAAAxX,UAAAwN,YAAA,WACE,OAAOjN,KAAKkY,YAMdjB,EAAWxX,UAAAyZ,YAAX,SAAY1W,GACVxC,KAAKkY,WAAa1V,GAOpByU,EAAAxX,UAAA2Y,QAAA,WACE,OAAOpY,KAAKqX,QAMdJ,EAAAxX,UAAA0Z,QAAA,WACE,OAAOnZ,KAAK8X,QAMdb,EAAAxX,UAAA2Z,WAAA,WACE,OAAOpZ,KAAKwX,WAOdP,EAAUxX,UAAA4Z,WAAV,SAAW5C,GAETzW,KAAKwX,UAAYf,GAMnBQ,EAAAxX,UAAA6Z,YAAA,WACE,OAAOtZ,KAAKsX,YAOdL,EAAWxX,UAAA8Z,YAAX,SAAYhD,GACVvW,KAAKsX,WAAaf,GAMpBU,EAAAxX,UAAA+Z,eAAA,WACE,OAAOxZ,KAAKuX,eAOdN,EAAcxX,UAAAga,eAAd,SAAejD,GACbxW,KAAKuX,cAAgBf,GAMvBS,EAASxX,UAAAia,UAAT,SAAUla,GACR,OAAOQ,KAAK6X,QAAQ6B,UAAU1Z,KAAKqX,OAAO1B,eAAgBnW,IAM5DyX,EAAAxX,UAAAyI,QAAA,SAAQnH,EAAuBF,EAAqBmW,GAClD,OAAOhX,KAAK6X,QAAQ3P,QAAQnH,EAAQF,EAAOb,KAAKqX,OAAO1B,eAAgBqB,IAQzEC,EAAWxX,UAAAka,YAAX,SAAYC,GACV5Z,KAAK6X,QAAQgC,YAAYD,EAAU5Z,KAAKwX,YAO1CP,EAAOxX,UAAAqa,QAAP,SAAQ9C,GAEN,OAAOhX,KAAK+X,UAAUf,GAAY1P,MAMpC2P,EAAAxX,UAAAgZ,cAAA,SAAcJ,EAAwB1D,GAIpC3U,KAAK6R,aAAe7R,KAAK6X,QAAQI,gBAEjC,IAAK,IAAI1X,EAAI,EAAGA,EAAIP,KAAK6R,eAAgBtR,EAAG,CAC1C,IAAMwZ,EAAQ/Z,KAAK+X,UAAUxX,GAC7BP,KAAK6X,QAAQmC,YAAYD,EAAMzS,KAAMqN,EAAIpU,GACzCwZ,EAAMhI,QAAUsG,EAAW/K,YAAYyM,EAAMzS,KAAMyS,KAIvD9C,EAAcxX,UAAA+Y,eAAd,SAAeH,GAEb,IAAK,IAAI9X,EAAI,EAAGA,EAAIP,KAAK6R,eAAgBtR,EAAG,CAC1C,IAAMwZ,EAAQ/Z,KAAK+X,UAAUxX,GAC7B8X,EAAW7K,aAAauM,EAAMhI,SAC9BgI,EAAMhI,QAAU,KAGlB/R,KAAK6R,aAAe,GAOtBoF,EAAAxX,UAAAwa,YAAA,SAAY5B,EAAwB6B,EAAgBC,GAClD,IAAK,IAAI5Z,EAAI,EAAGA,EAAIP,KAAK6R,eAAgBtR,EAAG,CAC1C,IAAMwZ,EAAQ/Z,KAAK+X,UAAUxX,GAGvB6Z,EAAQ,IAAI7T,EACZ8T,EAAQ,IAAI9T,EAClBvG,KAAK6X,QAAQmC,YAAYI,EAAOF,EAAKH,EAAM/C,YAC3ChX,KAAK6X,QAAQmC,YAAYK,EAAOF,EAAKJ,EAAM/C,YAE3C+C,EAAMzS,KAAK5B,QAAQ0U,EAAOC,GAE1B,IAAMvH,EAAe1Q,EAAKgC,IAAI+V,EAAI3a,EAAG0a,EAAI1a,GAEzC6Y,EAAW3K,UAAUqM,EAAMhI,QAASgI,EAAMzS,KAAMwL,KASpDmE,EAAaxX,UAAA6a,cAAb,SAAcC,GACZva,KAAK0X,mBAAqB6C,EAAOC,WACjCxa,KAAK2X,qBAAuB4C,EAAOE,aACnCza,KAAK4X,iBAAmB2C,EAAOG,SAC/B1a,KAAK2a,YAGP1D,EAAAxX,UAAAmb,oBAAA,WACE,OAAO5a,KAAK0X,oBAGdT,EAAmBxX,UAAAob,oBAAnB,SAAoBL,GAClBxa,KAAK0X,mBAAqB8C,GAG5BvD,EAAAxX,UAAAqb,sBAAA,WACE,OAAO9a,KAAK2X,sBAGdV,EAAqBxX,UAAAsb,sBAArB,SAAsBN,GACpBza,KAAK2X,qBAAuB8C,GAG9BxD,EAAAxX,UAAAub,kBAAA,WACE,OAAOhb,KAAK4X,kBAGdX,EAAiBxX,UAAAwb,kBAAjB,SAAkBP,GAChB1a,KAAK4X,iBAAmB8C,GAO1BzD,EAAAxX,UAAAkb,SAAA,WACE,GAAmB,MAAf3a,KAAKqX,OAAT,CAMA,IADA,IAAI6D,EAAOlb,KAAKqX,OAAO8D,iBAChBD,GAAM,CACX,IAAME,EAAUF,EAAKE,QACfC,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,cACrBH,GAAYrb,MAAQub,GAAYvb,MAClCob,EAAQK,mBAGVP,EAAOA,EAAKzL,KAGd,IAAMiM,EAAQ1b,KAAKqX,OAAOsE,WAE1B,GAAa,MAATD,EAMJ,IADA,IAAMrD,EAAaqD,EAAMnD,aAChBhY,EAAI,EAAGA,EAAIP,KAAK6R,eAAgBtR,EACvC8X,EAAWtF,WAAW/S,KAAK+X,UAAUxX,GAAGwR,WAc5CkF,EAAaxX,UAAAmc,cAAb,SAAc5F,GAEZ,GAAIA,EAAK0B,qBAAuB1X,KAAK0X,oBAAkD,IAA5B1B,EAAK0B,mBAC9D,OAAO1B,EAAK0B,mBAAqB,EAGnC,IAAMmE,EAAmE,IAAvD7F,EAAK4B,iBAAmB5X,KAAK2X,sBACzCmE,EAAmE,IAAvD9F,EAAK2B,qBAAuB3X,KAAK4X,kBAEnD,OADgBiE,GAAYC,GAG/B7E,KC5cK8E,EAAS,SACTC,EAAY,YACZC,EAAU,UA8DVC,EAA0B,CAC9BC,KAAOJ,EACPvH,SAAWpS,EAAKM,OAChB0Q,MAAQ,EAERgJ,eAAiBha,EAAKM,OACtB2Z,gBAAkB,EAElBC,cAAgB,EAChBC,eAAiB,EAEjBC,eAAgB,EAChBC,QAAS,EACTC,aAAe,EAEfC,YAAa,EACbC,OAAQ,EACRC,QAAS,EAET9Q,SAAW,MAMb+Q,EAAA,WAEE9c,KAAI+c,KAAW,EAEf/c,KAAAgd,OAAe5a,EAAKM,OAEpB1C,KAACid,EAAW,GAQdC,EAAA,WAiEE,SAAYA,EAAAxB,EAActE,GACxBA,EAAMxW,EAAQwW,EAAK8E,GASnBlc,KAAKsY,QAAUoD,EAEf1b,KAAKmd,YAAc/F,EAAIwF,MACvB5c,KAAKod,gBAAkBhG,EAAIuF,WAC3B3c,KAAKqd,aAAejG,EAAIqF,OACxBzc,KAAKsd,oBAAsBlG,EAAIoF,cAC/Bxc,KAAKud,aAAenG,EAAIyF,OAExB7c,KAAKwd,cAAe,EACpBxd,KAAKyd,WAAY,EAEjBzd,KAAKkY,WAAad,EAAIrL,SACtB/L,KAAKoW,OAASgB,EAAI+E,KAEdnc,KAAKoW,QAAU6F,GACjBjc,KAAK0d,OAAS,EACd1d,KAAK2d,UAAY,IAEjB3d,KAAK0d,OAAS,EACd1d,KAAK2d,UAAY,GAInB3d,KAAK4d,IAAM,EACX5d,KAAK6d,OAAS,EAGd7d,KAAK0Y,KAAOnE,EAAUd,WACtBzT,KAAK0Y,KAAKlZ,EAAI4C,EAAKQ,MAAMwU,EAAI5C,UAC7BxU,KAAK0Y,KAAKhE,EAAErB,SAAS+D,EAAIhE,OAGzBpT,KAAK8d,QAAU,IAAIzI,EACnBrV,KAAK8d,QAAQlJ,aAAa5U,KAAK0Y,MAG/B1Y,KAAK+d,WAAa,IAAI9H,EACtBjW,KAAKge,WAAa,IAAI9H,EAEtBlW,KAAKie,QAAU7b,EAAKM,OACpB1C,KAAKke,SAAW,EAEhBle,KAAKme,iBAAmB/b,EAAKQ,MAAMwU,EAAIgF,gBACvCpc,KAAKoe,kBAAoBhH,EAAIiF,gBAE7Brc,KAAKqe,gBAAkBjH,EAAIkF,cAC3Btc,KAAKse,iBAAmBlH,EAAImF,eAC5Bvc,KAAKue,eAAiBnH,EAAIsF,aAE1B1c,KAAKwe,YAAc,EAEnBxe,KAAKye,YAAc,KACnBze,KAAK0e,cAAgB,KACrB1e,KAAK2e,cAAgB,KAErB3e,KAAK4e,OAAS,KACd5e,KAAK8X,OAAS,KAEd9X,KAAK6e,aAAc,EAq3BvB,OAj3BE3B,EAAAzd,UAAA6C,WAAA,WAEE,IADA,IAAMwc,EAAW,GACRpW,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxCgH,EAASlT,KAAKlD,GAEhB,MAAO,CACLyT,KAAMnc,KAAKoW,OACXqG,OAAQzc,KAAKqd,aACb7I,SAAUxU,KAAK0Y,KAAKlZ,EACpB4T,MAAOpT,KAAK0Y,KAAKhE,EAAEd,WACnBwI,eAAgBpc,KAAKme,iBACrB9B,gBAAiBrc,KAAKoe,kBACtBU,SAAQA,IAKL5B,EAAA3a,aAAP,SAAoBC,EAAWkZ,EAAY9C,GACzC,IAAM1B,EAAO,IAAIgG,EAAKxB,EAAOlZ,GAE7B,GAAIA,EAAKsc,SACP,IAAK,IAAIve,EAAIiC,EAAKsc,SAASpe,OAAS,EAAGH,GAAK,EAAGA,IAAK,CAClD,IAAMwW,EAAU6B,EAAQ3B,EAASzU,EAAKsc,SAASve,GAAI2W,GACnDA,EAAK6H,YAAYhI,GAGrB,OAAOG,GAGTgG,EAAAzd,UAAAuf,cAAA,WACE,SAAOhf,KAAKsY,UAAWtY,KAAKsY,QAAQ2G,aAGtC/B,EAAAzd,UAAAkc,SAAA,WACE,OAAO3b,KAAKsY,SAGd4E,EAAAzd,UAAA0Z,QAAA,WACE,OAAOnZ,KAAK8X,QAGdoF,EAAWzd,UAAAyZ,YAAX,SAAY1W,GACVxC,KAAKkY,WAAa1V,GAGpB0a,EAAAzd,UAAAwN,YAAA,WACE,OAAOjN,KAAKkY,YAGdgF,EAAAzd,UAAAyf,eAAA,WACE,OAAOlf,KAAK2e,eAGdzB,EAAAzd,UAAA0f,aAAA,WACE,OAAOnf,KAAKye,aAOdvB,EAAAzd,UAAA0b,eAAA,WACE,OAAOnb,KAAK0e,eAGdxB,EAAAzd,UAAA2f,SAAA,WACE,OAAOpf,KAAKoW,QAAU2F,GAGxBmB,EAAAzd,UAAA4f,UAAA,WACE,OAAOrf,KAAKoW,QAAU6F,GAGxBiB,EAAAzd,UAAA6f,YAAA,WACE,OAAOtf,KAAKoW,QAAU4F,GAMxBkB,EAAAzd,UAAA8f,UAAA,WAEE,OADAvf,KAAKwf,QAAQzD,GACN/b,MAGTkd,EAAAzd,UAAAggB,WAAA,WAEE,OADAzf,KAAKwf,QAAQvD,GACNjc,MAGTkd,EAAAzd,UAAAigB,aAAA,WAEE,OADA1f,KAAKwf,QAAQxD,GACNhc,MAMTkd,EAAAzd,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAMd8G,EAAOzd,UAAA+f,QAAP,SAAQrD,GAIN,GAA4B,GAAxBnc,KAAKgf,iBAILhf,KAAKoW,QAAU+F,EAAnB,CAIAnc,KAAKoW,OAAS+F,EAEdnc,KAAK2Y,gBAED3Y,KAAKoW,QAAU2F,IACjB/b,KAAKme,iBAAiBhb,UACtBnD,KAAKoe,kBAAoB,EACzBpe,KAAK8d,QAAQ/H,UACb/V,KAAK2f,uBAGP3f,KAAKiZ,UAAS,GAEdjZ,KAAKie,QAAQ9a,UACbnD,KAAKke,SAAW,EAIhB,IADA,IAAI0B,EAAK5f,KAAK0e,cACPkB,GAAI,CACT,IAAMC,EAAMD,EACZA,EAAKA,EAAGnQ,KACRzP,KAAKsY,QAAQwH,eAAeD,EAAIzE,SAElCpb,KAAK0e,cAAgB,KAIrB,IADA,IAAMrG,EAAarY,KAAKsY,QAAQC,aACvB7P,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OAExC,IADA,IAAMiI,EAAarX,EAAEmJ,aACZtR,EAAI,EAAGA,EAAIwf,IAAcxf,EAChC8X,EAAWtF,WAAWrK,EAAEqP,UAAUxX,GAAGwR,WAK3CmL,EAAAzd,UAAAugB,SAAA,WACE,OAAOhgB,KAAKqd,cAMdH,EAASzd,UAAAwgB,UAAT,SAAUC,GACRlgB,KAAKqd,eAAiB6C,GAGxBhD,EAAAzd,UAAA0gB,kBAAA,WACE,OAAOngB,KAAKod,iBAGdF,EAAkBzd,UAAA2gB,mBAAlB,SAAmBF,GACjBlgB,KAAKod,kBAAoB8C,EACG,GAAxBlgB,KAAKod,iBACPpd,KAAKiZ,UAAS,IAIlBiE,EAAAzd,UAAA4gB,QAAA,WACE,OAAOrgB,KAAKmd,aAQdD,EAAQzd,UAAAwZ,SAAR,SAASiH,GACHA,EACsB,GAApBlgB,KAAKmd,cACPnd,KAAKmd,aAAc,EACnBnd,KAAKwe,YAAc,IAGrBxe,KAAKmd,aAAc,EACnBnd,KAAKwe,YAAc,EACnBxe,KAAKme,iBAAiBhb,UACtBnD,KAAKoe,kBAAoB,EACzBpe,KAAKie,QAAQ9a,UACbnD,KAAKke,SAAW,IAIpBhB,EAAAzd,UAAA6gB,SAAA,WACE,OAAOtgB,KAAKud,cAgBdL,EAASzd,UAAA8gB,UAAT,SAAUL,GAGR,GAAIA,GAAQlgB,KAAKud,aAMjB,GAFAvd,KAAKud,eAAiB2C,EAElBlgB,KAAKud,aAGP,IADA,IAAMlF,EAAarY,KAAKsY,QAAQC,aACvB7P,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxCpP,EAAE+P,cAAcJ,EAAYrY,KAAK0Y,UAI9B,CAGL,IADML,EAAarY,KAAKsY,QAAQC,aACvB7P,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxCpP,EAAE8P,eAAeH,GAKnB,IADA,IAAIuH,EAAK5f,KAAK0e,cACPkB,GAAI,CACT,IAAMC,EAAMD,EACZA,EAAKA,EAAGnQ,KACRzP,KAAKsY,QAAQwH,eAAeD,EAAIzE,SAElCpb,KAAK0e,cAAgB,OAIzBxB,EAAAzd,UAAA+gB,gBAAA,WACE,OAAOxgB,KAAKsd,qBAMdJ,EAAgBzd,UAAAghB,iBAAhB,SAAiBP,GACXlgB,KAAKsd,qBAAuB4C,IAIhClgB,KAAKsd,sBAAwB4C,EAE7BlgB,KAAKoe,kBAAoB,EAEzBpe,KAAK2Y,kBAMPuE,EAAAzd,UAAAkW,aAAA,WACE,OAAO3V,KAAK0Y,MAWdwE,EAAAzd,UAAAmV,aAAA,SAAaJ,EAAgBpB,GAE3B,GAA4B,GAAxBpT,KAAKgf,gBAAT,CAIAhf,KAAK0Y,KAAKrV,OAAOmR,EAAUpB,GAC3BpT,KAAK8d,QAAQlJ,aAAa5U,KAAK0Y,MAG/B,IADA,IAAML,EAAarY,KAAKsY,QAAQC,aACvB7P,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxCpP,EAAEuR,YAAY5B,EAAYrY,KAAK0Y,KAAM1Y,KAAK0Y,QAI9CwE,EAAAzd,UAAAihB,qBAAA,WACE1gB,KAAK8d,QAAQnI,aAAa3V,KAAK0Y,KAAM,IAMvCwE,EAAAzd,UAAAkgB,oBAAA,WACE,IAAMhL,EAAKJ,EAAUd,WAErBzT,KAAK8d,QAAQnI,aAAahB,EAAI,GAG9B,IADA,IAAM0D,EAAarY,KAAKsY,QAAQC,aACvB7P,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxCpP,EAAEuR,YAAY5B,EAAY1D,EAAI3U,KAAK0Y,OAOvCwE,EAAOzd,UAAAoW,QAAP,SAAQC,GAEN9V,KAAK8d,QAAQjI,QAAQC,GACrB9V,KAAK8d,QAAQzM,EAAE/N,QAAQtD,KAAK8d,QAAQtI,IACpCxV,KAAK8d,QAAQra,EAAIzD,KAAK8d,QAAQrI,GAC9BzV,KAAK8d,QAAQnI,aAAa3V,KAAK0Y,KAAM,IAMvCwE,EAAAzd,UAAAkhB,YAAA,WACE,OAAO3gB,KAAK0Y,KAAKlZ,GAGnB0d,EAAWzd,UAAAmhB,YAAX,SAAYphB,GACVQ,KAAK4U,aAAapV,EAAGQ,KAAK8d,QAAQra,IAMpCyZ,EAAAzd,UAAAmU,SAAA,WACE,OAAO5T,KAAK8d,QAAQra,GAGtByZ,EAAQzd,UAAA4T,SAAR,SAASD,GACPpT,KAAK4U,aAAa5U,KAAK0Y,KAAKlZ,EAAG4T,IAMjC8J,EAAAzd,UAAAohB,eAAA,WACE,OAAO7gB,KAAK8d,QAAQzM,GAMtB6L,EAAAzd,UAAAqhB,eAAA,WACE,OAAO9gB,KAAK8d,QAAQxI,aAQtB4H,EAAAzd,UAAAshB,kBAAA,WACE,OAAO/gB,KAAKme,kBAQdjB,EAA+Bzd,UAAAuhB,gCAA/B,SAAgCC,GAC9B,IAAM3L,EAAclT,EAAKgC,IAAI6c,EAAYjhB,KAAK8d,QAAQzM,GACtD,OAAOjP,EAAKyB,IAAI7D,KAAKme,iBAAkB/b,EAAKkD,aAAatF,KAAKoe,kBAC5D9I,KAQJ4H,EAA+Bzd,UAAAyhB,gCAA/B,SAAgCC,GAC9B,OAAOnhB,KAAKghB,gCAAgChhB,KAAKohB,cAAcD,KAQjEjE,EAAiBzd,UAAA4hB,kBAAjB,SAAkBxe,GACZ7C,KAAKoW,QAAU2F,IAGf3Z,EAAK8C,IAAIrC,EAAGA,GAAK,GACnB7C,KAAKiZ,UAAS,GAEhBjZ,KAAKme,iBAAiB7a,QAAQT,KAQhCqa,EAAAzd,UAAA6hB,mBAAA,WACE,OAAOthB,KAAKoe,mBAQdlB,EAAkBzd,UAAA8hB,mBAAlB,SAAmB7d,GACb1D,KAAKoW,QAAU2F,IAGfrY,EAAIA,EAAI,GACV1D,KAAKiZ,UAAS,GAEhBjZ,KAAKoe,kBAAoB1a,IAG3BwZ,EAAAzd,UAAA+hB,iBAAA,WACE,OAAOxhB,KAAKqe,iBAGdnB,EAAgBzd,UAAAgiB,iBAAhB,SAAiBnF,GACftc,KAAKqe,gBAAkB/B,GAGzBY,EAAAzd,UAAAiiB,kBAAA,WACE,OAAO1hB,KAAKse,kBAGdpB,EAAiBzd,UAAAkiB,kBAAjB,SAAkBpF,GAChBvc,KAAKse,iBAAmB/B,GAG1BW,EAAAzd,UAAAmiB,gBAAA,WACE,OAAO5hB,KAAKue,gBAMdrB,EAAezd,UAAAoiB,gBAAf,SAAgB1b,GACdnG,KAAKue,eAAiBpY,GAQxB+W,EAAAzd,UAAAqiB,QAAA,WACE,OAAO9hB,KAAK0d,QAQdR,EAAAzd,UAAAsiB,WAAA,WACE,OAAO/hB,KAAK4d,IAAM5d,KAAK0d,OACnBtb,EAAK8C,IAAIlF,KAAK8d,QAAQxI,YAAatV,KAAK8d,QAAQxI,cAMtD4H,EAAWzd,UAAAka,YAAX,SAAYnX,GACVA,EAAKua,KAAO/c,KAAK0d,OACjBlb,EAAKya,EAAIjd,KAAK+hB,aACdvf,EAAKwa,OAAO1Z,QAAQtD,KAAK8d,QAAQxI,cAQnC4H,EAAAzd,UAAAkZ,cAAA,WASE,GAPA3Y,KAAK0d,OAAS,EACd1d,KAAK2d,UAAY,EACjB3d,KAAK4d,IAAM,EACX5d,KAAK6d,OAAS,EACd7d,KAAK8d,QAAQxI,YAAYnS,UAGrBnD,KAAKof,YAAcpf,KAAKsf,cAI1B,OAHAtf,KAAK8d,QAAQtI,GAAGlS,QAAQtD,KAAK0Y,KAAKlZ,GAClCQ,KAAK8d,QAAQzM,EAAE/N,QAAQtD,KAAK0Y,KAAKlZ,QACjCQ,KAAK8d,QAAQrI,GAAKzV,KAAK8d,QAAQra,GAQjC,IADA,IAAM6R,EAAclT,EAAKM,OAChBgG,EAAI1I,KAAK2e,cAAejW,EAAGA,EAAIA,EAAEoP,OACxC,GAAmB,GAAfpP,EAAE8O,UAAN,CAIA,IAAMoC,EAAW,IAAIkD,EACrBpU,EAAEiR,YAAYC,GACd5Z,KAAK0d,QAAU9D,EAASmD,KACxBzH,EAAYtR,OAAO4V,EAASmD,KAAMnD,EAASoD,QAC3Chd,KAAK4d,KAAOhE,EAASqD,EAInBjd,KAAK0d,OAAS,GAChB1d,KAAK2d,UAAY,EAAM3d,KAAK0d,OAC5BpI,EAAYjR,IAAIrE,KAAK2d,aAIrB3d,KAAK0d,OAAS,EACd1d,KAAK2d,UAAY,GAGf3d,KAAK4d,IAAM,GAAmC,GAA5B5d,KAAKsd,qBAEzBtd,KAAK4d,KAAO5d,KAAK0d,OAAStb,EAAK8C,IAAIoQ,EAAaA,GAEhDtV,KAAK6d,OAAS,EAAM7d,KAAK4d,MAGzB5d,KAAK4d,IAAM,EACX5d,KAAK6d,OAAS,GAIhB,IAAMmE,EAAY5f,EAAKQ,MAAM5C,KAAK8d,QAAQzM,GAC1CrR,KAAK8d,QAAQpI,eAAeJ,EAAatV,KAAK0Y,MAG9C1Y,KAAKme,iBAAiBta,IAAIzB,EAAKkD,aAAatF,KAAKoe,kBAAmBhc,EAAKgC,IACvEpE,KAAK8d,QAAQzM,EAAG2Q,MAWpB9E,EAAWzd,UAAAwiB,YAAX,SAAYrI,GAEV,GAA4B,GAAxB5Z,KAAKgf,iBAILhf,KAAKoW,QAAU6F,EAAnB,CAIAjc,KAAK2d,UAAY,EACjB3d,KAAK4d,IAAM,EACX5d,KAAK6d,OAAS,EAEd7d,KAAK0d,OAAS9D,EAASmD,KACnB/c,KAAK0d,QAAU,IACjB1d,KAAK0d,OAAS,GAGhB1d,KAAK2d,UAAY,EAAM3d,KAAK0d,OAExB9D,EAASqD,EAAI,GAAmC,GAA5Bjd,KAAKsd,sBAC3Btd,KAAK4d,IAAMhE,EAASqD,EAAIjd,KAAK0d,OACzBtb,EAAK8C,IAAI0U,EAASoD,OAAQpD,EAASoD,QAEvChd,KAAK6d,OAAS,EAAM7d,KAAK4d,KAI3B,IAAMoE,EAAY5f,EAAKQ,MAAM5C,KAAK8d,QAAQzM,GAC1CrR,KAAK8d,QAAQpI,eAAekE,EAASoD,OAAQhd,KAAK0Y,MAGlD1Y,KAAKme,iBAAiBta,IAAIzB,EAAKkD,aAAatF,KAAKoe,kBAAmBhc,EAAKgC,IACvEpE,KAAK8d,QAAQzM,EAAG2Q,OAYpB9E,EAAAzd,UAAAyiB,WAAA,SAAWC,EAAaC,EAAaC,QAAA,IAAAA,IAAAA,GAAoB,GACnDriB,KAAKoW,QAAU6F,IAGfoG,GAA4B,GAApBriB,KAAKmd,aACfnd,KAAKiZ,UAAS,GAGZjZ,KAAKmd,cACPnd,KAAKie,QAAQpa,IAAIse,GACjBniB,KAAKke,UAAY9b,EAAKgD,cAAchD,EAAKgC,IAAIge,EAAOpiB,KAAK8d,QAAQzM,GAAI8Q,MAUzEjF,EAAAzd,UAAA6iB,mBAAA,SAAmBH,EAAaE,QAAA,IAAAA,IAAAA,GAAoB,GAC9CriB,KAAKoW,QAAU6F,IAGfoG,GAA4B,GAApBriB,KAAKmd,aACfnd,KAAKiZ,UAAS,GAGZjZ,KAAKmd,aACPnd,KAAKie,QAAQpa,IAAIse,KAWrBjF,EAAAzd,UAAA8iB,YAAA,SAAYC,EAAgBH,QAAA,IAAAA,IAAAA,GAAoB,GAC1CriB,KAAKoW,QAAU6F,IAGfoG,GAA4B,GAApBriB,KAAKmd,aACfnd,KAAKiZ,UAAS,GAGZjZ,KAAKmd,cACPnd,KAAKke,UAAYsE,KAarBtF,EAAAzd,UAAAgjB,mBAAA,SAAmBC,EAAeN,EAAaC,QAAA,IAAAA,IAAAA,GAAoB,GAC7DriB,KAAKoW,QAAU6F,IAGfoG,GAA4B,GAApBriB,KAAKmd,aACfnd,KAAKiZ,UAAS,GAIZjZ,KAAKmd,cACPnd,KAAKme,iBAAiBna,OAAOhE,KAAK2d,UAAW+E,GAC7C1iB,KAAKoe,mBAAqBpe,KAAK6d,OAASzb,EAAKgD,cAAchD,EAAKgC,IAAIge,EAAOpiB,KAAK8d,QAAQzM,GAAIqR,MAUhGxF,EAAAzd,UAAAkjB,oBAAA,SAAoBD,EAAiBL,QAAA,IAAAA,IAAAA,GAAoB,GACnDriB,KAAKoW,QAAU6F,IAIfoG,GAA4B,GAApBriB,KAAKmd,aACfnd,KAAKiZ,UAAS,GAGZjZ,KAAKmd,cACPnd,KAAKoe,mBAAqBpe,KAAK6d,OAAS6E,KAQ5CxF,EAAazd,UAAAmc,cAAb,SAAc5F,GAEZ,GAAIhW,KAAKoW,QAAU6F,GAAWjG,EAAKI,QAAU6F,EAC3C,OAAO,EAGT,IAAK,IAAI2G,EAAK5iB,KAAKye,YAAamE,EAAIA,EAAKA,EAAGnT,KAC1C,GAAImT,EAAGC,OAAS7M,GACqB,GAA/B4M,EAAGE,MAAMC,mBACX,OAAO,EAIb,OAAO,GAMT7F,EAAWzd,UAAAsf,YAAX,SAAYhI,GAGV,GAA4B,GAAxB/W,KAAKgf,gBACP,OAAO,KAGT,GAAIhf,KAAKud,aAAc,CACrB,IAAMlF,EAAarY,KAAKsY,QAAQC,aAChCxB,EAAQ0B,cAAcJ,EAAYrY,KAAK0Y,MAezC,OAZA3B,EAAQe,OAAS9X,KAAK2e,cACtB3e,KAAK2e,cAAgB5H,EAGjBA,EAAQS,UAAY,GACtBxX,KAAK2Y,gBAKP3Y,KAAKsY,QAAQ0K,cAAe,EAErBjM,GAiBTmG,EAAAzd,UAAAwjB,cAAA,SAAc9L,EAAO+L,GAGnB,GAA4B,GAAxBljB,KAAKgf,gBACP,OAAO,KAGT,IAAMjI,EAAU,IAAIE,EAAQjX,KAAMmX,EAAO+L,GAEzC,OADAljB,KAAK+e,YAAYhI,GACVA,GAcTmG,EAAczd,UAAA0jB,eAAd,SAAepM,GAGb,GAA4B,GAAxB/W,KAAKgf,gBAAT,CAQA,GAAIhf,KAAK2e,gBAAkB5H,EACzB/W,KAAK2e,cAAgB5H,EAAQe,YAK7B,IADA,IAAI1K,EAAOpN,KAAK2e,cACD,MAARvR,GAAc,CACnB,GAAIA,EAAK0K,SAAWf,EAAS,CAC3B3J,EAAK0K,OAASf,EAAQe,OAEtB,MAEF1K,EAAOA,EAAK0K,OAShB,IADA,IAAIoD,EAAOlb,KAAK0e,cACTxD,GAAM,CACX,IAAM7J,EAAI6J,EAAKE,QACfF,EAAOA,EAAKzL,KAEZ,IAAM4L,EAAWhK,EAAEiK,cACbC,EAAWlK,EAAEmK,cAEfzE,GAAWsE,GAAYtE,GAAWwE,GAGpCvb,KAAKsY,QAAQwH,eAAezO,GAIhC,GAAIrR,KAAKud,aAAc,CACrB,IAAMlF,EAAarY,KAAKsY,QAAQC,aAChCxB,EAAQyB,eAAeH,GAGzBtB,EAAQM,OAAS,KACjBN,EAAQe,OAAS,KAEjB9X,KAAKsY,QAAQ8K,QAAQ,iBAAkBrM,GAGvC/W,KAAK2Y,kBAMPuE,EAAazd,UAAA2hB,cAAb,SAAcD,GACZ,OAAO5M,EAAUL,QAAQlU,KAAK0Y,KAAMyI,IAMtCjE,EAAczd,UAAA4jB,eAAd,SAAeC,GACb,OAAOnQ,EAAIe,QAAQlU,KAAK0Y,KAAKhE,EAAG4O,IAMlCpG,EAAazd,UAAA8jB,cAAb,SAActC,GACZ,OAAO1M,EAAUD,SAAStU,KAAK0Y,KAAMuI,IAMvC/D,EAAczd,UAAA+jB,eAAd,SAAeC,GACb,OAAOtQ,EAAImB,SAAStU,KAAK0Y,KAAKhE,EAAG+O,IAh/BnBvG,EAAMnB,OAAa,SAQnBmB,EAASlB,UAAa,YAStBkB,EAAOjB,QAAa,UAi+BrCiB,KCzmCDwG,EAAA,WAIE1jB,KAAK6iB,MAAgB,KAIrB7iB,KAAK8iB,MAAiB,KAItB9iB,KAAI2jB,KAAqB,KAIzB3jB,KAAIyP,KAAqB,MAwC3BmU,EAAA,WAoBE,SAAAA,EAAYxM,EAA0ByM,EAAcC,GAlBnC9jB,KAAAoW,OAAiB,gBAOjBpW,KAAA4e,OAAuB,KACvB5e,KAAA8X,OAAuB,KAEvB9X,KAAO+jB,QAAc,IAAIL,EACzB1jB,KAAOgkB,QAAc,IAAIN,EAEzB1jB,KAAAwd,cAAwB,EAMvCqG,EAAQ,UAAWzM,EAAMA,EAAIyM,MAAQA,EACrCC,EAAQ,UAAW1M,EAAMA,EAAI0M,MAAQA,EAMrC9jB,KAAKikB,QAAUJ,EACf7jB,KAAKkkB,QAAUJ,EAEf9jB,KAAK+iB,qBAAuB3L,EAAI+M,iBAChCnkB,KAAKkY,WAAad,EAAIrL,SAyF1B,OAnFE6X,EAAAnkB,UAAA6gB,SAAA,WACE,OAAOtgB,KAAKikB,QAAQ3D,YAActgB,KAAKkkB,QAAQ5D,YAMjDsD,EAAAnkB,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAMdwN,EAAAnkB,UAAA2kB,SAAA,WACE,OAAOpkB,KAAKikB,SAMdL,EAAAnkB,UAAA4kB,SAAA,WACE,OAAOrkB,KAAKkkB,SAMdN,EAAAnkB,UAAA0Z,QAAA,WACE,OAAOnZ,KAAK8X,QAGd8L,EAAAnkB,UAAAwN,YAAA,WACE,OAAOjN,KAAKkY,YAGd0L,EAAWnkB,UAAAyZ,YAAX,SAAY1W,GACVxC,KAAKkY,WAAa1V,GAQpBohB,EAAAnkB,UAAA6kB,oBAAA,WACE,OAAOtkB,KAAK+iB,oBA0Bda,EAAAnkB,UAAAmR,YAAA,SAAYC,KAWb+S,KCrNYW,EAAQ,CACnBC,SAAU,EACVC,SAAU,EACVC,YAAa,EAEbC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,gBAAiB,EAEjBniB,SAAA,SAASoiB,GACPA,EAA6B,iBAAZA,EAAuBA,EAAU,KAClD,IAAIC,EAAS,GAEb,IAAK,IAAMC,KAAQplB,KACS,mBAAfA,KAAKolB,IAA8C,iBAAfplB,KAAKolB,KAClDD,GAAUC,EAAO,KAAOplB,KAAKolB,GAAQF,GAGzC,OAAOC,ICdIE,EARI,WACjB,OAAOC,KAAKC,OAOCF,EAJK,SAASG,GAC3B,OAAOF,KAAKC,MAAQC,GCmCtBjB,EAAMC,SAAW,EACjBD,EAAME,SAAW,EACjBF,EAAMG,YAAc,EAMpB,IAAAe,EAAA,WACEzlB,KAAA0lB,OAAwB,IAAIC,EAC5B3lB,KAAA4lB,OAAwB,IAAID,EAC5B3lB,KAAU6lB,WAAqB,KAC/B7lB,KAAU8lB,WAAqB,KAC/B9lB,KAAQ+lB,UAAY,GAWtBC,EAAA,WACEhmB,KAAAimB,OAAe7jB,EAAKM,OACpB1C,KAAAkmB,OAAe9jB,EAAKM,QAatByjB,EAAA,WACEnmB,KAAMomB,OAAW,EACjBpmB,KAAMqmB,OAAa,GACnBrmB,KAAMsmB,OAAa,GACnBtmB,KAAKoQ,MAAW,GAQLmW,EAAW,SAAUxlB,EAAwBylB,EAAqB3lB,KAC3E0jB,EAAMC,SAER,IAAMkB,EAAS7kB,EAAM6kB,OACfE,EAAS/kB,EAAM+kB,OACfa,EAAM5lB,EAAMglB,WACZa,EAAM7lB,EAAMilB,WAGZa,EAAU,IAAIC,EACpBD,EAAQE,UAAUL,EAAOd,EAAQe,EAAKb,EAAQc,GAiB9C,IAdA,IAAMI,EAAWH,EAAQI,IACnBC,EAAa/d,EAASkB,qBAItB8c,EAAQ,GACRC,EAAQ,GACVC,EAAY,EAMZC,EAAO,EACJA,EAAOJ,GAAY,CAExBG,EAAYR,EAAQU,QACpB,IAAK,IAAI9mB,EAAI,EAAGA,EAAI4mB,IAAa5mB,EAC/B0mB,EAAM1mB,GAAKumB,EAASvmB,GAAG8lB,OACvBa,EAAM3mB,GAAKumB,EAASvmB,GAAG+lB,OAMzB,GAHAK,EAAQW,QAGgB,IAApBX,EAAQU,QACV,OAII7nB,EAAImnB,EAAQY,mBACD/iB,gBASjB,IAAMtF,EAAIynB,EAAQa,qBAGlB,GAAItoB,EAAEsF,gBAAkBlD,EAAKC,QAAUD,EAAKC,QAO1C,MAIF,IAAMkmB,EAASX,EAASH,EAAQU,SAEhCI,EAAOpB,OAASX,EAAOgC,WAAWvU,EAAImB,SAASmS,EAAI/R,EAAGtS,EAAKyD,IAAI3G,KAC/DuoB,EAAOE,GAAKpT,EAAUL,QAAQuS,EAAKf,EAAOkC,UAAUH,EAAOpB,SAE3DoB,EAAOnB,OAASV,EAAO8B,WAAWvU,EAAImB,SAASoS,EAAIhS,EAAGxV,IACtDuoB,EAAOI,GAAKtT,EAAUL,QAAQwS,EAAKd,EAAOgC,UAAUH,EAAOnB,SAE3DmB,EAAO/jB,EAAItB,EAAKgC,IAAIqjB,EAAOI,GAAIJ,EAAOE,MAGpCP,IACA7C,EAAME,SAIR,IAAIqD,GAAY,EAChB,IAASvnB,EAAI,EAAGA,EAAI4mB,IAAa5mB,EAC/B,GAAIknB,EAAOpB,SAAWY,EAAM1mB,IAAMknB,EAAOnB,SAAWY,EAAM3mB,GAAI,CAC5DunB,GAAY,EACZ,MAKJ,GAAIA,EACF,QAIAnB,EAAQU,QAcZ,GAXA9C,EAAMG,YAAcpjB,EAAKW,IAAIsiB,EAAMG,YAAa0C,GAGhDT,EAAQoB,iBAAiBhnB,EAAOklB,OAAQllB,EAAOmlB,QAC/CnlB,EAAO6D,SAAWxC,EAAKwC,SAAS7D,EAAOklB,OAAQllB,EAAOmlB,QACtDnlB,EAAOinB,WAAaZ,EAGpBT,EAAQsB,WAAWzB,GAGf3lB,EAAMklB,SAAU,CAClB,IAAMmC,EAAKxC,EAAOrP,SACZ8R,EAAKvC,EAAOvP,SAElB,GAAItV,EAAO6D,SAAWsjB,EAAKC,GAAMpnB,EAAO6D,SAAWtD,EAAKC,QAAS,CAG/DR,EAAO6D,UAAYsjB,EAAKC,EACxB,IAAM1f,EAASrG,EAAKgC,IAAIrD,EAAOmlB,OAAQnlB,EAAOklB,QAC9Cxd,EAAOhE,YACP1D,EAAOklB,OAAOjiB,OAAOkkB,EAAIzf,GACzB1H,EAAOmlB,OAAO/hB,OAAOgkB,EAAI1f,OACpB,CAGL,IAAMjJ,EAAI4C,EAAK2D,IAAIhF,EAAOklB,OAAQllB,EAAOmlB,QACzCnlB,EAAOklB,OAAO3iB,QAAQ9D,GACtBuB,EAAOmlB,OAAO5iB,QAAQ9D,GACtBuB,EAAO6D,SAAW,KAQxB+gB,EAAA,WAOE,SAAAA,IACE3lB,KAAKooB,SAAW,GAChBpoB,KAAKqoB,WAAa,GAClBroB,KAAKqnB,QAAU,EACfrnB,KAAKqW,SAAW,EAkDpB,OA5CEsP,EAAAlmB,UAAA6oB,eAAA,WACE,OAAOtoB,KAAKqnB,SAMd1B,EAASlmB,UAAAmoB,UAAT,SAAU/Z,GAER,OAAO7N,KAAKqoB,WAAWxa,IAMzB8X,EAAUlmB,UAAAioB,WAAV,SAAWxoB,GAGT,IAFA,IAAIqpB,EAAY,EACZC,EAAYpmB,EAAK8C,IAAIlF,KAAKqoB,WAAW,GAAInpB,GACpCqB,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,CACrC,IAAMgD,EAAQnB,EAAK8C,IAAIlF,KAAKqoB,WAAW9nB,GAAIrB,GACvCqE,EAAQilB,IACVD,EAAYhoB,EACZioB,EAAYjlB,GAGhB,OAAOglB,GAMT5C,EAAgBlmB,UAAAgpB,iBAAhB,SAAiBvpB,GACf,OAAOc,KAAKqoB,WAAWroB,KAAK0nB,WAAWxoB,KAOzCymB,EAAAlmB,UAAA2D,IAAA,SAAI+T,EAActJ,GAGhBsJ,EAAMuR,qBAAqB1oB,KAAM6N,IAEpC8X,KAEDgD,EAAA,WAAA,SAAAA,IAEE3oB,KAAA2nB,GAAWvlB,EAAKM,OAKhB1C,KAAA6nB,GAAWzlB,EAAKM,OAKhB1C,KAAA0D,EAAUtB,EAAKM,OAYjB,OAREimB,EAAGlpB,UAAA2D,IAAH,SAAIP,GACF7C,KAAKqmB,OAASxjB,EAAEwjB,OAChBrmB,KAAKsmB,OAASzjB,EAAEyjB,OAChBtmB,KAAK2nB,GAAKvlB,EAAKQ,MAAMC,EAAE8kB,IACvB3nB,KAAK6nB,GAAKzlB,EAAKQ,MAAMC,EAAEglB,IACvB7nB,KAAK0D,EAAItB,EAAKQ,MAAMC,EAAEa,GACtB1D,KAAKyD,EAAIZ,EAAEY,GAEdklB,KAED/B,EAAA,WAOE,SAAAA,IACE5mB,KAAK4oB,KAAO,IAAID,EAChB3oB,KAAK6oB,KAAO,IAAIF,EAChB3oB,KAAK8oB,KAAO,IAAIH,EAChB3oB,KAAK+mB,IAAM,CAAE/mB,KAAK4oB,KAAM5oB,KAAK6oB,KAAM7oB,KAAK8oB,MACxC9oB,KAAKqnB,QAiWT,OA7VET,EAAAnnB,UAAAqD,SAAA,WACE,OAAqB,IAAjB9C,KAAKqnB,QACA,CAAC,IAAMrnB,KAAKqnB,QACjBrnB,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKjB,GAAGlmB,EAAGzB,KAAK4oB,KAAKjB,GAAGtlB,EAAGrC,KAAK4oB,KAAKf,GAAGpmB,EAAGzB,KAAK4oB,KAAKf,GAAGxlB,EAC1ErC,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKlB,GAAGlmB,EAAGzB,KAAK6oB,KAAKlB,GAAGtlB,EAAGrC,KAAK6oB,KAAKhB,GAAGpmB,EAAGzB,KAAK6oB,KAAKhB,GAAGxlB,EAC1ErC,KAAK8oB,KAAKrlB,EAAGzD,KAAK8oB,KAAKnB,GAAGlmB,EAAGzB,KAAK8oB,KAAKnB,GAAGtlB,EAAGrC,KAAK8oB,KAAKjB,GAAGpmB,EAAGzB,KAAK8oB,KAAKjB,GAAGxlB,GAC1ES,WAEwB,IAAjB9C,KAAKqnB,QACP,CAAC,IAAMrnB,KAAKqnB,QACjBrnB,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKjB,GAAGlmB,EAAGzB,KAAK4oB,KAAKjB,GAAGtlB,EAAGrC,KAAK4oB,KAAKf,GAAGpmB,EAAGzB,KAAK4oB,KAAKf,GAAGxlB,EAC1ErC,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKlB,GAAGlmB,EAAGzB,KAAK6oB,KAAKlB,GAAGtlB,EAAGrC,KAAK6oB,KAAKhB,GAAGpmB,EAAGzB,KAAK6oB,KAAKhB,GAAGxlB,GAC1ES,WAEwB,IAAjB9C,KAAKqnB,QACP,CAAC,IAAMrnB,KAAKqnB,QACjBrnB,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKjB,GAAGlmB,EAAGzB,KAAK4oB,KAAKjB,GAAGtlB,EAAGrC,KAAK4oB,KAAKf,GAAGpmB,EAAGzB,KAAK4oB,KAAKf,GAAGxlB,GAC1ES,WAGK,IAAM9C,KAAKqnB,SAItBT,EAASnnB,UAAAonB,UAAT,SAAUL,EAAqBd,EAAuBG,EAAuBD,EAAuBE,GAIlG9lB,KAAKqnB,QAAUb,EAAMpW,MACrB,IAAK,IAAI7P,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,EAC/BsC,EAAI7C,KAAK+mB,IAAIxmB,IACjB8lB,OAASG,EAAMH,OAAO9lB,GACxBsC,EAAEyjB,OAASE,EAAMF,OAAO/lB,GACxB,IAAMwoB,EAAUrD,EAAOkC,UAAU/kB,EAAEwjB,QAC7B2C,EAAUpD,EAAOgC,UAAU/kB,EAAEyjB,QACnCzjB,EAAE8kB,GAAKpT,EAAUL,QAAQ2R,EAAYkD,GACrClmB,EAAEglB,GAAKtT,EAAUL,QAAQ4R,EAAYkD,GACrCnmB,EAAEa,EAAItB,EAAKgC,IAAIvB,EAAEglB,GAAIhlB,EAAE8kB,IACvB9kB,EAAEY,EAAI,EAKR,GAAIzD,KAAKqnB,QAAU,EAAG,CACpB,IAAM4B,EAAUzC,EAAMJ,OAChB8C,EAAUlpB,KAAKmpB,aACjBD,EAAU,GAAMD,GAAW,EAAMA,EAAUC,GAC1CA,EAAU5nB,EAAKC,WAElBvB,KAAKqnB,QAAU,GAKnB,GAAqB,IAAjBrnB,KAAKqnB,QAAe,CACtB,IAAMxkB,GAAAA,EAAI7C,KAAK+mB,IAAI,IACjBV,OAAS,EACXxjB,EAAEyjB,OAAS,EACLyC,EAAUrD,EAAOkC,UAAU,GAC3BoB,EAAUpD,EAAOgC,UAAU,GACjC/kB,EAAE8kB,GAAKpT,EAAUL,QAAQ2R,EAAYkD,GACrClmB,EAAEglB,GAAKtT,EAAUL,QAAQ4R,EAAYkD,GACrCnmB,EAAEa,EAAItB,EAAKgC,IAAIvB,EAAEglB,GAAIhlB,EAAE8kB,IACvB9kB,EAAEY,EAAI,EACNzD,KAAKqnB,QAAU,IAInBT,EAAUnnB,UAAAwoB,WAAV,SAAWzB,GACTA,EAAMJ,OAASpmB,KAAKmpB,YACpB3C,EAAMpW,MAAQpQ,KAAKqnB,QACnB,IAAK,IAAI9mB,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAClCimB,EAAMH,OAAO9lB,GAAKP,KAAK+mB,IAAIxmB,GAAG8lB,OAC9BG,EAAMF,OAAO/lB,GAAKP,KAAK+mB,IAAIxmB,GAAG+lB,QAIlCM,EAAAnnB,UAAA+nB,mBAAA,WACE,OAAQxnB,KAAKqnB,SACX,KAAK,EACH,OAAOjlB,EAAKyD,IAAI7F,KAAK4oB,KAAKllB,GAE5B,KAAK,EACH,IAAM0lB,EAAMhnB,EAAKgC,IAAIpE,KAAK6oB,KAAKnlB,EAAG1D,KAAK4oB,KAAKllB,GAE5C,OADYtB,EAAKgD,cAAcgkB,EAAKhnB,EAAKyD,IAAI7F,KAAK4oB,KAAKllB,IAC7C,EAEDtB,EAAKkD,aAAa,EAAK8jB,GAGvBhnB,EAAKiD,aAAa+jB,EAAK,GAIlC,QAEE,OAAOhnB,EAAKM,SAIlBkkB,EAAAnnB,UAAA8nB,gBAAA,WACE,OAAQvnB,KAAKqnB,SACX,KAAK,EAEH,OAAOjlB,EAAKM,OAEd,KAAK,EACH,OAAON,EAAKQ,MAAM5C,KAAK4oB,KAAKllB,GAE9B,KAAK,EACH,OAAOtB,EAAKsD,QAAQ1F,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKllB,EAAG1D,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKnlB,GAEvE,KAAK,EAGL,QAEE,OAAOtB,EAAKM,SAIlBkkB,EAAAnnB,UAAAsoB,iBAAA,SAAiBsB,EAAUC,GACzB,OAAQtpB,KAAKqnB,SACX,KAAK,EAEH,MAEF,KAAK,EACHgC,EAAG/lB,QAAQtD,KAAK4oB,KAAKjB,IACrB2B,EAAGhmB,QAAQtD,KAAK4oB,KAAKf,IACrB,MAEF,KAAK,EACHwB,EAAG1lB,WAAW3D,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKjB,GAAI3nB,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKlB,IAChE2B,EAAG3lB,WAAW3D,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKf,GAAI7nB,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKhB,IAChE,MAEF,KAAK,EACHwB,EAAG1lB,WAAW3D,KAAK4oB,KAAKnlB,EAAGzD,KAAK4oB,KAAKjB,GAAI3nB,KAAK6oB,KAAKplB,EAAGzD,KAAK6oB,KAAKlB,IAChE0B,EAAGrlB,OAAOhE,KAAK8oB,KAAKrlB,EAAGzD,KAAK8oB,KAAKnB,IACjC2B,EAAGhmB,QAAQ+lB,KASjBzC,EAAAnnB,UAAA0pB,UAAA,WACE,OAAQnpB,KAAKqnB,SACX,KAAK,EAIL,KAAK,EACH,OAAO,EAET,KAAK,EACH,OAAOjlB,EAAKwC,SAAS5E,KAAK4oB,KAAKllB,EAAG1D,KAAK6oB,KAAKnlB,GAE9C,KAAK,EACH,OAAOtB,EAAKgD,cAAchD,EAAKgC,IAAIpE,KAAK6oB,KAAKnlB,EAAG1D,KAAK4oB,KAAKllB,GAAItB,EAAKgC,IAAIpE,KAAK8oB,KAAKplB,EAC/E1D,KAAK4oB,KAAKllB,IAEd,QAEE,OAAO,IAIbkjB,EAAAnnB,UAAA6nB,MAAA,WACE,OAAQtnB,KAAKqnB,SACX,KAAK,EACH,MAEF,KAAK,EACHrnB,KAAKupB,SACL,MAEF,KAAK,EACHvpB,KAAKwpB,WA+BX5C,EAAAnnB,UAAA8pB,OAAA,WACE,IAAME,EAAKzpB,KAAK4oB,KAAKllB,EACfgmB,EAAK1pB,KAAK6oB,KAAKnlB,EACf0lB,EAAMhnB,EAAKgC,IAAIslB,EAAID,GAGnBE,GAASvnB,EAAK8C,IAAIukB,EAAIL,GAC5B,GAAIO,GAAS,EAIX,OAFA3pB,KAAK4oB,KAAKnlB,EAAI,OACdzD,KAAKqnB,QAAU,GAKjB,IAAMuC,EAAQxnB,EAAK8C,IAAIwkB,EAAIN,GAC3B,GAAIQ,GAAS,EAKX,OAHA5pB,KAAK6oB,KAAKplB,EAAI,EACdzD,KAAKqnB,QAAU,OACfrnB,KAAK4oB,KAAKxlB,IAAIpD,KAAK6oB,MAKrB,IAAMgB,EAAU,GAAOD,EAAQD,GAC/B3pB,KAAK4oB,KAAKnlB,EAAImmB,EAAQC,EACtB7pB,KAAK6oB,KAAKplB,EAAIkmB,EAAQE,EACtB7pB,KAAKqnB,QAAU,GAQjBT,EAAAnnB,UAAA+pB,OAAA,WACE,IAAMC,EAAKzpB,KAAK4oB,KAAKllB,EACfgmB,EAAK1pB,KAAK6oB,KAAKnlB,EACfomB,EAAK9pB,KAAK8oB,KAAKplB,EAMf0lB,EAAMhnB,EAAKgC,IAAIslB,EAAID,GACnBM,EAAQ3nB,EAAK8C,IAAIukB,EAAIL,GAErBQ,EADQxnB,EAAK8C,IAAIwkB,EAAIN,GAErBO,GAASI,EAMTC,EAAM5nB,EAAKgC,IAAI0lB,EAAIL,GACnBQ,EAAQ7nB,EAAK8C,IAAIukB,EAAIO,GAErBE,EADQ9nB,EAAK8C,IAAI4kB,EAAIE,GAErBG,GAASF,EAMTG,EAAMhoB,EAAKgC,IAAI0lB,EAAIJ,GACnBW,EAAQjoB,EAAK8C,IAAIwkB,EAAIU,GAErBE,EADQloB,EAAK8C,IAAI4kB,EAAIM,GAErBG,GAASF,EAGTG,EAAOpoB,EAAKgD,cAAcgkB,EAAKY,GAE/BS,EAASD,EAAOpoB,EAAKgD,cAAcskB,EAAII,GACvCY,EAASF,EAAOpoB,EAAKgD,cAAc0kB,EAAIL,GACvCkB,EAASH,EAAOpoB,EAAKgD,cAAcqkB,EAAIC,GAG7C,GAAIC,GAAS,GAAOQ,GAAS,EAG3B,OAFAnqB,KAAK4oB,KAAKnlB,EAAI,OACdzD,KAAKqnB,QAAU,GAKjB,GAAIuC,EAAQ,GAAOD,EAAQ,GAAOgB,GAAU,EAAK,CAC/C,IAAMd,EAAU,GAAOD,EAAQD,GAI/B,OAHA3pB,KAAK4oB,KAAKnlB,EAAImmB,EAAQC,EACtB7pB,KAAK6oB,KAAKplB,EAAIkmB,EAAQE,OACtB7pB,KAAKqnB,QAAU,GAKjB,GAAI6C,EAAQ,GAAOC,EAAQ,GAAOO,GAAU,EAAK,CAC/C,IAAME,EAAU,GAAOV,EAAQC,GAK/B,OAJAnqB,KAAK4oB,KAAKnlB,EAAIymB,EAAQU,EACtB5qB,KAAK8oB,KAAKrlB,EAAI0mB,EAAQS,EACtB5qB,KAAKqnB,QAAU,OACfrnB,KAAK6oB,KAAKzlB,IAAIpD,KAAK8oB,MAKrB,GAAIc,GAAS,GAAOW,GAAS,EAI3B,OAHAvqB,KAAK6oB,KAAKplB,EAAI,EACdzD,KAAKqnB,QAAU,OACfrnB,KAAK4oB,KAAKxlB,IAAIpD,KAAK6oB,MAKrB,GAAIqB,GAAS,GAAOI,GAAS,EAI3B,OAHAtqB,KAAK8oB,KAAKrlB,EAAI,EACdzD,KAAKqnB,QAAU,OACfrnB,KAAK4oB,KAAKxlB,IAAIpD,KAAK8oB,MAKrB,GAAIwB,EAAQ,GAAOC,EAAQ,GAAOE,GAAU,EAAK,CAC/C,IAAMI,EAAU,GAAOP,EAAQC,GAK/B,OAJAvqB,KAAK6oB,KAAKplB,EAAI6mB,EAAQO,EACtB7qB,KAAK8oB,KAAKrlB,EAAI8mB,EAAQM,EACtB7qB,KAAKqnB,QAAU,OACfrnB,KAAK4oB,KAAKxlB,IAAIpD,KAAK8oB,MAKrB,IAAMgC,EAAW,GAAOL,EAASC,EAASC,GAC1C3qB,KAAK4oB,KAAKnlB,EAAIgnB,EAASK,EACvB9qB,KAAK6oB,KAAKplB,EAAIinB,EAASI,EACvB9qB,KAAK8oB,KAAKrlB,EAAIknB,EAASG,EACvB9qB,KAAKqnB,QAAU,GAElBT,KAKYlf,EAAc,SAAUqjB,EAAe1E,EAAgB2E,EAAe1E,EAAgBG,EAAgBC,GACjH,IAAM7lB,EAAQ,IAAI4kB,EAClB5kB,EAAM6kB,OAAOtiB,IAAI2nB,EAAQ1E,GACzBxlB,EAAM+kB,OAAOxiB,IAAI4nB,EAAQ1E,GACzBzlB,EAAMglB,WAAaY,EACnB5lB,EAAMilB,WAAaY,EACnB7lB,EAAMklB,UAAW,EAEjB,IAAMS,EAAQ,IAAIL,EACZplB,EAAS,IAAIilB,EAInB,OAFAO,EAASxlB,EAAQylB,EAAO3lB,GAEjBE,EAAO6D,SAAW,GAAOtD,EAAKC,SAIvCglB,EAAS7e,YAAcA,EACvB6e,EAAS0E,MAAQxF,EACjBc,EAAS2E,OAASlF,EAClBO,EAAS4E,MAAQxF,EACjBY,EAAS6E,MAAQjF,EC3pBjB,IASYkF,EATZC,EAAA,WACEtrB,KAAA0lB,OAAwB,IAAIC,EAC5B3lB,KAAA4lB,OAAwB,IAAID,EAC5B3lB,KAAAurB,OAAgB,IAAIlW,EACpBrV,KAAAwrB,OAAgB,IAAInW,GAWrBoW,EAAAJ,oBAAA,GANWA,EAAAA,mBAAAA,EAAAA,eAMX,KALCA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,YAAA,GAAA,cAMF,IAAAK,EAAA,aAKAnH,EAAMI,QAAU,EAChBJ,EAAMK,WAAa,EACnBL,EAAMM,SAAW,EACjBN,EAAMO,SAAW,EACjBP,EAAMQ,YAAc,EACpBR,EAAMS,aAAe,EACrBT,EAAMU,gBAAkB,EAcX,IAsNR0G,EAtNQC,EAAe,SAAU7qB,EAAmBF,GACvD,IAAMgrB,EAAQxG,MAEZd,EAAMM,SAER9jB,EAAO+qB,MAAQT,EAAcA,eAACU,UAC9BhrB,EAAOV,EAAIQ,EAAMmrB,KAEjB,IAAMtG,EAAS7kB,EAAM6kB,OACfE,EAAS/kB,EAAM+kB,OAEf2F,EAAS1qB,EAAM0qB,OACfC,EAAS3qB,EAAM2qB,OAIrBD,EAAO9mB,YACP+mB,EAAO/mB,YAEP,IAAMunB,EAAOnrB,EAAMmrB,KAEbC,EAAcvG,EAAOrP,SAAWuP,EAAOvP,SACvC6V,EAAS5qB,EAAKW,IAAIgH,EAASE,WAAY8iB,EAAc,EAAMhjB,EAASE,YACpEgjB,EAAY,IAAOljB,EAASE,WAG9BP,EAAK,EACHwjB,EAAkBnjB,EAASiB,iBAC7Bkd,EAAO,EAGLZ,EAAQ,IAAIL,EAEZkG,EAAgB,IAAI5G,EAO1B,IANA4G,EAAc3G,OAAS7kB,EAAM6kB,OAC7B2G,EAAczG,OAAS/kB,EAAM+kB,OAC7ByG,EAActG,UAAW,IAIZ,CACX,IAAMU,EAAMlS,EAAUd,WAChBiT,EAAMnS,EAAUd,WACtB8X,EAAO5V,aAAa8Q,EAAK7d,GACzB4iB,EAAO7V,aAAa+Q,EAAK9d,GAIzByjB,EAAcxG,WAAaY,EAC3B4F,EAAcvG,WAAaY,EAC3B,IAAM4F,EAAiB,IAAItG,EAI3B,GAHAO,EAAS+F,EAAgB9F,EAAO6F,GAG5BC,EAAe1nB,UAAY,EAAK,CAElC7D,EAAO+qB,MAAQT,EAAcA,eAACkB,aAC9BxrB,EAAOV,EAAI,EACX,MAGF,GAAIisB,EAAe1nB,SAAWsnB,EAASC,EAAW,CAEhDprB,EAAO+qB,MAAQT,EAAcA,eAACmB,WAC9BzrB,EAAOV,EAAIuI,EACX,MAIF,IAAM6jB,EAAM,IAAIC,EAChBD,EAAIE,WAAWnG,EAAOd,EAAQ6F,EAAQ3F,EAAQ4F,EAAQ5iB,GA0BtD,IAHA,IAAIgkB,GAAO,EACP/jB,EAAKmjB,EACLa,EAAe,IACN,CAEX,IAAIC,EAAKL,EAAIM,kBAAkBlkB,GAK/B,GAAIikB,EAAKZ,EAASC,EAAW,CAE3BprB,EAAO+qB,MAAQT,EAAcA,eAAC2B,YAC9BjsB,EAAOV,EAAI2rB,EACXY,GAAO,EACP,MAIF,GAAIE,EAAKZ,EAASC,EAAW,CAE3BvjB,EAAKC,EACL,MAIF,IAAIokB,EAAKR,EAAIS,SAAStkB,GAMtB,GAAIqkB,EAAKf,EAASC,EAAW,CAC3BprB,EAAO+qB,MAAQT,EAAcA,eAAC8B,SAC9BpsB,EAAOV,EAAIuI,EACXgkB,GAAO,EACP,MAIF,GAAIK,GAAMf,EAASC,EAAW,CAE5BprB,EAAO+qB,MAAQT,EAAcA,eAACmB,WAC9BzrB,EAAOV,EAAIuI,EACXgkB,GAAO,EACP,MAOF,IAHA,IAAIQ,EAAgB,EAChBC,EAAKzkB,EACL0kB,EAAKzkB,IACI,CAEX,IAAIxI,SAGFA,EAFkB,EAAhB+sB,EAEEC,GAAMnB,EAASe,IAAOK,EAAKD,IAAOP,EAAKG,GAGvC,IAAOI,EAAKC,KAGhBF,IACA7I,EAAMS,aAER,IAAM1kB,EAAImsB,EAAIS,SAAS7sB,GAIvB,GAHeosB,EAAIpG,OACJoG,EAAInG,OAEfhlB,EAAKwE,IAAIxF,EAAI4rB,GAAUC,EAAW,CAEpCtjB,EAAKxI,EACL,MAYF,GARIC,EAAI4rB,GACNmB,EAAKhtB,EACL4sB,EAAK3sB,IAELgtB,EAAKjtB,EACLysB,EAAKxsB,GAGe,KAAlB8sB,EACF,MAQJ,GAJA7I,EAAMU,gBAAkB3jB,EAAKW,IAAIsiB,EAAMU,gBAAiBmI,KAEtDP,IAEmB5jB,EAASU,mBAC5B,MAOJ,KAHEyd,IACA7C,EAAMO,SAEJ8H,EACF,MAGF,GAAIxF,IAASgF,EAAiB,CAE5BrrB,EAAO+qB,MAAQT,EAAcA,eAAC8B,SAC9BpsB,EAAOV,EAAIuI,EACX,OAIJ2b,EAAMQ,YAAczjB,EAAKW,IAAIsiB,EAAMQ,YAAaqC,GAEhD,IAAM5B,EAAOH,EAAWwG,GACxBtH,EAAMK,WAAatjB,EAAKW,IAAIsiB,EAAMK,WAAYY,GAC9CjB,EAAMI,SAAWa,IAGnB,SAAKmG,GACHA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UAHF,CAAKA,IAAAA,EAIJ,KAED,IAAAe,EAAA,WAAA,SAAAA,IACE1sB,KAAAutB,SAA0B,IAAI5H,EAC9B3lB,KAAAwtB,SAA0B,IAAI7H,EAM9B3lB,KAAAytB,aAAqBrrB,EAAKM,OAC1B1C,KAAA0tB,OAAetrB,EAAKM,OA4JtB,OAxJEgqB,EAAAjtB,UAAAktB,WAAA,SAAWnG,EAAqBd,EAAuB6F,EAAe3F,EAAuB4F,EAAe5iB,GAC1G5I,KAAKutB,SAAW7H,EAChB1lB,KAAKwtB,SAAW5H,EAChB,IAAMxV,EAAQoW,EAAMpW,MAGpBpQ,KAAK2tB,SAAWpC,EAChBvrB,KAAK4tB,SAAWpC,EAEhB,IAAM/E,EAAMlS,EAAUd,WAChBiT,EAAMnS,EAAUd,WAItB,GAHAzT,KAAK2tB,SAAShY,aAAa8Q,EAAK7d,GAChC5I,KAAK4tB,SAASjY,aAAa+Q,EAAK9d,GAElB,IAAVwH,EAAa,CACfpQ,KAAKoW,OAASuV,EAAuBkC,SACrC,IAAMC,EAAc9tB,KAAKutB,SAAS3F,UAAUpB,EAAMH,OAAO,IACnD0H,EAAc/tB,KAAKwtB,SAAS5F,UAAUpB,EAAMF,OAAO,IACnDL,EAAS1R,EAAUL,QAAQuS,EAAKqH,GAChC5H,EAAS3R,EAAUL,QAAQwS,EAAKqH,GAGtC,OAFA/tB,KAAK0tB,OAAO/pB,WAAW,EAAGuiB,GAAS,EAAGD,GAChC3lB,EAAIN,KAAK0tB,OAAOjpB,YAGjB,GAAI+hB,EAAMH,OAAO,KAAOG,EAAMH,OAAO,GAAI,CAE9CrmB,KAAKoW,OAASuV,EAAuBqC,QACrC,IAAMC,EAAerI,EAAOgC,UAAUpB,EAAMF,OAAO,IAC7C4H,EAAetI,EAAOgC,UAAUpB,EAAMF,OAAO,IAEnDtmB,KAAK0tB,OAAStrB,EAAKiD,aAAajD,EAAKgC,IAAI8pB,EAAcD,GAAe,GACtEjuB,KAAK0tB,OAAOjpB,YACZ,IAAMgE,EAAS0K,EAAIe,QAAQwS,EAAIhS,EAAG1U,KAAK0tB,QAEvC1tB,KAAKytB,aAAerrB,EAAK2D,IAAIkoB,EAAcC,GACrChI,EAAS3R,EAAUL,QAAQwS,EAAK1mB,KAAKytB,cAErCK,EAAcpI,EAAOkC,UAAUpB,EAAMH,OAAO,IAC5CJ,EAAS1R,EAAUL,QAAQuS,EAAKqH,GAOtC,OALIxtB,EAAI8B,EAAK8C,IAAI+gB,EAAQxd,GAAUrG,EAAK8C,IAAIghB,EAAQzd,IAC5C,IACNzI,KAAK0tB,OAAStrB,EAAKyD,IAAI7F,KAAK0tB,QAC5BptB,GAAKA,GAEAA,EAIPN,KAAKoW,OAASuV,EAAuBwC,QACrC,IAAMC,EAAepuB,KAAKutB,SAAS3F,UAAUpB,EAAMH,OAAO,IACpDgI,EAAeruB,KAAKutB,SAAS3F,UAAUpB,EAAMH,OAAO,IAE1DrmB,KAAK0tB,OAAStrB,EAAKiD,aAAajD,EAAKgC,IAAIiqB,EAAcD,GAAe,GACtEpuB,KAAK0tB,OAAOjpB,YACNgE,EAAS0K,EAAIe,QAAQuS,EAAI/R,EAAG1U,KAAK0tB,QAEvC1tB,KAAKytB,aAAerrB,EAAK2D,IAAIqoB,EAAcC,GAC3C,IAKI/tB,EALE2lB,EAAS1R,EAAUL,QAAQuS,EAAKzmB,KAAKytB,cAErCM,EAAc/tB,KAAKwtB,SAAS5F,UAAUpB,EAAMF,OAAO,IACnDJ,EAAS3R,EAAUL,QAAQwS,EAAKqH,GAOtC,OALIztB,EAAI8B,EAAK8C,IAAIghB,EAAQzd,GAAUrG,EAAK8C,IAAI+gB,EAAQxd,IAC5C,IACNzI,KAAK0tB,OAAStrB,EAAKyD,IAAI7F,KAAK0tB,QAC5BptB,GAAKA,GAEAA,GAIXosB,EAAAjtB,UAAA6uB,QAAA,SAAQC,EAAeluB,GAErB,IAAMomB,EAAMlS,EAAUd,WAChBiT,EAAMnS,EAAUd,WAItB,OAHAzT,KAAK2tB,SAAShY,aAAa8Q,EAAKpmB,GAChCL,KAAK4tB,SAASjY,aAAa+Q,EAAKrmB,GAExBL,KAAKoW,QACX,KAAKuV,EAAuBkC,SAC1B,GAAIU,EAAM,CACR,IAAMC,EAAQrb,EAAImB,SAASmS,EAAI/R,EAAG1U,KAAK0tB,QACjCe,EAAQtb,EAAImB,SAASoS,EAAIhS,EAAGtS,EAAKyD,IAAI7F,KAAK0tB,SAEhD1tB,KAAKqmB,OAASrmB,KAAKutB,SAAS7F,WAAW8G,GACvCxuB,KAAKsmB,OAAStmB,KAAKwtB,SAAS9F,WAAW+G,GAGzC,IAAMX,EAAc9tB,KAAKutB,SAAS3F,UAAU5nB,KAAKqmB,QAC3C0H,EAAc/tB,KAAKwtB,SAAS5F,UAAU5nB,KAAKsmB,QAE3CL,EAAS1R,EAAUL,QAAQuS,EAAKqH,GAChC5H,EAAS3R,EAAUL,QAAQwS,EAAKqH,GAGtC,OADY3rB,EAAK8C,IAAIghB,EAAQlmB,KAAK0tB,QAAUtrB,EAAK8C,IAAI+gB,EAAQjmB,KAAK0tB,QAIpE,KAAK/B,EAAuBwC,QAC1B,IAAM1lB,EAAS0K,EAAIe,QAAQuS,EAAI/R,EAAG1U,KAAK0tB,QACjCzH,EAAS1R,EAAUL,QAAQuS,EAAKzmB,KAAKytB,cAE3C,GAAIc,EAAM,CACFE,EAAQtb,EAAImB,SAASoS,EAAIhS,EAAGtS,EAAKyD,IAAI4C,IAE3CzI,KAAKqmB,QAAU,EACfrmB,KAAKsmB,OAAStmB,KAAKwtB,SAAS9F,WAAW+G,GAGnCV,EAAc/tB,KAAKwtB,SAAS5F,UAAU5nB,KAAKsmB,QAC3CJ,EAAS3R,EAAUL,QAAQwS,EAAKqH,GAGtC,OADY3rB,EAAK8C,IAAIghB,EAAQzd,GAAUrG,EAAK8C,IAAI+gB,EAAQxd,GAI1D,KAAKkjB,EAAuBqC,QACpBvlB,EAAS0K,EAAIe,QAAQwS,EAAIhS,EAAG1U,KAAK0tB,QACjCxH,EAAS3R,EAAUL,QAAQwS,EAAK1mB,KAAKytB,cAE3C,GAAIc,EAAM,CACFC,EAAQrb,EAAImB,SAASmS,EAAI/R,EAAGtS,EAAKyD,IAAI4C,IAE3CzI,KAAKsmB,QAAU,EACftmB,KAAKqmB,OAASrmB,KAAKutB,SAAS7F,WAAW8G,GAGnCV,EAAc9tB,KAAKutB,SAAS3F,UAAU5nB,KAAKqmB,QAC3CJ,EAAS1R,EAAUL,QAAQuS,EAAKqH,GAGtC,OADY1rB,EAAK8C,IAAI+gB,EAAQxd,GAAUrG,EAAK8C,IAAIghB,EAAQzd,GAI1D,QAME,OAJI8lB,IACFvuB,KAAKqmB,QAAU,EACfrmB,KAAKsmB,QAAU,GAEV,IAIboG,EAAiBjtB,UAAAstB,kBAAjB,SAAkB1sB,GAChB,OAAOL,KAAKsuB,SAAQ,EAAMjuB,IAG5BqsB,EAAQjtB,UAAAytB,SAAR,SAAS7sB,GACP,OAAOL,KAAKsuB,SAAQ,EAAOjuB,IAE9BqsB,KAEgC,IAAIA,EAGrCd,EAAaX,MAAQK,EACrBM,EAAaV,OAASQ,ECvbtB,IAAAgD,EAAA,WAAA,SAAAA,IAEE1uB,KAAE2uB,GAAW,EAEb3uB,KAAM4uB,OAAW,EACjB5uB,KAAkB6uB,mBAAW,EAC7B7uB,KAAkB8uB,mBAAW,EAC7B9uB,KAAY+uB,cAAY,EACxB/uB,KAAUgvB,YAAY,EAGtBhvB,KAAOivB,QAAW,EAElBjvB,KAAOkvB,QAAW,EAUpB,OARER,EAAKjvB,UAAA0vB,MAAL,SAAMR,GACA3uB,KAAK2uB,GAAK,IACZ3uB,KAAKivB,QAAUjvB,KAAK4uB,QAEtB5uB,KAAK2uB,GAAKA,EACV3uB,KAAK4uB,OAAe,GAAND,EAAU,EAAI,EAAIA,EAChC3uB,KAAKkvB,QAAUP,EAAK3uB,KAAKivB,SAE5BP,KAGKU,EAAY,IAAIV,EAOtBW,EAAA,WAOE,SAAAA,EAAYjU,GACVpb,KAAKob,QAAUA,EACfpb,KAAKsvB,QAAU,GACftvB,KAAKuvB,SAAW,GAsBpB,OAnBEnwB,OAAA8J,eAAImmB,EAAc5vB,UAAA,iBAAA,CAAlB6J,IAAA,WACE,IAAM8R,EAAUpb,KAAKob,QACfkU,EAAUtvB,KAAKsvB,QACrBA,EAAQ5uB,OAAS,EACjB,IAAK,IAAIlB,EAAI,EAAGA,EAAI4b,EAAQoU,SAAS9uB,SAAUlB,EAC7C8vB,EAAQ1jB,KAAKwP,EAAQoU,SAAShwB,GAAGiwB,eAEnC,OAAOH,mCAGTlwB,OAAA8J,eAAImmB,EAAe5vB,UAAA,kBAAA,CAAnB6J,IAAA,WACE,IAAM8R,EAAUpb,KAAKob,QACfmU,EAAWvvB,KAAKuvB,SACtBA,EAAS7uB,OAAS,EAClB,IAAK,IAAIlB,EAAI,EAAGA,EAAI4b,EAAQoU,SAAS9uB,SAAUlB,EAC7C+vB,EAAS3jB,KAAKwP,EAAQoU,SAAShwB,GAAGkwB,gBAEpC,OAAOH,mCAEVF,KAKDM,EAAA,WAOE,SAAAA,EAAYjU,GACV1b,KAAKsY,QAAUoD,EACf1b,KAAK4vB,QAAU,GACf5vB,KAAK6vB,SAAW,GAChB7vB,KAAK8vB,WAAa,GAClB9vB,KAAK+vB,SAAW,GA8vBpB,OA3vBEJ,EAAAlwB,UAAAuwB,MAAA,WACEhwB,KAAK4vB,QAAQlvB,OAAS,EACtBV,KAAK6vB,SAASnvB,OAAS,EACvBV,KAAK8vB,WAAWpvB,OAAS,EACzBV,KAAK+vB,SAASrvB,OAAS,GAGzBivB,EAAOlwB,UAAAwwB,QAAP,SAAQ/Y,GAENlX,KAAK6vB,SAASjkB,KAAKsL,IAQrByY,EAAUlwB,UAAAywB,WAAV,SAAW9U,GAETpb,KAAK8vB,WAAWlkB,KAAKwP,IAGvBuU,EAAQlwB,UAAA0wB,SAAR,SAASrN,GAEP9iB,KAAK+vB,SAASnkB,KAAKkX,IAGrB6M,EAAUlwB,UAAA2wB,WAAV,SAAWC,GAIT,IAHA,IAAM3U,EAAQ1b,KAAKsY,QAGVnZ,EAAIuc,EAAM4U,WAAYnxB,EAAGA,EAAIA,EAAE2Y,OACtC3Y,EAAEqe,cAAe,EAEnB,IAAK,IAAInM,EAAIqK,EAAMgD,cAAerN,EAAGA,EAAIA,EAAEyG,OACzCzG,EAAEmM,cAAe,EAEnB,IAAK,IAAI/M,EAAIiL,EAAM+C,YAAahO,EAAGA,EAAIA,EAAEqH,OACvCrH,EAAE+M,cAAe,EAMnB,IAFA,IAAMjR,EAAQvM,KAAK4vB,QAEVW,EAAO7U,EAAM4U,WAAYC,EAAMA,EAAOA,EAAKzY,OAElD,IAAIyY,EAAK/S,cAIa,GAAlB+S,EAAKlQ,WAAyC,GAAnBkQ,EAAKjQ,aAKhCiQ,EAAKnR,WAAT,CAYA,IAPApf,KAAKgwB,QAELzjB,EAAMX,KAAK2kB,GAEXA,EAAK/S,cAAe,EAGbjR,EAAM7L,OAAS,GAAG,CAEjBvB,EAAIoN,EAAMyE,MAShB,GAPAhR,KAAKiwB,QAAQ9wB,GAGbA,EAAE8Z,UAAS,IAIP9Z,EAAEigB,WAAN,CAKA,IAAK,IAAIQ,EAAKzgB,EAAEuf,cAAekB,EAAIA,EAAKA,EAAGnQ,KAAM,CAC/C,IAAM2L,EAAUwE,EAAGxE,QAGnB,IAAIA,EAAQoC,eAKe,GAAvBpC,EAAQoV,aAAgD,GAAxBpV,EAAQqV,cAA5C,CAKA,IAAMC,EAAUtV,EAAQuV,WAAWlZ,WAC7BmZ,EAAUxV,EAAQyV,WAAWpZ,WACnC,IAAIiZ,IAAWE,EAIf5wB,KAAKkwB,WAAW9U,GAChBA,EAAQoC,cAAe,GAEjBqF,EAAQjD,EAAGiD,OAGPrF,eAKVjR,EAAMX,KAAKiX,GACXA,EAAMrF,cAAe,IAIvB,IAAK,IAAIsT,EAAK3xB,EAAEsf,YAAaqS,EAAIA,EAAKA,EAAGrhB,KAAM,CAK7C,IAAMoT,EAJN,GAA6B,GAAzBiO,EAAGhO,MAAMtF,aAOW,IAHlBqF,EAAQiO,EAAGjO,OAGPvC,aAIVtgB,KAAKmwB,SAASW,EAAGhO,OACjBgO,EAAGhO,MAAMtF,cAAe,EAEpBqF,EAAMrF,eAKVjR,EAAMX,KAAKiX,GACXA,EAAMrF,cAAe,MAIzBxd,KAAK+wB,YAAYV,GAGjB,IAAK,IAAI9vB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,EAGvCpB,EAAIa,KAAK6vB,SAAStvB,IAClB6e,aACJjgB,EAAEqe,cAAe,MAMzBmS,EAAWlwB,UAAAsxB,YAAX,SAAYV,GASV,IAPA,IAAM3U,EAAQ1b,KAAKsY,QACb0Y,EAAUtV,EAAMuV,UAChBtU,EAAajB,EAAMwV,aAEnB5f,EAAI+e,EAAK1B,GAGNpuB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,CAC7C,IAAM2W,EAAOlX,KAAK6vB,SAAStvB,GAErB8Q,EAAIjP,EAAKQ,MAAMsU,EAAK4G,QAAQzM,GAC5B5N,EAAIyT,EAAK4G,QAAQra,EACjBZ,EAAIT,EAAKQ,MAAMsU,EAAKiH,kBACtBza,EAAIwT,EAAKkH,kBAGblH,EAAK4G,QAAQtI,GAAGlS,QAAQ4T,EAAK4G,QAAQzM,GACrC6F,EAAK4G,QAAQrI,GAAKyB,EAAK4G,QAAQra,EAE3ByT,EAAKmI,cAEPxc,EAAEmB,OAAOsN,EAAI4F,EAAKqH,eAAgByS,GAClCnuB,EAAEmB,OAAOsN,EAAI4F,EAAKyG,UAAWzG,EAAK+G,SAClCva,GAAK4N,EAAI4F,EAAK2G,OAAS3G,EAAKgH,SAY5Brb,EAAEwB,IAAI,GAAO,EAAMiN,EAAI4F,EAAKmH,kBAC5B3a,GAAK,GAAO,EAAM4N,EAAI4F,EAAKoH,mBAG7BpH,EAAK8G,WAAW3M,EAAIA,EACpB6F,EAAK8G,WAAWva,EAAIA,EACpByT,EAAK6G,WAAWlb,EAAIA,EACpBqU,EAAK6G,WAAWra,EAAIA,EAGtB,IAASnD,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxB4wB,eAAed,GAGzB,IAAS9vB,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxB6wB,uBAAuBf,GAGjC,GAAIA,EAAKtB,aAEP,IAASxuB,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxB8wB,oBAAoBhB,GAIhC,IAAS9vB,EAAI,EAAGA,EAAIP,KAAK+vB,SAASrvB,SAAUH,EAAG,CAC/BP,KAAK+vB,SAASxvB,GACtB+wB,wBAAwBjB,GAIhC,IAAS9vB,EAAI,EAAGA,EAAI8vB,EAAKxB,qBAAsBtuB,EAAG,CAChD,IAAK,IAAIkQ,EAAI,EAAGA,EAAIzQ,KAAK+vB,SAASrvB,SAAU+P,EAAG,CAC/BzQ,KAAK+vB,SAAStf,GACtB8gB,yBAAyBlB,GAGjC,IAAS5f,EAAI,EAAGA,EAAIzQ,KAAK8vB,WAAWpvB,SAAU+P,EAAG,CAC/BzQ,KAAK8vB,WAAWrf,GACxB+gB,wBAAwBnB,IAKpC,IAAS9vB,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxBkxB,wBAAwBpB,GAIlC,IAAS9vB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,CACvC2W,EAAOlX,KAAK6vB,SAAStvB,GAErB8Q,EAAIjP,EAAKQ,MAAMsU,EAAK8G,WAAW3M,GACjC5N,EAAIyT,EAAK8G,WAAWva,EAClBZ,EAAIT,EAAKQ,MAAMsU,EAAK6G,WAAWlb,GACjCa,EAAIwT,EAAK6G,WAAWra,EALxB,IAQMguB,EAActvB,EAAKuD,WAAW2L,EAAGzO,GACvC,GAAIT,EAAKoC,cAAcktB,GAAezoB,EAAS0oB,sBAAuB,CACpE,IAAMC,EAAQ3oB,EAASG,eAAiBsoB,EAAYhxB,SACpDmC,EAAEwB,IAAIutB,GAGR,IAAMnd,EAAWnD,EAAI5N,EACrB,GAAI+Q,EAAWA,EAAWxL,EAAS4oB,mBAEjCnuB,GADMkuB,EAAQ3oB,EAASI,YAAc/H,EAAKwE,IAAI2O,GAKhDpD,EAAErN,OAAOsN,EAAGzO,GACZY,GAAK6N,EAAI5N,EAETwT,EAAK8G,WAAW3M,EAAE/N,QAAQ+N,GAC1B6F,EAAK8G,WAAWva,EAAIA,EACpByT,EAAK6G,WAAWlb,EAAES,QAAQT,GAC1BqU,EAAK6G,WAAWra,EAAIA,EAItB,IAAIouB,GAAiB,EACrB,IAASvxB,EAAI,EAAGA,EAAI8vB,EAAKvB,qBAAsBvuB,EAAG,CAChD,IAAIwxB,EAAgB,EACpB,IAASthB,EAAI,EAAGA,EAAIzQ,KAAK8vB,WAAWpvB,SAAU+P,EAAG,CAC/C,IACMuhB,EADUhyB,KAAK8vB,WAAWrf,GACLwhB,wBAAwB5B,GACnD0B,EAAgBzwB,EAAKU,IAAI+vB,EAAeC,GAI1C,IAAME,EAAeH,IAAkB,EAAM9oB,EAASE,WAElDgpB,GAAa,EACjB,IAAS1hB,EAAI,EAAGA,EAAIzQ,KAAK+vB,SAASrvB,SAAU+P,EAAG,CAC7C,IACM2hB,EADQpyB,KAAK+vB,SAAStf,GACJ4hB,yBAAyBhC,GACjD8B,EAAaA,GAAcC,EAG7B,GAAIF,GAAgBC,EAAY,CAE9BL,GAAiB,EACjB,OAKJ,IAASvxB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,EACvC2W,EAAOlX,KAAK6vB,SAAStvB,IAEtBud,QAAQzM,EAAE/N,QAAQ4T,EAAK8G,WAAW3M,GACvC6F,EAAK4G,QAAQra,EAAIyT,EAAK8G,WAAWva,EACjCyT,EAAKiH,iBAAiB7a,QAAQ4T,EAAK6G,WAAWlb,GAC9CqU,EAAKkH,kBAAoBlH,EAAK6G,WAAWra,EACzCwT,EAAKwJ,uBAKP,GAFA1gB,KAAKsyB,kBAED3V,EAAY,CACd,IAAI4V,EAAenqB,EAAAA,EAEboqB,EAAYvpB,EAASwpB,wBACrBC,EAAYzpB,EAAS0pB,yBAE3B,IAASpyB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,EACvC2W,EAAOlX,KAAK6vB,SAAStvB,IAClB6e,aAIoB,GAAxBlI,EAAKkG,iBACJlG,EAAKkH,kBAAoBlH,EAAKkH,kBAAoBsU,GAClDtwB,EAAKoC,cAAc0S,EAAKiH,kBAAoBqU,GAChDtb,EAAKsH,YAAc,EACnB+T,EAAe,IAEfrb,EAAKsH,aAAelN,EACpBihB,EAAejxB,EAAKU,IAAIuwB,EAAcrb,EAAKsH,eAI/C,GAAI+T,GAAgBtpB,EAASwB,aAAeqnB,EAC1C,IAASvxB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,EACvC2W,EAAOlX,KAAK6vB,SAAStvB,IACtB0Y,UAAS,MAStB0W,EAAalwB,UAAAmzB,cAAb,SAAcvC,GACZ,IAAM3U,EAAQ1b,KAAKsY,QAEnB,GAAIoD,EAAMmX,eAAgB,CACxB,IAAK,IAAI1zB,EAAIuc,EAAM4U,WAAYnxB,EAAGA,EAAIA,EAAE2Y,OACtC3Y,EAAEqe,cAAe,EACjBre,EAAE2e,QAAQvI,OAAS,EAGrB,IAAK,IAAIlE,EAAIqK,EAAMgD,cAAerN,EAAGA,EAAIA,EAAEyG,OAEzCzG,EAAEoM,WAAY,EACdpM,EAAEmM,cAAe,EACjBnM,EAAEyhB,WAAa,EACfzhB,EAAE0hB,MAAQ,EAKd,OAAa,CAEX,IAAIC,EAAa,KACbC,EAAW,EAEf,IAAS5hB,EAAIqK,EAAMgD,cAAerN,EAAGA,EAAIA,EAAEyG,OAEzC,GAAqB,GAAjBzG,EAAEmf,eAKFnf,EAAEyhB,WAAa7pB,EAASe,aAA5B,CAIA,IAAI8L,EAAQ,EACZ,GAAIzE,EAAEoM,UAEJ3H,EAAQzE,EAAE0hB,UACL,CACL,IAAMG,EAAK7hB,EAAEiK,cACP6X,EAAK9hB,EAAEmK,cAGb,GAAI0X,EAAGxc,YAAcyc,EAAGzc,WACtB,SAGF,IAAM0c,EAAKF,EAAG9a,UACRib,EAAKF,EAAG/a,UAIRkb,EAAUF,EAAG/S,YAAc+S,EAAGhU,WAC9BmU,EAAUF,EAAGhT,YAAcgT,EAAGjU,WAGpC,GAAe,GAAXkU,GAA+B,GAAXC,EACtB,SAGF,IAAM1X,EAAWuX,EAAGpT,aAAeoT,EAAG/T,YAChCvD,EAAWuX,EAAGrT,aAAeqT,EAAGhU,YAGtC,GAAgB,GAAZxD,GAAiC,GAAZC,EACvB,SAKF,IAAIvG,EAAS6d,EAAGtV,QAAQvI,OAEpB6d,EAAGtV,QAAQvI,OAAS8d,EAAGvV,QAAQvI,QACjCA,EAAS8d,EAAGvV,QAAQvI,OACpB6d,EAAGtV,QAAQjI,QAAQN,IACV8d,EAAGvV,QAAQvI,OAAS6d,EAAGtV,QAAQvI,SACxCA,EAAS6d,EAAGtV,QAAQvI,OACpB8d,EAAGvV,QAAQjI,QAAQN,IAKrB,IAAM8Q,EAAShV,EAAEmiB,iBACXlN,EAASjV,EAAEoiB,iBAEFL,EAAGtV,QACHuV,EAAGvV,QAGlB,IAAMjd,EAAQ,IAAIyqB,EAClBzqB,EAAM6kB,OAAOtiB,IAAI8vB,EAAGpa,WAAYuN,GAChCxlB,EAAM+kB,OAAOxiB,IAAI+vB,EAAGra,WAAYwN,GAChCzlB,EAAM0qB,OAAOnoB,IAAIgwB,EAAGtV,SACpBjd,EAAM2qB,OAAOpoB,IAAIiwB,EAAGvV,SACpBjd,EAAMmrB,KAAO,EAEb,IAAMjrB,EAAS,IAAI2qB,EACnBE,EAAa7qB,EAAQF,GAGrB,IAAM+U,EAAO7U,EAAOV,EAElByV,EADE/U,EAAO+qB,OAAST,EAAcA,eAACmB,WACzBlrB,EAAKU,IAAIuT,GAAU,EAAMA,GAAUK,EAAM,GAEzC,EAGVvE,EAAE0hB,MAAQjd,EACVzE,EAAEoM,WAAY,EAGZ3H,EAAQmd,IAEVD,EAAa3hB,EACb4hB,EAAWnd,GAIf,GAAkB,MAAdkd,GAAsB,EAAM,GAAO1xB,EAAKC,QAAU0xB,EAAU,CAE9DvX,EAAMmX,gBAAiB,EACvB,MAIF,IAAMa,EAAKV,EAAW1X,cAChBqY,EAAKX,EAAWxX,cAChBoY,EAAKF,EAAGtb,UACRyb,EAAKF,EAAGvb,UAER0b,EAAUF,EAAG9V,QAAQlb,QACrBmxB,EAAUF,EAAG/V,QAAQlb,QAW3B,GATAgxB,EAAG/d,QAAQod,GACXY,EAAGhe,QAAQod,GAGXD,EAAWgB,OAAOtY,GAClBsX,EAAWvV,WAAY,IACrBuV,EAAWF,WAGiB,GAA1BE,EAAWxC,aAAmD,GAA3BwC,EAAWvC,aAAlD,CAUAmD,EAAG3a,UAAS,GACZ4a,EAAG5a,UAAS,GAGZjZ,KAAKgwB,QACLhwB,KAAKiwB,QAAQ2D,GACb5zB,KAAKiwB,QAAQ4D,GACb7zB,KAAKkwB,WAAW8C,GAEhBY,EAAGpW,cAAe,EAClBqW,EAAGrW,cAAe,EAClBwV,EAAWxV,cAAe,EAI1B,IADA,IAAMyW,EAAS,CAAEL,EAAIC,GACZtzB,EAAI,EAAGA,EAAI0zB,EAAOvzB,SAAUH,EAAG,CAEtC,IADM2W,EAAO+c,EAAO1zB,IACX8e,YACP,IAAK,IAAIO,EAAK1I,EAAKwH,cAAekB,EAAIA,EAAKA,EAAGnQ,KAAM,CAIlD,IAAM2L,EAAUwE,EAAGxE,QAGnB,IAAIA,EAAQoC,aAAZ,CAKA,IAAMqF,EAAQjD,EAAGiD,MACjB,IAAIA,EAAMxD,aAAgBnI,EAAK8I,YAAe6C,EAAM7C,WAApD,CAKA,IAAM0Q,EAAUtV,EAAQuV,WAAWlZ,WAC7BmZ,EAAUxV,EAAQyV,WAAWpZ,WACnC,IAAIiZ,IAAWE,EAAf,CAKA,IAAMsD,EAASrR,EAAM/E,QAAQlb,QACH,GAAtBigB,EAAMrF,cACRqF,EAAMhN,QAAQod,GAIhB7X,EAAQ4Y,OAAOtY,GAIY,GAAvBN,EAAQoV,aAAgD,GAAxBpV,EAAQqV,cAO5CrV,EAAQoC,cAAe,EACvBxd,KAAKkwB,WAAW9U,GAGZyH,EAAMrF,eAKVqF,EAAMrF,cAAe,EAEhBqF,EAAMzD,YACTyD,EAAM5J,UAAS,GAGjBjZ,KAAKiwB,QAAQpN,MArBXA,EAAM/E,QAAQ1a,IAAI8wB,GAClBrR,EAAMnC,4BAyBd0O,EAAUD,OAAO,EAAM8D,GAAY5C,EAAK1B,IACxCS,EAAUF,QAAU,EACpBE,EAAUN,mBAAqB,GAC/BM,EAAUP,mBAAqBwB,EAAKxB,mBACpCO,EAAUL,cAAe,EAEzB/uB,KAAKm0B,eAAe/E,EAAWwE,EAAIC,GAGnC,IAAStzB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,CAC7C,IAAM2W,EAGN,IAHMA,EAAOlX,KAAK6vB,SAAStvB,IACtBid,cAAe,EAEftG,EAAKmI,YAAV,CAIAnI,EAAKyI,sBAGL,IAASC,EAAK1I,EAAKwH,cAAekB,EAAIA,EAAKA,EAAGnQ,KAC5CmQ,EAAGxE,QAAQqC,WAAY,EACvBmC,EAAGxE,QAAQoC,cAAe,GAS9B,GAFA9B,EAAM0Y,kBAEF1Y,EAAM2Y,cAAe,CACvB3Y,EAAMmX,gBAAiB,EACvB,YAzHAG,EAAWsB,YAAW,GACtBV,EAAG9V,QAAQ1a,IAAI0wB,GACfD,EAAG/V,QAAQ1a,IAAI2wB,GACfH,EAAGlT,uBACHmT,EAAGnT,yBA0HTiP,EAAAlwB,UAAA00B,eAAA,SAAeI,EAAmBC,EAAYC,GAC9Bz0B,KAAKsY,QAGnB,IAAK,IAAI/X,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,EACvC2W,EAAOlX,KAAK6vB,SAAStvB,IACtByd,WAAW3M,EAAE/N,QAAQ4T,EAAK4G,QAAQzM,GACvC6F,EAAK8G,WAAWva,EAAIyT,EAAK4G,QAAQra,EACjCyT,EAAK6G,WAAWlb,EAAES,QAAQ4T,EAAKiH,kBAC/BjH,EAAK6G,WAAWra,EAAIwT,EAAKkH,kBAG3B,IAAS7d,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxB4wB,eAAeoD,GAIzB,IAASh0B,EAAI,EAAGA,EAAIg0B,EAAQzF,qBAAsBvuB,EAAG,CAEnD,IADA,IAAIwxB,EAAgB,EACXthB,EAAI,EAAGA,EAAIzQ,KAAK8vB,WAAWpvB,SAAU+P,EAAG,CAC/C,IACMuhB,EADUhyB,KAAK8vB,WAAWrf,GACLikB,2BAA2BH,EAASC,EAAMC,GACrE1C,EAAgBzwB,EAAKU,IAAI+vB,EAAeC,GAK1C,GADqBD,IAAkB,IAAM9oB,EAASE,WAEpD,MAmCJqrB,EAAK1W,QAAQtI,GAAGlS,QAAQkxB,EAAKxW,WAAW3M,GACxCmjB,EAAK1W,QAAQrI,GAAK+e,EAAKxW,WAAWva,EAClCgxB,EAAK3W,QAAQtI,GAAGlS,QAAQmxB,EAAKzW,WAAW3M,GACxCojB,EAAK3W,QAAQrI,GAAKgf,EAAKzW,WAAWva,EAIlC,IAASlD,EAAI,EAAGA,EAAIP,KAAK8vB,WAAWpvB,SAAUH,EAAG,CAC/BP,KAAK8vB,WAAWvvB,GACxB6wB,uBAAuBmD,GAIjC,IAASh0B,EAAI,EAAGA,EAAIg0B,EAAQ1F,qBAAsBtuB,EAChD,IAASkQ,EAAI,EAAGA,EAAIzQ,KAAK8vB,WAAWpvB,SAAU+P,EAAG,CAC/BzQ,KAAK8vB,WAAWrf,GACxB+gB,wBAAwB+C,GAOpC,IAAMjjB,EAAIijB,EAAQ5F,GAGlB,IAASpuB,EAAI,EAAGA,EAAIP,KAAK6vB,SAASnvB,SAAUH,EAAG,CAC7C,IAAM2W,EAAOlX,KAAK6vB,SAAStvB,GAErB8Q,EAAIjP,EAAKQ,MAAMsU,EAAK8G,WAAW3M,GACjC5N,EAAIyT,EAAK8G,WAAWva,EAClBZ,EAAIT,EAAKQ,MAAMsU,EAAK6G,WAAWlb,GACjCa,EAAIwT,EAAK6G,WAAWra,EAGlBguB,EAActvB,EAAKuD,WAAW2L,EAAGzO,GACvC,GAAIT,EAAK8C,IAAIwsB,EAAaA,GAAezoB,EAAS0oB,sBAAuB,CACvE,IAAMC,EAAQ3oB,EAASG,eAAiBsoB,EAAYhxB,SACpDmC,EAAEwB,IAAIutB,GAGR,IAAMnd,EAAWnD,EAAI5N,EACrB,GAAI+Q,EAAWA,EAAWxL,EAAS4oB,mBAEjCnuB,GADMkuB,EAAQ3oB,EAASI,YAAc/H,EAAKwE,IAAI2O,GAKhDpD,EAAErN,OAAOsN,EAAGzO,GACZY,GAAK6N,EAAI5N,EAETwT,EAAK8G,WAAW3M,EAAIA,EACpB6F,EAAK8G,WAAWva,EAAIA,EACpByT,EAAK6G,WAAWlb,EAAIA,EACpBqU,EAAK6G,WAAWra,EAAIA,EAGpBwT,EAAK4G,QAAQzM,EAAIA,EACjB6F,EAAK4G,QAAQra,EAAIA,EACjByT,EAAKiH,iBAAmBtb,EACxBqU,EAAKkH,kBAAoB1a,EACzBwT,EAAKwJ,uBAGP1gB,KAAKsyB,mBAIP3C,EAAAlwB,UAAA6yB,gBAAA,WACE,IAAK,IAAIjhB,EAAI,EAAGA,EAAIrR,KAAK8vB,WAAWpvB,SAAU2Q,EAAG,CAC/C,IAAM+J,EAAUpb,KAAK8vB,WAAWze,GAChCrR,KAAKsY,QAAQqc,UAAUvZ,EAASA,EAAQwZ,aAG7CjF,KAGDA,EAAOjB,SAAWA,ECx1BlB,ICJYmG,EAMAC,EAQCC,GDVbC,GAAA,WAQE,SAAAA,EAAYvxB,EAAItE,EAAIkS,EAAInS,GACL,iBAANuE,GAAwB,OAANA,GAC3BzD,KAAKi1B,GAAK7yB,EAAKQ,MAAMa,GACrBzD,KAAKk1B,GAAK9yB,EAAKQ,MAAMzD,IACC,iBAANsE,GAChBzD,KAAKi1B,GAAK7yB,EAAKO,IAAIc,EAAG4N,GACtBrR,KAAKk1B,GAAK9yB,EAAKO,IAAIxD,EAAGD,KAEtBc,KAAKi1B,GAAK7yB,EAAKM,OACf1C,KAAKk1B,GAAK9yB,EAAKM,QA0LrB,OArLEsyB,EAAAv1B,UAAAqD,SAAA,WACE,OAAOC,KAAKC,UAAUhD,OAGjBg1B,EAAO/xB,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGL,EAAKa,QAAQR,EAAIwyB,KAAO7yB,EAAKa,QAAQR,EAAIyyB,MAG3CF,EAAMrzB,OAAb,SAAcuB,KAQd8xB,EAAGv1B,UAAA2D,IAAH,SAAIK,EAAGtE,EAAIkS,EAAInS,GACI,iBAANuE,GAA+B,iBAANtE,GAA+B,iBAANkS,GAC3C,iBAANnS,GACVc,KAAKi1B,GAAG5xB,OAAOI,EAAG4N,GAClBrR,KAAKk1B,GAAG7xB,OAAOlE,EAAGD,IAEI,iBAANuE,GAA+B,iBAANtE,GACzCa,KAAKi1B,GAAG3xB,QAAQG,GAChBzD,KAAKk1B,GAAG5xB,QAAQnE,IAEM,iBAANsE,IAEhBzD,KAAKi1B,GAAG3xB,QAAQG,EAAEwxB,IAClBj1B,KAAKk1B,GAAG5xB,QAAQG,EAAEyxB,MAOtBF,EAAAv1B,UAAA8T,YAAA,WACEvT,KAAKi1B,GAAGxzB,EAAI,EACZzB,KAAKk1B,GAAGzzB,EAAI,EACZzB,KAAKi1B,GAAG5yB,EAAI,EACZrC,KAAKk1B,GAAG7yB,EAAI,GAGd2yB,EAAAv1B,UAAA0D,QAAA,WACEnD,KAAKi1B,GAAGxzB,EAAI,EACZzB,KAAKk1B,GAAGzzB,EAAI,EACZzB,KAAKi1B,GAAG5yB,EAAI,EACZrC,KAAKk1B,GAAG7yB,EAAI,GAGd2yB,EAAAv1B,UAAA01B,WAAA,WACE,IAAM1xB,EAAIzD,KAAKi1B,GAAGxzB,EACZtC,EAAIa,KAAKk1B,GAAGzzB,EACZ4P,EAAIrR,KAAKi1B,GAAG5yB,EACZnD,EAAIc,KAAKk1B,GAAG7yB,EACd+yB,EAAM3xB,EAAIvE,EAAIC,EAAIkS,EACV,IAAR+jB,IACFA,EAAM,EAAMA,GAEd,IAAMC,EAAM,IAAIL,EAKhB,OAJAK,EAAIJ,GAAGxzB,EAAI2zB,EAAMl2B,EACjBm2B,EAAIH,GAAGzzB,GAAK2zB,EAAMj2B,EAClBk2B,EAAIJ,GAAG5yB,GAAK+yB,EAAM/jB,EAClBgkB,EAAIH,GAAG7yB,EAAI+yB,EAAM3xB,EACV4xB,GAOTL,EAAKv1B,UAAA6nB,MAAL,SAAMzkB,GAEJ,IAAMY,EAAIzD,KAAKi1B,GAAGxzB,EACZtC,EAAIa,KAAKk1B,GAAGzzB,EACZ4P,EAAIrR,KAAKi1B,GAAG5yB,EACZnD,EAAIc,KAAKk1B,GAAG7yB,EACd+yB,EAAM3xB,EAAIvE,EAAIC,EAAIkS,EACV,IAAR+jB,IACFA,EAAM,EAAMA,GAEd,IAAM1xB,EAAItB,EAAKM,OAGf,OAFAgB,EAAEjC,EAAI2zB,GAAOl2B,EAAI2D,EAAEpB,EAAItC,EAAI0D,EAAER,GAC7BqB,EAAErB,EAAI+yB,GAAO3xB,EAAIZ,EAAER,EAAIgP,EAAIxO,EAAEpB,GACtBiC,GAUFsxB,EAAA3wB,IAAP,SAAWixB,EAAIzyB,GACb,GAAIA,GAAK,MAAOA,GAAK,MAAOA,EAAG,CAE7B,IAAMpB,EAAI6zB,EAAGL,GAAGxzB,EAAIoB,EAAEpB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAER,EAChCA,EAAIizB,EAAGL,GAAG5yB,EAAIQ,EAAEpB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAER,EACtC,OAAOD,EAAKO,IAAIlB,EAAGY,GAEd,GAAIQ,GAAK,OAAQA,GAAK,OAAQA,EAOnC,OAAO,IAAImyB,EAJDM,EAAGL,GAAGxzB,EAAIoB,EAAEoyB,GAAGxzB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAEoyB,GAAG5yB,EAClCizB,EAAGL,GAAGxzB,EAAIoB,EAAEqyB,GAAGzzB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAEqyB,GAAG7yB,EAClCizB,EAAGL,GAAG5yB,EAAIQ,EAAEoyB,GAAGxzB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAEoyB,GAAG5yB,EAClCizB,EAAGL,GAAG5yB,EAAIQ,EAAEqyB,GAAGzzB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAEqyB,GAAG7yB,IAOzC2yB,EAAA9gB,QAAP,SAAeohB,EAAWzyB,GAExB,IAAMpB,EAAI6zB,EAAGL,GAAGxzB,EAAIoB,EAAEpB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAER,EAChCA,EAAIizB,EAAGL,GAAG5yB,EAAIQ,EAAEpB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAER,EACtC,OAAOD,EAAKO,IAAIlB,EAAGY,IAGd2yB,EAAAO,SAAP,SAAgBD,EAAWzyB,GAOzB,OAAO,IAAImyB,EAJDM,EAAGL,GAAGxzB,EAAIoB,EAAEoyB,GAAGxzB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAEoyB,GAAG5yB,EAClCizB,EAAGL,GAAGxzB,EAAIoB,EAAEqyB,GAAGzzB,EAAI6zB,EAAGJ,GAAGzzB,EAAIoB,EAAEqyB,GAAG7yB,EAClCizB,EAAGL,GAAG5yB,EAAIQ,EAAEoyB,GAAGxzB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAEoyB,GAAG5yB,EAClCizB,EAAGL,GAAG5yB,EAAIQ,EAAEqyB,GAAGzzB,EAAI6zB,EAAGJ,GAAG7yB,EAAIQ,EAAEqyB,GAAG7yB,IAYvC2yB,EAAA5gB,KAAP,SAAYkhB,EAAIzyB,GACd,OAAIA,GAAK,MAAOA,GAAK,MAAOA,EAEnBT,EAAKO,IAAIP,EAAK8C,IAAIrC,EAAGyyB,EAAGL,IAAK7yB,EAAK8C,IAAIrC,EAAGyyB,EAAGJ,KAE1CryB,GAAK,OAAQA,GAAK,OAAQA,EAI5B,IAAImyB,EAFA5yB,EAAKO,IAAIP,EAAK8C,IAAIowB,EAAGL,GAAIpyB,EAAEoyB,IAAK7yB,EAAK8C,IAAIowB,EAAGJ,GAAIryB,EAAEoyB,KAClD7yB,EAAKO,IAAIP,EAAK8C,IAAIowB,EAAGL,GAAIpyB,EAAEqyB,IAAK9yB,EAAK8C,IAAIowB,EAAGJ,GAAIryB,EAAEqyB,WAHxD,GAUFF,EAAA1gB,SAAP,SAAgBghB,EAAWzyB,GAGzB,OAAOT,EAAKO,IAAIP,EAAK8C,IAAIrC,EAAGyyB,EAAGL,IAAK7yB,EAAK8C,IAAIrC,EAAGyyB,EAAGJ,MAG9CF,EAAAQ,UAAP,SAAiBF,EAAWzyB,GAK1B,OAAO,IAAImyB,EAFA5yB,EAAKO,IAAIP,EAAK8C,IAAIowB,EAAGL,GAAIpyB,EAAEoyB,IAAK7yB,EAAK8C,IAAIowB,EAAGJ,GAAIryB,EAAEoyB,KAClD7yB,EAAKO,IAAIP,EAAK8C,IAAIowB,EAAGL,GAAIpyB,EAAEqyB,IAAK9yB,EAAK8C,IAAIowB,EAAGJ,GAAIryB,EAAEqyB,OAIxDF,EAAGlvB,IAAV,SAAWwvB,GAET,OAAO,IAAIN,EAAM5yB,EAAK0D,IAAIwvB,EAAGL,IAAK7yB,EAAK0D,IAAIwvB,EAAGJ,MAGzCF,EAAAnxB,IAAP,SAAW4xB,EAAYC,GAGrB,OAAO,IAAIV,EAAM5yB,EAAKyB,IAAI4xB,EAAIR,GAAIS,EAAIT,IAAK7yB,EAAKyB,IAAI4xB,EAAIP,GAAIQ,EAAIR,MAEnEF,KC3MAvJ,EAAAoJ,kBAAA,GAJWA,EAAAA,iBAAAA,EAAAA,aAIX,KAHCA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UAMDpJ,EAAAqJ,wBAAA,GAHWA,EAAAA,uBAAAA,EAAAA,mBAGX,KAFCA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,OAAA,GAAA,SAeDrJ,EAAAsJ,gBAAA,GATYA,GAAAA,eAAAA,EAAAA,WASZ,KAPCA,GAAA,UAAA,GAAA,YAEAA,GAAAA,GAAA,SAAA,GAAA,WAEAA,GAAAA,GAAA,aAAA,GAAA,eAEAA,GAAAA,GAAA,YAAA,GAAA,cAMD,IAAAY,GAAA,WAAA,SAAAA,IACC31B,KAAA6C,EAAUT,EAAKM,OACf1C,KAAA8L,GAAgB,IAAI8pB,GAMtB,OAJED,EAAGl2B,UAAA2D,IAAH,SAAIF,GACFlD,KAAK6C,EAAES,QAAQJ,EAAEL,GACjB7C,KAAK8L,GAAG1I,IAAIF,EAAE4I,KAEjB6pB,KA0BDE,GAAA,WAAA,SAAAA,IAEE71B,KAAA81B,YAAoB1zB,EAAKM,OACzB1C,KAAAmhB,WAAmB/e,EAAKM,OACxB1C,KAAM+1B,OAAoB,CAAE,IAAIC,GAAiB,IAAIA,IACrDh2B,KAAUi2B,WAAW,EAmFvB,OA5EEJ,EAAgBp2B,UAAAy2B,iBAAhB,SAAiBC,EAA+B1P,EAAgB2P,EAAiB1P,EAAgB2P,GAC/F,GAAuB,GAAnBr2B,KAAKi2B,WAAT,CAMA,IAAIxtB,GAFJ0tB,EAAKA,GAAM,IAAIG,IAEC7tB,OACVstB,EAASI,EAAGJ,OACZQ,EAAcJ,EAAGI,YAGvB,OAAQv2B,KAAKmc,MACX,KAAK0Y,EAAAA,aAAa2B,UAChB/tB,EAASrG,EAAKO,IAAI,EAAK,GACvB,IAAMsjB,EAAS1R,EAAUL,QAAQuS,EAAKzmB,KAAKmhB,YACrC+E,EAAS3R,EAAUL,QAAQwS,EAAK1mB,KAAK+1B,OAAO,GAAG5U,YAC/CsV,EAAOr0B,EAAKgC,IAAI8hB,EAAQD,GAC1B7jB,EAAKoC,cAAciyB,GAAQn1B,EAAKC,QAAUD,EAAKC,UACjDkH,EAAOnF,QAAQmzB,GACfhuB,EAAOhE,aAET,IAAMiyB,EAAKzQ,EAAOrjB,QAAQoB,OAAOoyB,EAAS3tB,GACpCkuB,EAAKzQ,EAAOtjB,QAAQoB,QAAQqyB,EAAS5tB,GAC3CstB,EAAO,GAAK3zB,EAAK2D,IAAI2wB,EAAIC,GACzBJ,EAAY,GAAKn0B,EAAK8C,IAAI9C,EAAKgC,IAAIuyB,EAAID,GAAKjuB,GAC5CstB,EAAOr1B,OAAS,EAChB61B,EAAY71B,OAAS,EACrB,MAGF,KAAKm0B,EAAAA,aAAa1G,QAChB1lB,EAAS0K,EAAIe,QAAQuS,EAAI/R,EAAG1U,KAAK81B,aAGjC,IAFA,IAAMc,EAAariB,EAAUL,QAAQuS,EAAKzmB,KAAKmhB,YAEtC5gB,EAAI,EAAGA,EAAIP,KAAKi2B,aAAc11B,EAAG,CACxC,IAAMs2B,EAAYtiB,EAAUL,QAAQwS,EAAK1mB,KAAK+1B,OAAOx1B,GAAG4gB,YAClDuV,EAAKt0B,EAAKQ,MAAMi0B,GAAW7yB,OAAOoyB,EAAUh0B,EAAK8C,IAAI9C,EAAKgC,IAAIyyB,EAAWD,GAAanuB,GAASA,GAC/FkuB,EAAKv0B,EAAKQ,MAAMi0B,GAAW1yB,OAAOkyB,EAAS5tB,GACjDstB,EAAOx1B,GAAK6B,EAAK2D,IAAI2wB,EAAIC,GACzBJ,EAAYh2B,GAAK6B,EAAK8C,IAAI9C,EAAKgC,IAAIuyB,EAAID,GAAKjuB,GAE9CstB,EAAOr1B,OAASV,KAAKi2B,WACrBM,EAAY71B,OAASV,KAAKi2B,WAC1B,MAGF,KAAKpB,EAAAA,aAAa7G,QAChBvlB,EAAS0K,EAAIe,QAAQwS,EAAIhS,EAAG1U,KAAK81B,aAGjC,IAFMc,EAAariB,EAAUL,QAAQwS,EAAK1mB,KAAKmhB,YAEtC5gB,EAAI,EAAGA,EAAIP,KAAKi2B,aAAc11B,EAAG,CAClCs2B,EAAYtiB,EAAUL,QAAQuS,EAAKzmB,KAAK+1B,OAAOx1B,GAAG4gB,YAClDwV,EAAKv0B,EAAKsD,QAAQ,EAAGmxB,EAAWR,EAAUj0B,EAAK8C,IAAI9C,EAAKgC,IAAIyyB,EAAWD,GAAanuB,GAASA,GAC7FiuB,EAAKt0B,EAAKsD,QAAQ,EAAGmxB,GAAYT,EAAS3tB,GAChDstB,EAAOx1B,GAAK6B,EAAK2D,IAAI2wB,EAAIC,GACzBJ,EAAYh2B,GAAK6B,EAAK8C,IAAI9C,EAAKgC,IAAIsyB,EAAIC,GAAKluB,GAE9CstB,EAAOr1B,OAASV,KAAKi2B,WACrBM,EAAY71B,OAASV,KAAKi2B,WAE1BxtB,EAAOpE,KAAK,GAQhB,OAHA8xB,EAAG1tB,OAASA,EACZ0tB,EAAGJ,OAASA,EACZI,EAAGI,YAAcA,EACVJ,IAGFN,EAAiBiB,kBAAGA,GACpBjB,EAAUF,WAAGA,GACbE,EAAckB,eAAGA,GACjBlB,EAAUd,WAAGA,aACrBc,KAWDG,GAAA,WAOEh2B,KAAAmhB,WAAmB/e,EAAKM,OAIxB1C,KAAayvB,cAAW,EAIxBzvB,KAAc0vB,eAAW,EAIzB1vB,KAAA8L,GAAgB,IAAI8pB,IAMtBA,GAAA,WAAA,SAAAA,IACE51B,KAAAg3B,GAAqB,IAAIC,GAa3B,OARE73B,OAAA8J,eAAI0sB,EAAGn2B,UAAA,MAAA,CAAP6J,IAAA,WACE,OAAOtJ,KAAKg3B,GAAG3Q,OAA0B,EAAjBrmB,KAAKg3B,GAAG1Q,OAA6B,GAAhBtmB,KAAKg3B,GAAGE,MAA6B,GAAhBl3B,KAAKg3B,GAAGG,uCAG5EvB,EAAGn2B,UAAA2D,IAAH,SAAIF,GAEFlD,KAAKg3B,GAAG5zB,IAAIF,EAAE8zB,KAEjBpB,KAKDqB,GAAA,WAAA,SAAAA,KAuBA,OANEA,EAAGx3B,UAAA2D,IAAH,SAAIF,GACFlD,KAAKqmB,OAASnjB,EAAEmjB,OAChBrmB,KAAKsmB,OAASpjB,EAAEojB,OAChBtmB,KAAKk3B,MAAQh0B,EAAEg0B,MACfl3B,KAAKm3B,MAAQj0B,EAAEi0B,OAElBF,KAKDX,GAAA,WAQEt2B,KAAA+1B,OAAiB,GAIjB/1B,KAAAu2B,YAAwB,IAQpB,SAAUQ,GACdK,EACAC,EACAC,EACAC,GAUA,IAAK,IAAIh3B,EAAI,EAAGA,EAAI+2B,EAAUrB,aAAc11B,EAAG,CAC7C,IAAMuL,EAAKwrB,EAAUvB,OAAOx1B,GAAGuL,GAE/BsrB,EAAO72B,GAAKw0B,EAAUA,WAACyC,YAEvB,IAAK,IAAI/mB,EAAI,EAAGA,EAAI8mB,EAAUtB,aAAcxlB,EAC1C,GAAI8mB,EAAUxB,OAAOtlB,GAAG3E,GAAG9K,KAAO8K,EAAG9K,IAAK,CACxCo2B,EAAO72B,GAAKw0B,EAAUA,WAAC0C,aACvB,OAMN,IAASl3B,EAAI,EAAGA,EAAIg3B,EAAUtB,aAAc11B,EAAG,CACvCuL,EAAKyrB,EAAUxB,OAAOx1B,GAAGuL,GAE/BurB,EAAO92B,GAAKw0B,EAAUA,WAAC2C,SAEvB,IAASjnB,EAAI,EAAGA,EAAI6mB,EAAUrB,aAAcxlB,EAC1C,GAAI6mB,EAAUvB,OAAOtlB,GAAG3E,GAAG9K,KAAO8K,EAAG9K,IAAK,CACxCq2B,EAAO92B,GAAKw0B,EAAUA,WAAC0C,aACvB,QASF,SAAUX,GACda,EACAC,EACAnvB,EACAovB,EACAC,GAGA,IAAIC,EAAS,EAGPC,EAAY51B,EAAK8C,IAAIuD,EAAQmvB,EAAI,GAAG/0B,GAAKg1B,EACzCI,EAAY71B,EAAK8C,IAAIuD,EAAQmvB,EAAI,GAAG/0B,GAAKg1B,EAS/C,GANIG,GAAa,GACfL,EAAKI,KAAU30B,IAAIw0B,EAAI,IACrBK,GAAa,GACfN,EAAKI,KAAU30B,IAAIw0B,EAAI,IAGrBI,EAAYC,EAAY,EAAK,CAE/B,IAAMC,EAASF,GAAaA,EAAYC,GACxCN,EAAKI,GAAQl1B,EAAEc,WAAW,EAAIu0B,EAAQN,EAAI,GAAG/0B,EAAGq1B,EAAQN,EAAI,GAAG/0B,GAG/D80B,EAAKI,GAAQjsB,GAAGkrB,GAAG3Q,OAASyR,EAC5BH,EAAKI,GAAQjsB,GAAGkrB,GAAG1Q,OAASsR,EAAI,GAAG9rB,GAAGkrB,GAAG1Q,OACzCqR,EAAKI,GAAQjsB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SAC9CR,EAAKI,GAAQjsB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACsD,SAC5CL,EAGJ,OAAOA,ECnTT,IAAAM,GAKE,SAAYjd,GACVpb,KAAKob,QAAUA,GA6BH,SAAAkd,GAAYC,EAAmBC,GAC7C,OAAOl3B,EAAKqD,KAAK4zB,EAAYC,GAOf,SAAAC,GAAeC,EAAsBC,GACnD,OAAOD,EAAeC,EAAeD,EAAeC,EAItD,IAAMC,GAAc,GAGpBC,GAAA,WACE74B,KAAAkoB,GAAW9lB,EAAKM,OAChB1C,KAAAmoB,GAAW/lB,EAAKM,OAChB1C,KAAayvB,cAAW,EACxBzvB,KAAc0vB,eAAW,EACzB1vB,KAAU84B,WAAW,EACrB94B,KAAW+4B,YAAW,EACtB/4B,KAAYg5B,aAAW,GAQzBC,GAAA,WA4EE,SAAYA,EAAAvF,EAAarN,EAAgBsN,EAAarN,EAAgB4S,GA5DtEl5B,KAAAm5B,WAAuB,IAAItD,GAE3B71B,KAAM4e,OAAmB,KAEzB5e,KAAM8X,OAAmB,KAEzB9X,KAAK+yB,MAAW,EAEhB/yB,KAAU8yB,WAAW,EAErB9yB,KAASyd,WAAY,EAMrBzd,KAAco5B,eAAW,EAEzBp5B,KAAaq5B,eAAY,EAEzBr5B,KAAYwd,cAAY,EAExBxd,KAAcs5B,gBAAY,EAE1Bt5B,KAAYu5B,cAAY,EAExBv5B,KAAew5B,iBAAY,EAG3Bx5B,KAAA40B,UAA4B,IAAIvF,EAAervB,MAG9BA,KAAQwvB,SAA8B,GACtCxvB,KAAQy5B,SAASr3B,EAAKM,OACtB1C,KAAY05B,aAAU,IAAI1E,GAC1Bh1B,KAAG25B,IAAU,IAAI3E,GAWjBh1B,KAAa45B,cAAW,GACxB55B,KAAa65B,cAASz3B,EAAKM,OAC3B1C,KAAY85B,aAAS13B,EAAKM,OAC1B1C,KAAc+5B,eAAS33B,EAAKM,OAC5B1C,KAAcg6B,eAAS53B,EAAKM,OAY3C1C,KAAKi6B,QAAU,IAAI5B,GAAYr4B,MAC/BA,KAAKk6B,QAAU,IAAI7B,GAAYr4B,MAE/BA,KAAK2wB,WAAa+C,EAClB1zB,KAAK6wB,WAAa8C,EAElB3zB,KAAKm6B,SAAW9T,EAChBrmB,KAAKo6B,SAAW9T,EAEhBtmB,KAAKq6B,cAAgBnB,EAErBl5B,KAAKsX,WAAaghB,GAAYt4B,KAAK2wB,WAAWrZ,WAAYtX,KAAK6wB,WAAWvZ,YAC1EtX,KAAKuX,cAAgBkhB,GAAez4B,KAAK2wB,WAAWpZ,cAAevX,KAAK6wB,WAAWtZ,eA6hCvF,OA1hCE0hB,EAAcx5B,UAAA0xB,eAAd,SAAed,GACb,IAAMhV,EAAWrb,KAAK2wB,WAChBpV,EAAWvb,KAAK6wB,WAEhB9F,EAAS1P,EAASvC,WAClBkS,EAASzP,EAASzC,WAElB+K,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAEjBkiB,EAAWt6B,KAAKu6B,cAEhBtE,EAAaqE,EAASrE,WAG5Bj2B,KAAKw6B,WAAa3W,EAAMlG,UACxB3d,KAAKy6B,WAAa3W,EAAMnG,UACxB3d,KAAK06B,QAAU7W,EAAMhG,OACrB7d,KAAK26B,QAAU7W,EAAMjG,OAErB7d,KAAK46B,WAAa56B,KAAKsX,WACvBtX,KAAK66B,cAAgB76B,KAAKuX,cAC1BvX,KAAK86B,eAAiB96B,KAAKo5B,eAE3Bp5B,KAAK+6B,aAAe9E,EAEpBj2B,KAAK25B,IAAIx2B,UACTnD,KAAK05B,aAAav2B,UAElBnD,KAAKg7B,WAAanX,EAAMlG,UACxB3d,KAAKi7B,WAAanX,EAAMnG,UACxB3d,KAAKk7B,QAAUrX,EAAMhG,OACrB7d,KAAKm7B,QAAUrX,EAAMjG,OACrB7d,KAAK+5B,eAAiB33B,EAAKQ,MAAMihB,EAAM/F,QAAQxI,aAC/CtV,KAAKg6B,eAAiB53B,EAAKQ,MAAMkhB,EAAMhG,QAAQxI,aAE/CtV,KAAKo7B,UAAYrQ,EAAO1U,SACxBrW,KAAKq7B,UAAYrQ,EAAO3U,SAExBrW,KAAKs7B,OAAShB,EAASne,KACvBnc,KAAK65B,cAAgBz3B,EAAKQ,MAAM03B,EAASxE,aACzC91B,KAAK85B,aAAe13B,EAAKQ,MAAM03B,EAASnZ,YACxCnhB,KAAKu7B,aAAetF,EAEpB,IAAK,IAAIxlB,EAAI,EAAGA,EAAIwlB,IAAcxlB,EAAG,CACnC,IAAM+qB,EAAKlB,EAASvE,OAAOtlB,GACrBgrB,EAAMz7B,KAAKwvB,SAAS/e,GAAK,IAAIooB,GAE/BxI,EAAKtB,cACP0M,EAAIhM,cAAgBY,EAAKnB,QAAUsM,EAAG/L,cACtCgM,EAAI/L,eAAiBW,EAAKnB,QAAUsM,EAAG9L,iBAGvC+L,EAAIhM,cAAgB,EACpBgM,EAAI/L,eAAiB,GAGvB+L,EAAIvT,GAAG/kB,UACPs4B,EAAItT,GAAGhlB,UACPs4B,EAAI3C,WAAa,EACjB2C,EAAI1C,YAAc,EAClB0C,EAAIzC,aAAe,EAEnBh5B,KAAK45B,cAAcnpB,GAAKrO,EAAKQ,MAAM44B,EAAGra,cAS1C8X,EAAAx5B,UAAA86B,YAAA,WACE,OAAOv6B,KAAKm5B,YAMdF,EAAgBx5B,UAAAy2B,iBAAhB,SAAiBwF,GACf,IAAM7X,EAAQ7jB,KAAK2wB,WAAWvY,UACxB0L,EAAQ9jB,KAAK6wB,WAAWzY,UACxB2S,EAAS/qB,KAAK2wB,WAAW7X,WACzBkS,EAAShrB,KAAK6wB,WAAW/X,WAE/B,OAAO9Y,KAAKm5B,WAAWjD,iBAAiBwF,EAAe7X,EAAMlO,eAC3DoV,EAAO1U,SAAUyN,EAAMnO,eAAgBqV,EAAO3U,WAQlD4iB,EAAUx5B,UAAA60B,WAAV,SAAWpU,GACTlgB,KAAKq5B,gBAAkBnZ,GAMzB+Y,EAAAx5B,UAAA+wB,UAAA,WACE,OAAOxwB,KAAKq5B,eAMdJ,EAAAx5B,UAAAgxB,WAAA,WACE,OAAOzwB,KAAKs5B,gBAMdL,EAAAx5B,UAAA0Z,QAAA,WACE,OAAOnZ,KAAK8X,QAMdmhB,EAAAx5B,UAAA6b,YAAA,WACE,OAAOtb,KAAK2wB,YAMdsI,EAAAx5B,UAAA+b,YAAA,WACE,OAAOxb,KAAK6wB,YAMdoI,EAAAx5B,UAAA+zB,eAAA,WACE,OAAOxzB,KAAKm6B,UAMdlB,EAAAx5B,UAAAg0B,eAAA,WACE,OAAOzzB,KAAKo6B,UAMdnB,EAAAx5B,UAAAgc,iBAAA,WACEzb,KAAKu5B,cAAe,GAOtBN,EAAWx5B,UAAA8Z,YAAX,SAAYhD,GACVvW,KAAKsX,WAAaf,GAMpB0iB,EAAAx5B,UAAA6Z,YAAA,WACE,OAAOtZ,KAAKsX,YAMd2hB,EAAAx5B,UAAAk8B,cAAA,WACE37B,KAAKsX,WAAaghB,GAAYt4B,KAAK2wB,WAAWrZ,WAC5CtX,KAAK6wB,WAAWvZ,aAOpB2hB,EAAcx5B,UAAAga,eAAd,SAAejD,GACbxW,KAAKuX,cAAgBf,GAMvByiB,EAAAx5B,UAAA+Z,eAAA,WACE,OAAOxZ,KAAKuX,eAMd0hB,EAAAx5B,UAAAm8B,iBAAA,WACE57B,KAAKuX,cAAgBkhB,GAAez4B,KAAK2wB,WAAWpZ,cAClDvX,KAAK6wB,WAAWtZ,gBAOpB0hB,EAAex5B,UAAAo8B,gBAAf,SAAgBC,GACd97B,KAAKo5B,eAAiB0C,GAMxB7C,EAAAx5B,UAAAs8B,gBAAA,WACE,OAAO/7B,KAAKo5B,gBAMdH,EAAAx5B,UAAAytB,SAAA,SAASoN,EAAoB7T,EAAgBC,GAC3C1mB,KAAKq6B,cAAcC,EAAU7T,EAAKzmB,KAAK2wB,WAAY3wB,KAAKm6B,SAAUzT,EAChE1mB,KAAK6wB,WAAY7wB,KAAKo6B,WAY1BnB,EAAMx5B,UAAAu0B,OAAN,SAAOgI,GAOLh8B,KAAKq5B,eAAgB,EAErB,IAYI4C,EAZAC,GAAW,EACTC,EAAcn8B,KAAKs5B,eAEnB5I,EAAU1wB,KAAK2wB,WAAWja,WAC1Bka,EAAU5wB,KAAK6wB,WAAWna,WAC1BsC,EAAS0X,GAAWE,EAEpB/M,EAAQ7jB,KAAK2wB,WAAWvY,UACxB0L,EAAQ9jB,KAAK6wB,WAAWzY,UACxBqO,EAAM5C,EAAMlO,eACZ+Q,EAAM5C,EAAMnO,eAKlB,GAAIqD,EAAQ,CACV,IAAM+R,EAAS/qB,KAAK2wB,WAAW7X,WACzBkS,EAAShrB,KAAK6wB,WAAW/X,WAC/BojB,EAAWx0B,EAAYqjB,EAAQ/qB,KAAKm6B,SAAUnP,EAAQhrB,KAAKo6B,SAAU3T,EAAKC,GAG1E1mB,KAAKm5B,WAAWlD,WAAa,MACxB,CAGLgG,EAAcj8B,KAAKm5B,WACnBn5B,KAAKm5B,WAAa,IAAItD,GAEtB71B,KAAKktB,SAASltB,KAAKm5B,WAAY1S,EAAKC,GACpCwV,EAAWl8B,KAAKm5B,WAAWlD,WAAa,EAIxC,IAAK,IAAI11B,EAAI,EAAGA,EAAIP,KAAKm5B,WAAWlD,aAAc11B,EAAG,CACnD,IAAM67B,EAAMp8B,KAAKm5B,WAAWpD,OAAOx1B,GACnC67B,EAAI3M,cAAgB,EACpB2M,EAAI1M,eAAiB,EAErB,IAAK,IAAIjf,EAAI,EAAGA,EAAIwrB,EAAYhG,aAAcxlB,EAAG,CAC/C,IAAM4rB,EAAMJ,EAAYlG,OAAOtlB,GAC/B,GAAI4rB,EAAIvwB,GAAG9K,KAAOo7B,EAAItwB,GAAG9K,IAAK,CAC5Bo7B,EAAI3M,cAAgB4M,EAAI5M,cACxB2M,EAAI1M,eAAiB2M,EAAI3M,eACzB,QAKFwM,GAAYC,IACdtY,EAAM5K,UAAS,GACf6K,EAAM7K,UAAS,IAInBjZ,KAAKs5B,eAAiB4C,GAEjBC,GAAeD,GAAYF,GAC9BA,EAASM,aAAat8B,MAGpBm8B,IAAgBD,GAAYF,GAC9BA,EAASO,WAAWv8B,OAGjBgZ,GAAUkjB,GAAYF,GACzBA,EAASQ,SAASx8B,KAAMi8B,IAI5BhD,EAAuBx5B,UAAAwyB,wBAAvB,SAAwB5B,GACtB,OAAOrwB,KAAKy8B,yBAAyBpM,IAGvC4I,EAAAx5B,UAAAi1B,2BAAA,SAA2BrE,EAAgBmE,EAAYC,GACrD,OAAOz0B,KAAKy8B,yBAAyBpM,EAAMmE,EAAMC,IAG3CwE,EAAAx5B,UAAAg9B,yBAAR,SAAiCpM,EAAgBmE,EAAaC,GAC5D,IAAMiI,IAAiBlI,KAAUC,EAE3BpZ,EAAWrb,KAAK2wB,WAChBpV,EAAWvb,KAAK6wB,WAEhBhN,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAELyL,EAAM9F,WACN+F,EAAM/F,WACxB,IAAM4e,EAAY9Y,EAAM7F,WAClB4e,EAAY9Y,EAAM9F,WAElB6e,EAAez6B,EAAKQ,MAAM5C,KAAK+5B,gBAC/B+C,EAAe16B,EAAKQ,MAAM5C,KAAKg6B,gBAEjC+C,EAAK,EACLpuB,EAAK,EACJ+tB,GAAQ7Y,GAAS2Q,GAAQ3Q,GAAS4Q,IACrCsI,EAAK/8B,KAAKg7B,WACVrsB,EAAK3O,KAAKk7B,SAGZ,IAAI8B,EAAK,EACLC,EAAK,EACJP,GAAQ5Y,GAAS0Q,GAAQ1Q,GAAS2Q,IACrCuI,EAAKh9B,KAAKi7B,WACVgC,EAAKj9B,KAAKm7B,SAYZ,IATA,IAAMzE,EAAKt0B,EAAKQ,MAAM+5B,EAAUtrB,GAC5B6rB,EAAKP,EAAUl5B,EAEbkzB,EAAKv0B,EAAKQ,MAAMg6B,EAAUvrB,GAC5B8rB,EAAKP,EAAUn5B,EAEfsuB,EAAgB,EAGXthB,EAAI,EAAGA,EAAIzQ,KAAKu7B,eAAgB9qB,EAAG,CAC1C,IAAMgW,EAAMlS,EAAUd,WAChBiT,EAAMnS,EAAUd,WACtBgT,EAAI/R,EAAErB,SAAS6pB,GACfxW,EAAIhS,EAAErB,SAAS8pB,GACf1W,EAAIjnB,EAAI4C,EAAKgC,IAAIsyB,EAAIvjB,EAAIe,QAAQuS,EAAI/R,EAAGmoB,IACxCnW,EAAIlnB,EAAI4C,EAAKgC,IAAIuyB,EAAIxjB,EAAIe,QAAQwS,EAAIhS,EAAGooB,IAGxC,IAAIr0B,SACA2Z,SACA4P,SACJ,OAAQhyB,KAAKs7B,QACX,KAAKzG,EAAAA,aAAa2B,UAChB,IAAMvQ,EAAS1R,EAAUL,QAAQuS,EAAKzmB,KAAK85B,cACrC5T,EAAS3R,EAAUL,QAAQwS,EAAK1mB,KAAK45B,cAAc,KACzDnxB,EAASrG,EAAKgC,IAAI8hB,EAAQD,IACnBxhB,YACP2d,EAAQhgB,EAAKsD,QAAQ,GAAKugB,EAAQ,GAAKC,GACvC8L,EAAa5vB,EAAK8C,IAAI9C,EAAKgC,IAAI8hB,EAAQD,GAASxd,GAAUzI,KAAKo7B,UAAYp7B,KAAKq7B,UAChF,MAGF,KAAKxG,EAAAA,aAAa1G,QAChB1lB,EAAS0K,EAAIe,QAAQuS,EAAI/R,EAAG1U,KAAK65B,eACjC,IAAMjD,EAAariB,EAAUL,QAAQuS,EAAKzmB,KAAK85B,cACzCjD,EAAYtiB,EAAUL,QAAQwS,EAAK1mB,KAAK45B,cAAcnpB,IAC5DuhB,EAAa5vB,EAAK8C,IAAI9C,EAAKgC,IAAIyyB,EAAWD,GAAanuB,GAAUzI,KAAKo7B,UAAYp7B,KAAKq7B,UACvFjZ,EAAQyU,EACR,MAGF,KAAKhC,EAAAA,aAAa7G,QAChBvlB,EAAS0K,EAAIe,QAAQwS,EAAIhS,EAAG1U,KAAK65B,eAC3BjD,EAAariB,EAAUL,QAAQwS,EAAK1mB,KAAK85B,cACzCjD,EAAYtiB,EAAUL,QAAQuS,EAAKzmB,KAAK45B,cAAcnpB,IAC5DuhB,EAAa5vB,EAAK8C,IAAI9C,EAAKgC,IAAIyyB,EAAWD,GAAanuB,GAAUzI,KAAKo7B,UAAYp7B,KAAKq7B,UACvFjZ,EAAQyU,EAGRpuB,EAAOpE,KAAK,GAKhB,IAAM6jB,EAAK9lB,EAAKgC,IAAIge,EAAOsU,GACrBvO,EAAK/lB,EAAKgC,IAAIge,EAAOuU,GAG3B5E,EAAgBzwB,EAAKU,IAAI+vB,EAAeC,GAExC,IAAMznB,EAAYmyB,EAAMzzB,EAASuB,YAAcvB,EAASsB,UAClDpB,EAAaF,EAASE,WACtBkB,EAAsBpB,EAASoB,oBAG/ByE,EAAIxN,EAAKY,MAAMqI,GAAaynB,EAAa7oB,IAAckB,EAAqB,GAG5E+yB,EAAMh7B,EAAKgD,cAAc8iB,EAAIzf,GAC7B40B,EAAMj7B,EAAKgD,cAAc+iB,EAAI1f,GAC7B60B,EAAIP,EAAKC,EAAKruB,EAAKyuB,EAAMA,EAAMH,EAAKI,EAAMA,EAG1C3a,EAAU4a,EAAI,GAAOxuB,EAAIwuB,EAAI,EAE7BC,EAAIn7B,EAAKuD,WAAW+c,EAASja,GAEnCiuB,EAAGvyB,OAAO44B,EAAIQ,GACdL,GAAMvuB,EAAKvM,EAAKgD,cAAc8iB,EAAIqV,GAElC5G,EAAG3yB,OAAOg5B,EAAIO,GACdJ,GAAMF,EAAK76B,EAAKgD,cAAc+iB,EAAIoV,GASpC,OANAZ,EAAUtrB,EAAE/N,QAAQozB,GACpBiG,EAAUl5B,EAAIy5B,EAEdN,EAAUvrB,EAAE/N,QAAQqzB,GACpBiG,EAAUn5B,EAAI05B,EAEPpL,GAGTkH,EAAsBx5B,UAAA2xB,uBAAtB,SAAuBf,GACrB,IAAMhV,EAAWrb,KAAK2wB,WAChBpV,EAAWvb,KAAK6wB,WAEhBhN,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAEjBolB,EAAY3Z,EAAM9F,WAClB0f,EAAY3Z,EAAM/F,WAElB4e,EAAY9Y,EAAM7F,WAClB4e,EAAY9Y,EAAM9F,WAElBoY,EAAUp2B,KAAKo7B,UACf/E,EAAUr2B,KAAKq7B,UACff,EAAWt6B,KAAKu6B,cAEhBwC,EAAK/8B,KAAKw6B,WACVwC,EAAKh9B,KAAKy6B,WACV9rB,EAAK3O,KAAK06B,QACVuC,EAAKj9B,KAAK26B,QACVkC,EAAez6B,EAAKQ,MAAM5C,KAAK+5B,gBAC/B+C,EAAe16B,EAAKQ,MAAM5C,KAAKg6B,gBAE/BtD,EAAKt0B,EAAKQ,MAAM+5B,EAAUtrB,GAC1B6rB,EAAKP,EAAUl5B,EACfi6B,EAAKt7B,EAAKQ,MAAM46B,EAAU36B,GAC1B8kB,EAAK6V,EAAU95B,EAEfizB,EAAKv0B,EAAKQ,MAAMg6B,EAAUvrB,GAC1B8rB,EAAKP,EAAUn5B,EACfk6B,EAAKv7B,EAAKQ,MAAM66B,EAAU56B,GAC1BglB,EAAK4V,EAAU/5B,EAIf+iB,EAAMlS,EAAUd,WAChBiT,EAAMnS,EAAUd,WACtBgT,EAAI/R,EAAErB,SAAS6pB,GACfxW,EAAIhS,EAAErB,SAAS8pB,GACf1W,EAAIjnB,EAAEmE,WAAW,EAAG+yB,GAAK,EAAGvjB,EAAIe,QAAQuS,EAAI/R,EAAGmoB,IAC/CnW,EAAIlnB,EAAEmE,WAAW,EAAGgzB,GAAK,EAAGxjB,EAAIe,QAAQwS,EAAIhS,EAAGooB,IAE/C,IAAMpB,EAAgBpB,EAASpE,iBAAiB,KAAMzP,EAAK2P,EAAS1P,EAAK2P,GAEzEr2B,KAAKy5B,SAASn2B,QAAQo4B,EAAcjzB,QAEpC,IAAK,IAAIgI,EAAI,EAAGA,EAAIzQ,KAAK+6B,eAAgBtqB,EAAG,CAC1C,IAAMgrB,EAAMz7B,KAAKwvB,SAAS/e,GAE1BgrB,EAAIvT,GAAG5kB,QAAQlB,EAAKgC,IAAIs3B,EAAc3F,OAAOtlB,GAAIimB,IACjD+E,EAAItT,GAAG7kB,QAAQlB,EAAKgC,IAAIs3B,EAAc3F,OAAOtlB,GAAIkmB,IAEjD,IAAMyG,EAAMh7B,EAAKgD,cAAcq2B,EAAIvT,GAAIloB,KAAKy5B,UACtC4D,EAAMj7B,EAAKgD,cAAcq2B,EAAItT,GAAInoB,KAAKy5B,UAEtCmE,EAAUb,EAAKC,EAAKruB,EAAKyuB,EAAMA,EAAMH,EAAKI,EAAMA,EAEtD5B,EAAI3C,WAAa8E,EAAU,EAAM,EAAMA,EAAU,EAEjD,IAAMC,EAAUz7B,EAAKiD,aAAarF,KAAKy5B,SAAU,GAE3CqE,EAAM17B,EAAKgD,cAAcq2B,EAAIvT,GAAI2V,GACjCE,EAAM37B,EAAKgD,cAAcq2B,EAAItT,GAAI0V,GAEjCG,EAAWjB,EAAKC,EAAKruB,EAAKmvB,EAAMA,EAAMb,EAAKc,EAAMA,EAEvDtC,EAAI1C,YAAciF,EAAW,EAAM,EAAMA,EAAW,EAGpDvC,EAAIzC,aAAe,EACnB,IAAMiF,EAAO77B,EAAK8C,IAAIlF,KAAKy5B,SAAUkE,GACjCv7B,EAAK8C,IAAIlF,KAAKy5B,SAAUr3B,EAAKkD,aAAauiB,EAAI4T,EAAItT,KAClD/lB,EAAK8C,IAAIlF,KAAKy5B,SAAUiE,GACxBt7B,EAAK8C,IAAIlF,KAAKy5B,SAAUr3B,EAAKkD,aAAaqiB,EAAI8T,EAAIvT,KAClD+V,GAAQh1B,EAASmB,oBACnBqxB,EAAIzC,cAAgBh5B,KAAK66B,cAAgBoD,GAK7C,GAAyB,GAArBj+B,KAAK+6B,cAAqB1K,EAAKrB,WAAY,CAC7C,IAAMkP,EAAOl+B,KAAKwvB,SAAS,GACrB2O,EAAOn+B,KAAKwvB,SAAS,GAErB4O,EAAOh8B,EAAKgD,cAAc84B,EAAKhW,GAAIloB,KAAKy5B,UACxC4E,EAAOj8B,EAAKgD,cAAc84B,EAAK/V,GAAInoB,KAAKy5B,UACxC6E,EAAOl8B,EAAKgD,cAAc+4B,EAAKjW,GAAIloB,KAAKy5B,UACxC8E,EAAOn8B,EAAKgD,cAAc+4B,EAAKhW,GAAInoB,KAAKy5B,UAExC+E,EAAMzB,EAAKC,EAAKruB,EAAKyvB,EAAOA,EAAOnB,EAAKoB,EAAOA,EAC/CI,EAAM1B,EAAKC,EAAKruB,EAAK2vB,EAAOA,EAAOrB,EAAKsB,EAAOA,EAC/CG,EAAM3B,EAAKC,EAAKruB,EAAKyvB,EAAOE,EAAOrB,EAAKoB,EAAOE,EAIjDC,EAAMA,EADmB,KACWA,EAAMC,EAAMC,EAAMA,IAExD1+B,KAAK25B,IAAI1E,GAAG5xB,OAAOm7B,EAAKE,GACxB1+B,KAAK25B,IAAIzE,GAAG7xB,OAAOq7B,EAAKD,GACxBz+B,KAAK05B,aAAat2B,IAAIpD,KAAK25B,IAAIxE,eAI/Bn1B,KAAK+6B,aAAe,EAIxB4B,EAAUtrB,EAAE/N,QAAQozB,GACpBiG,EAAUl5B,EAAIy5B,EACdM,EAAU36B,EAAES,QAAQo6B,GACpBF,EAAU95B,EAAIikB,EAEdiV,EAAUvrB,EAAE/N,QAAQqzB,GACpBiG,EAAUn5B,EAAI05B,EACdM,EAAU56B,EAAES,QAAQq6B,GACpBF,EAAU/5B,EAAImkB,GAGhBoR,EAAmBx5B,UAAA4xB,oBAAnB,SAAoBhB,GAClB,IAAMhV,EAAWrb,KAAK2wB,WAChBpV,EAAWvb,KAAK6wB,WAEhBhN,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAEjBolB,EAAY3Z,EAAM9F,WAClB0f,EAAY3Z,EAAM/F,WACN8F,EAAM7F,WACN8F,EAAM9F,WAexB,IAbA,IAAM+e,EAAK/8B,KAAKw6B,WACV7rB,EAAK3O,KAAK06B,QACVsC,EAAKh9B,KAAKy6B,WACVwC,EAAKj9B,KAAK26B,QAEV+C,EAAKt7B,EAAKQ,MAAM46B,EAAU36B,GAC5B8kB,EAAK6V,EAAU95B,EACbi6B,EAAKv7B,EAAKQ,MAAM66B,EAAU56B,GAC5BglB,EAAK4V,EAAU/5B,EAEb+E,EAASzI,KAAKy5B,SACdoE,EAAUz7B,EAAKiD,aAAaoD,EAAQ,GAEjCgI,EAAI,EAAGA,EAAIzQ,KAAK+6B,eAAgBtqB,EAAG,CAC1C,IAAMgrB,EAAMz7B,KAAKwvB,SAAS/e,GAEpB8sB,EAAIn7B,EAAKsD,QAAQ+1B,EAAIhM,cAAehnB,EAAQgzB,EAAI/L,eAAgBmO,GACtElW,GAAMhZ,EAAKvM,EAAKgD,cAAcq2B,EAAIvT,GAAIqV,GACtCG,EAAGv5B,OAAO44B,EAAIQ,GACd1V,GAAMoV,EAAK76B,EAAKgD,cAAcq2B,EAAItT,GAAIoV,GACtCI,EAAG35B,OAAOg5B,EAAIO,GAGhBC,EAAU36B,EAAES,QAAQo6B,GACpBF,EAAU95B,EAAIikB,EACd8V,EAAU56B,EAAES,QAAQq6B,GACpBF,EAAU/5B,EAAImkB,GAGhBoR,EAAuBx5B,UAAAgyB,wBAAvB,SAAwBpB,GAEtB,IADA,IAAMiK,EAAWt6B,KAAKm5B,WACb1oB,EAAI,EAAGA,EAAIzQ,KAAK+6B,eAAgBtqB,EACvC6pB,EAASvE,OAAOtlB,GAAGgf,cAAgBzvB,KAAKwvB,SAAS/e,GAAGgf,cACpD6K,EAASvE,OAAOtlB,GAAGif,eAAiB1vB,KAAKwvB,SAAS/e,GAAGif,gBAIzDuJ,EAAuBx5B,UAAA+xB,wBAAvB,SAAwBnB,GACtB,IAAMxM,EAAQ7jB,KAAK2wB,WAAWtZ,OACxByM,EAAQ9jB,KAAK6wB,WAAWxZ,OAExBmmB,EAAY3Z,EAAM9F,WACN8F,EAAM7F,WAExB,IAAMyf,EAAY3Z,EAAM/F,WACN+F,EAAM9F,WAoBxB,IAlBA,IAAM+e,EAAK/8B,KAAKw6B,WACV7rB,EAAK3O,KAAK06B,QACVsC,EAAKh9B,KAAKy6B,WACVwC,EAAKj9B,KAAK26B,QAEV+C,EAAKt7B,EAAKQ,MAAM46B,EAAU36B,GAC5B8kB,EAAK6V,EAAU95B,EACbi6B,EAAKv7B,EAAKQ,MAAM66B,EAAU56B,GAC5BglB,EAAK4V,EAAU/5B,EAEb+E,EAASzI,KAAKy5B,SACdoE,EAAUz7B,EAAKiD,aAAaoD,EAAQ,GACpC8N,EAAWvW,KAAK46B,WAMbnqB,EAAI,EAAGA,EAAIzQ,KAAK+6B,eAAgBtqB,EAAG,CAC1C,IAAMgrB,EAAMz7B,KAAKwvB,SAAS/e,IAGpBkuB,EAAKv8B,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI4T,EAAItT,KAClDwW,EAAGz6B,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI8T,EAAIvT,KAGlD,IAAM0W,EAAKx8B,EAAK8C,IAAIy5B,EAAId,GAAW79B,KAAK86B,eACpC+D,EAASpD,EAAI1C,aAAgB6F,EAG3BE,EAAcvoB,EAAWklB,EAAIhM,cAEnCoP,GADME,EAAaz9B,EAAKY,MAAMu5B,EAAI/L,eAAiBmP,GAASC,EAAaA,IACnDrD,EAAI/L,eAC1B+L,EAAI/L,eAAiBqP,EAGrB,IAAMxB,EAAIn7B,EAAKuD,WAAWk5B,EAAQhB,GAElCH,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAKvM,EAAKgD,cAAcq2B,EAAIvT,GAAIqV,GAEtCI,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK76B,EAAKgD,cAAcq2B,EAAItT,GAAIoV,GAIxC,GAAyB,GAArBv9B,KAAK+6B,cAAwC,GAAnB1K,EAAKrB,WACjC,IAAK,IAAIzuB,EAAI,EAAGA,EAAIP,KAAK+6B,eAAgBx6B,EAAG,CAC1C,IAGMo+B,EAHAlD,EAAMz7B,KAAKwvB,SAASjvB,IAGpBo+B,EAAKv8B,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI4T,EAAItT,KAClDwW,EAAGz6B,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI8T,EAAIvT,KAGlD,IAIM6W,EAJAC,EAAK58B,EAAK8C,IAAIy5B,EAAIl2B,GACpBo2B,GAAUpD,EAAI3C,YAAckG,EAAKvD,EAAIzC,cAIzC6F,GADME,EAAaz9B,EAAKW,IAAIw5B,EAAIhM,cAAgBoP,EAAQ,IAClCpD,EAAIhM,cAC1BgM,EAAIhM,cAAgBsP,EAGdxB,EAAIn7B,EAAKuD,WAAWk5B,EAAQp2B,GAElCi1B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAKvM,EAAKgD,cAAcq2B,EAAIvT,GAAIqV,GAEtCI,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK76B,EAAKgD,cAAcq2B,EAAItT,GAAIoV,OAEnC,CA0CL,IAAMW,EAAOl+B,KAAKwvB,SAAS,GACrB2O,EAAOn+B,KAAKwvB,SAAS,GAErB/rB,EAAIrB,EAAKO,IAAIu7B,EAAKzO,cAAe0O,EAAK1O,eAIxCwP,EAAM78B,EAAKM,OAAOmB,IAAI85B,GAAI95B,IAAIzB,EAAKkD,aAAauiB,EAAIqW,EAAK/V,KAAK/jB,IAAIs5B,GAAIt5B,IAAIhC,EAAKkD,aAAaqiB,EAAIuW,EAAKhW,KACrGgX,EAAM98B,EAAKM,OAAOmB,IAAI85B,GAAI95B,IAAIzB,EAAKkD,aAAauiB,EAAIsW,EAAKhW,KAAK/jB,IAAIs5B,GAAIt5B,IAAIhC,EAAKkD,aAAaqiB,EAAIwW,EAAKjW,KAGrGiX,EAAM/8B,EAAK8C,IAAI+5B,EAAKx2B,GACpB22B,EAAMh9B,EAAK8C,IAAIg6B,EAAKz2B,GAElBtJ,EAAIiD,EAAKO,IAAIw8B,EAAMjB,EAAKlF,aAAcoG,EAAMjB,EAAKnF,cAQvD,IALA75B,EAAEiF,IAAI4wB,GAAM9gB,QAAQlU,KAAK25B,IAAKl2B,MAKjB,CAUX,IAAMhC,EAAIuzB,GAAM9gB,QAAQlU,KAAK05B,aAAcv6B,GAAG0G,MAE9C,GAAIpE,EAAEA,GAAK,GAAOA,EAAEY,GAAK,EAAK,CAE5B,IAAMnD,EAAIkD,EAAKgC,IAAI3C,EAAGgC,GAGhB47B,EAAKj9B,EAAKuD,WAAWzG,EAAEuC,EAAGgH,GAC1B62B,EAAKl9B,EAAKuD,WAAWzG,EAAEmD,EAAGoG,GAEhCi1B,EAAGx5B,WAAW64B,EAAIsC,EAAItC,EAAIuC,GAC1B3X,GAAMhZ,GAAMvM,EAAKgD,cAAc84B,EAAKhW,GAAImX,GAAMj9B,EAAKgD,cAAc+4B,EAAKjW,GAAIoX,IAE1E3B,EAAG55B,WAAWi5B,EAAIqC,EAAIrC,EAAIsC,GAC1BzX,GAAMoV,GAAM76B,EAAKgD,cAAc84B,EAAK/V,GAAIkX,GAAMj9B,EAAKgD,cAAc+4B,EAAKhW,GAAImX,IAG1EpB,EAAKzO,cAAgBhuB,EAAEA,EACvB08B,EAAK1O,cAAgBhuB,EAAEY,EAcvB,MAcF,GALAZ,EAAEA,GAAKy8B,EAAKpF,WAAa35B,EAAEsC,EAC3BA,EAAEY,EAAI,EACN88B,EAAM,EACNC,EAAMp/B,KAAK25B,IAAI1E,GAAG5yB,EAAIZ,EAAEA,EAAItC,EAAEkD,EAE1BZ,EAAEA,GAAK,GAAO29B,GAAO,EAAK,CAEtBlgC,EAAIkD,EAAKgC,IAAI3C,EAAGgC,GAGhB47B,EAAKj9B,EAAKuD,WAAWzG,EAAEuC,EAAGgH,GAC1B62B,EAAKl9B,EAAKuD,WAAWzG,EAAEmD,EAAGoG,GAChCi1B,EAAGx5B,WAAW64B,EAAIsC,EAAItC,EAAIuC,GAC1B3X,GAAMhZ,GAAMvM,EAAKgD,cAAc84B,EAAKhW,GAAImX,GAAMj9B,EAAKgD,cAAc+4B,EAAKjW,GAAIoX,IAE1E3B,EAAG55B,WAAWi5B,EAAIqC,EAAIrC,EAAIsC,GAC1BzX,GAAMoV,GAAM76B,EAAKgD,cAAc84B,EAAK/V,GAAIkX,GAAMj9B,EAAKgD,cAAc+4B,EAAKhW,GAAImX,IAG1EpB,EAAKzO,cAAgBhuB,EAAEA,EACvB08B,EAAK1O,cAAgBhuB,EAAEY,EAavB,MAcF,GALAZ,EAAEA,EAAI,EACNA,EAAEY,GAAK87B,EAAKrF,WAAa35B,EAAEkD,EAC3B88B,EAAMn/B,KAAK25B,IAAIzE,GAAGzzB,EAAIA,EAAEY,EAAIlD,EAAEsC,EAC9B29B,EAAM,EAEF39B,EAAEY,GAAK,GAAO88B,GAAO,EAAK,CAEtBjgC,EAAIkD,EAAKgC,IAAI3C,EAAGgC,GAGhB47B,EAAKj9B,EAAKuD,WAAWzG,EAAEuC,EAAGgH,GAC1B62B,EAAKl9B,EAAKuD,WAAWzG,EAAEmD,EAAGoG,GAChCi1B,EAAGx5B,WAAW64B,EAAIsC,EAAItC,EAAIuC,GAC1B3X,GAAMhZ,GAAMvM,EAAKgD,cAAc84B,EAAKhW,GAAImX,GAAMj9B,EAAKgD,cAAc+4B,EAAKjW,GAAIoX,IAE1E3B,EAAG55B,WAAWi5B,EAAIqC,EAAIrC,EAAIsC,GAC1BzX,GAAMoV,GAAM76B,EAAKgD,cAAc84B,EAAK/V,GAAIkX,GAAMj9B,EAAKgD,cAAc+4B,EAAKhW,GAAImX,IAG1EpB,EAAKzO,cAAgBhuB,EAAEA,EACvB08B,EAAK1O,cAAgBhuB,EAAEY,EAavB,MAcF,GALAZ,EAAEA,EAAI,EACNA,EAAEY,EAAI,EACN88B,EAAMhgC,EAAEsC,EACR29B,EAAMjgC,EAAEkD,EAEJ88B,GAAO,GAAOC,GAAO,EAAK,CAEtBlgC,EAAIkD,EAAKgC,IAAI3C,EAAGgC,GAGhB47B,EAAKj9B,EAAKuD,WAAWzG,EAAEuC,EAAGgH,GAC1B62B,EAAKl9B,EAAKuD,WAAWzG,EAAEmD,EAAGoG,GAChCi1B,EAAGx5B,WAAW64B,EAAIsC,EAAItC,EAAIuC,GAC1B3X,GAAMhZ,GAAMvM,EAAKgD,cAAc84B,EAAKhW,GAAImX,GAAMj9B,EAAKgD,cAAc+4B,EAAKjW,GAAIoX,IAE1E3B,EAAG55B,WAAWi5B,EAAIqC,EAAIrC,EAAIsC,GAC1BzX,GAAMoV,GAAM76B,EAAKgD,cAAc84B,EAAK/V,GAAIkX,GAAMj9B,EAAKgD,cAAc+4B,EAAKhW,GAAImX,IAG1EpB,EAAKzO,cAAgBhuB,EAAEA,EACvB08B,EAAK1O,cAAgBhuB,EAAEY,EAEvB,MAKF,OAIJm7B,EAAU36B,EAAES,QAAQo6B,GACpBF,EAAU95B,EAAIikB,EAEd8V,EAAU56B,EAAES,QAAQq6B,GACpBF,EAAU/5B,EAAImkB,GAMToR,EAAAsG,QAAP,SAAeC,EAAkBC,EAAkBC,GACjD9G,GAAY4G,GAAS5G,GAAY4G,IAAU,GAC3C5G,GAAY4G,GAAOC,GAASC,GAMvBzG,EAAM/4B,OAAb,SAAcmb,EAAmBgL,EAAgB9K,EAAmB+K,GAClE,IAIIlL,EACA8d,EALEhC,EAAQ7b,EAASxC,UACjBse,EAAQ5b,EAAS1C,UAKvB,GAAIqgB,EAAcN,GAAY1B,IAAU0B,GAAY1B,GAAOC,GACzD/b,EAAU,IAAI6d,EAAQ5d,EAAUgL,EAAQ9K,EAAU+K,EAAQ4S,OACrD,CAAA,KAAIA,EAAcN,GAAYzB,IAAUyB,GAAYzB,GAAOD,IAGhE,OAAO,KAFP9b,EAAU,IAAI6d,EAAQ1d,EAAU+K,EAAQjL,EAAUgL,EAAQ6S,GAM5D7d,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,cACnB6K,EAASjL,EAAQoY,iBACjBlN,EAASlL,EAAQqY,iBACjB,IAAM5P,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UA8BvB,OA3BAgD,EAAQ6e,QAAQ7e,QAAUA,EAC1BA,EAAQ6e,QAAQpX,MAAQiB,EAExB1I,EAAQ6e,QAAQtW,KAAO,KACvBvI,EAAQ6e,QAAQxqB,KAAOoU,EAAMnF,cACF,MAAvBmF,EAAMnF,gBACRmF,EAAMnF,cAAciF,KAAOvI,EAAQ6e,SAErCpW,EAAMnF,cAAgBtD,EAAQ6e,QAG9B7e,EAAQ8e,QAAQ9e,QAAUA,EAC1BA,EAAQ8e,QAAQrX,MAAQgB,EAExBzI,EAAQ8e,QAAQvW,KAAO,KACvBvI,EAAQ8e,QAAQzqB,KAAOqU,EAAMpF,cACF,MAAvBoF,EAAMpF,gBACRoF,EAAMpF,cAAciF,KAAOvI,EAAQ8e,SAErCpW,EAAMpF,cAAgBtD,EAAQ8e,QAGH,GAAvB7e,EAAS3E,YAA8C,GAAvB6E,EAAS7E,aAC3CmN,EAAM5K,UAAS,GACf6K,EAAM7K,UAAS,IAGVmC,GAMF6d,EAAA0G,QAAP,SAAevkB,EAAkB4gB,GAC/B,IAAM3gB,EAAWD,EAAQuV,WACnBpV,EAAWH,EAAQyV,WAEnBhN,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAEnBgD,EAAQqV,cACVuL,EAASO,WAAWnhB,GAIlBA,EAAQ6e,QAAQtW,OAClBvI,EAAQ6e,QAAQtW,KAAKlU,KAAO2L,EAAQ6e,QAAQxqB,MAG1C2L,EAAQ6e,QAAQxqB,OAClB2L,EAAQ6e,QAAQxqB,KAAKkU,KAAOvI,EAAQ6e,QAAQtW,MAG1CvI,EAAQ6e,SAAWpW,EAAMnF,gBAC3BmF,EAAMnF,cAAgBtD,EAAQ6e,QAAQxqB,MAIpC2L,EAAQ8e,QAAQvW,OAClBvI,EAAQ8e,QAAQvW,KAAKlU,KAAO2L,EAAQ8e,QAAQzqB,MAG1C2L,EAAQ8e,QAAQzqB,OAClB2L,EAAQ8e,QAAQzqB,KAAKkU,KAAOvI,EAAQ8e,QAAQvW,MAG1CvI,EAAQ8e,SAAWpW,EAAMpF,gBAC3BoF,EAAMpF,cAAgBtD,EAAQ8e,QAAQzqB,MAGpC2L,EAAQ+d,WAAWlD,WAAa,GAA4B,GAAvB5a,EAAS3E,YACtB,GAAvB6E,EAAS7E,aACZmN,EAAM5K,UAAS,GACf6K,EAAM7K,UAAS,IAGHoC,EAASxC,UACT0C,EAAS1C,WAO1BogB,KClrCK2G,GAA4B,CAChC5O,QAAU5uB,EAAKM,OACfia,YAAa,EACboS,cAAe,EACf8Q,mBAAoB,EACpBC,aAAc,EACd9Q,YAAa,EACbH,mBAAqB,EACrBC,mBAAqB,GAyBvBiR,GAAA,WA+BE,SAAAA,EAAY3oB,GACV,KAA8BpX,gBAAgB+/B,GAC5C,OAAO,IAAIA,EAAM3oB,GAGnBpX,KAAKggC,OAAS,IAAItR,EAGdtX,GAAOhV,EAAKa,QAAQmU,KACtBA,EAAM,CAAE4Z,QAAS5Z,IAGnBA,EAAMxW,EAAQwW,EAAKwoB,IAEnB5/B,KAAKigC,SAAW,IAAItQ,EAAO3vB,MAE3BA,KAAKuY,aAAe,IAAI7G,EAExB1R,KAAK0e,cAAgB,KACrB1e,KAAKkgC,eAAiB,EAEtBlgC,KAAKswB,WAAa,KAClBtwB,KAAKmgC,YAAc,EAEnBngC,KAAKye,YAAc,KACnBze,KAAKogC,aAAe,EAEpBpgC,KAAK6yB,gBAAiB,EAEtB7yB,KAAKkxB,aAAe9Z,EAAIuF,WACxB3c,KAAKixB,UAAY7uB,EAAKQ,MAAMwU,EAAI4Z,SAEhChxB,KAAKqgC,eAAgB,EACrBrgC,KAAKgjB,cAAe,EACpBhjB,KAAKsgC,UAAW,EAGhBtgC,KAAKugC,eAAiBnpB,EAAI2X,aAC1B/uB,KAAKwgC,oBAAsBppB,EAAIyoB,kBAC/B7/B,KAAKq0B,cAAgBjd,EAAI0oB,YAEzB9/B,KAAKygC,aAAerpB,EAAI4X,WACxBhvB,KAAK0gC,qBAAuBtpB,EAAIyX,mBAChC7uB,KAAK2gC,qBAAuBvpB,EAAI0X,mBAEhC9uB,KAAK4gC,IAAM,EA29Bf,OAv9BEb,EAAAtgC,UAAA6C,WAAA,WAIE,IAHA,IAAM2xB,EAAS,GACT4M,EAAS,GAEN1hC,EAAIa,KAAK8gC,cAAe3hC,EAAGA,EAAIA,EAAEga,UACxC8a,EAAOroB,KAAKzM,GAGd,IAAK,IAAIsR,EAAIzQ,KAAKmf,eAAgB1O,EAAGA,EAAIA,EAAE0I,UAEb,mBAAjB1I,EAAEnO,YACXu+B,EAAOj1B,KAAK6E,GAIhB,MAAO,CACLugB,QAAShxB,KAAKixB,UACdgD,OAAMA,EACN4M,OAAMA,IAKHd,EAAAx9B,aAAP,SAAoBC,EAAWu+B,EAAcnoB,GAC3C,IAAKpW,EACH,OAAO,IAAIu9B,EAGb,IAAMrkB,EAAQ,IAAIqkB,EAAMv9B,EAAKwuB,SAE7B,GAAIxuB,EAAKyxB,OACP,IAAK,IAAI1zB,EAAIiC,EAAKyxB,OAAOvzB,OAAS,EAAGH,GAAK,EAAGA,GAAK,EAChDmb,EAAMslB,SAASpoB,EAAQsE,EAAM1a,EAAKyxB,OAAO1zB,GAAImb,IAIjD,GAAIlZ,EAAKq+B,OACP,IAAStgC,EAAIiC,EAAKq+B,OAAOngC,OAAS,EAAGH,GAAK,EAAGA,IAC3Cmb,EAAMulB,YAAYroB,EAAQgL,EAAOphB,EAAKq+B,OAAOtgC,GAAImb,IAIrD,OAAOA,GASTqkB,EAAAtgC,UAAAqhC,YAAA,WACE,OAAO9gC,KAAKswB,YASdyP,EAAAtgC,UAAA0f,aAAA,WACE,OAAOnf,KAAKye,aAadshB,EAAAtgC,UAAA0b,eAAA,WACE,OAAOnb,KAAK0e,eAGdqhB,EAAAtgC,UAAAyhC,aAAA,WACE,OAAOlhC,KAAKmgC,aAGdJ,EAAAtgC,UAAA0hC,cAAA,WACE,OAAOnhC,KAAKogC,cAMdL,EAAAtgC,UAAA2hC,gBAAA,WACE,OAAOphC,KAAKkgC,gBAMdH,EAAUtgC,UAAA4hC,WAAV,SAAWrQ,GACThxB,KAAKixB,UAAYD,GAMnB+O,EAAAtgC,UAAA6hC,WAAA,WACE,OAAOthC,KAAKixB,WAMd8O,EAAAtgC,UAAAwf,SAAA,WACE,OAAOjf,KAAKsgC,UAMdP,EAAgBtgC,UAAA8hC,iBAAhB,SAAiBrhB,GACf,GAAIA,GAAQlgB,KAAKkxB,eAIjBlxB,KAAKkxB,aAAehR,EACK,GAArBlgB,KAAKkxB,cACP,IAAK,IAAI/xB,EAAIa,KAAKswB,WAAYnxB,EAAGA,EAAIA,EAAE2Y,OACrC3Y,EAAE8Z,UAAS,IAKjB8mB,EAAAtgC,UAAA+hC,iBAAA,WACE,OAAOxhC,KAAKkxB,cAMd6O,EAAetgC,UAAAgiC,gBAAf,SAAgBvhB,GACdlgB,KAAKugC,eAAiBrgB,GAGxB6f,EAAAtgC,UAAAiiC,gBAAA,WACE,OAAO1hC,KAAKugC,gBAMdR,EAAoBtgC,UAAAkiC,qBAApB,SAAqBzhB,GACnBlgB,KAAKwgC,oBAAsBtgB,GAG7B6f,EAAAtgC,UAAAmiC,qBAAA,WACE,OAAO5hC,KAAKwgC,qBAMdT,EAActgC,UAAAoiC,eAAd,SAAe3hB,GACblgB,KAAKq0B,cAAgBnU,GAGvB6f,EAAAtgC,UAAAqiC,eAAA,WACE,OAAO9hC,KAAKq0B,eAMd0L,EAAkBtgC,UAAAsiC,mBAAlB,SAAmB7hB,GACjBlgB,KAAKqgC,cAAgBngB,GAMvB6f,EAAAtgC,UAAAuiC,mBAAA,WACE,OAAOhiC,KAAKqgC,eAcdN,EAAAtgC,UAAAwiC,YAAA,WACE,IAAK,IAAI/qB,EAAOlX,KAAKswB,WAAYpZ,EAAMA,EAAOA,EAAKiC,UACjDjC,EAAK+G,QAAQ9a,UACb+T,EAAKgH,SAAW,GAUpB6hB,EAAAtgC,UAAAyiC,UAAA,SAAU56B,EAAYo4B,GAEpB,IAAMrnB,EAAarY,KAAKuY,aACxBvY,KAAKuY,aAAazH,MAAMxJ,GAAM,SAASyK,GACrC,IAAMgI,EAAQ1B,EAAWpL,YAAY8E,GACrC,OAAO2tB,EAAS3lB,EAAMhD,aAa1BgpB,EAAAtgC,UAAAyI,QAAA,SAAQi6B,EAAcC,EAAc1C,GAElC,IAAMrnB,EAAarY,KAAKuY,aAExBvY,KAAKuY,aAAarQ,QAAQ,CACxBa,YAAc,EACdT,GAAK65B,EACL55B,GAAK65B,IACJ,SAASvhC,EAAqBkR,GAC/B,IAAMgI,EAAQ1B,EAAWpL,YAAY8E,GAC/BgF,EAAUgD,EAAMhD,QAChBlJ,EAAQkM,EAAM/C,WAEdjW,EAAwB,GAE9B,GADYgW,EAAQ7O,QAAQnH,EAAQF,EAAOgN,GAClC,CACP,IAAM7E,EAAWjI,EAAOiI,SAClBoZ,EAAQhgB,EAAKyB,IAAIzB,EAAKuD,WAAY,EAAMqD,EAAWnI,EAAMyH,IAAKlG,EAAKuD,WAAWqD,EAAUnI,EAAM0H,KACpG,OAAOm3B,EAAS3oB,EAASqL,EAAOrhB,EAAO0H,OAAQO,GAEjD,OAAOnI,EAAMkI,gBAOjBg3B,EAAAtgC,UAAA+S,cAAA,WACE,OAAOxS,KAAKuY,aAAa/F,iBAM3ButB,EAAAtgC,UAAAgT,cAAA,WACE,OAAOzS,KAAKuY,aAAa9F,iBAM3BstB,EAAAtgC,UAAAiT,eAAA,WACE,OAAO1S,KAAKuY,aAAa7F,kBAO3BqtB,EAAAtgC,UAAAkT,eAAA,WACE,OAAO3S,KAAKuY,aAAa5F,kBAS3BotB,EAAWtgC,UAAAmR,YAAX,SAAYC,GAEV,IAAI7Q,KAAKsgC,SAAT,CAIA,IAAK,IAAInhC,EAAIa,KAAKswB,WAAYnxB,EAAGA,EAAIA,EAAE2Y,OACrC3Y,EAAEuZ,KAAKlZ,EAAE4E,IAAIyM,GACb1R,EAAE2e,QAAQtI,GAAGpR,IAAIyM,GACjB1R,EAAE2e,QAAQzM,EAAEjN,IAAIyM,GAGlB,IAAK,IAAIJ,EAAIzQ,KAAKye,YAAahO,EAAGA,EAAIA,EAAEqH,OACtCrH,EAAEG,YAAYC,GAGhB7Q,KAAKuY,aAAa3H,YAAYC,KAMhCkvB,EAAQtgC,UAAAuhC,SAAR,SAAS9pB,GAEHlX,KAAKif,aAKT/H,EAAK0H,OAAS,KACd1H,EAAKY,OAAS9X,KAAKswB,WACftwB,KAAKswB,aACPtwB,KAAKswB,WAAW1R,OAAS1H,GAE3BlX,KAAKswB,WAAapZ,IAChBlX,KAAKmgC,cAYTJ,EAAAtgC,UAAA4iC,WAAA,SAAWC,EAAOC,GAEhB,GAAIviC,KAAKif,WACP,OAAO,KAGT,IAAI7H,EAAe,GACdkrB,IACMlgC,EAAKa,QAAQq/B,GACtBlrB,EAAM,CAAE5C,SAAW8tB,EAAMlvB,MAAOmvB,GACP,iBAATD,IAChBlrB,EAAMkrB,IAGR,IAAMprB,EAAO,IAAIgG,EAAKld,KAAMoX,GAE5B,OADApX,KAAKghC,SAAS9pB,GACPA,GAMT6oB,EAAAtgC,UAAA+iC,kBAAA,SAAkBF,EAAOC,GACvB,IAAInrB,EAAe,GAQnB,OAPKkrB,IACMlgC,EAAKa,QAAQq/B,GACtBlrB,EAAM,CAAE5C,SAAW8tB,EAAMlvB,MAAOmvB,GACP,iBAATD,IAChBlrB,EAAMkrB,IAERlrB,EAAI+E,KAAO,UACJnc,KAAKqiC,WAAWjrB,IAMzB2oB,EAAAtgC,UAAAgjC,oBAAA,SAAoBH,EAAOC,GACzB,IAAInrB,EAAe,GAQnB,OAPKkrB,IACMlgC,EAAKa,QAAQq/B,GACtBlrB,EAAM,CAAE5C,SAAW8tB,EAAMlvB,MAAOmvB,GACP,iBAATD,IAChBlrB,EAAMkrB,IAERlrB,EAAI+E,KAAO,YACJnc,KAAKqiC,WAAWjrB,IAWzB2oB,EAAWtgC,UAAAijC,YAAX,SAAYvjC,GAGV,IAAIa,KAAKif,WAAT,CAIA,GAAI9f,EAAE0f,YACJ,OAAO,EAKT,IADA,IAAIiS,EAAK3xB,EAAEsf,YACJqS,GAAI,CACT,IAAM6R,EAAM7R,EACZA,EAAKA,EAAGrhB,KAERzP,KAAKojB,QAAQ,eAAgBuf,EAAI7f,OACjC9iB,KAAK4iC,aAAaD,EAAI7f,OAEtB3jB,EAAEsf,YAAcqS,EAElB3xB,EAAEsf,YAAc,KAIhB,IADA,IAAImB,EAAKzgB,EAAEuf,cACJkB,GAAI,CACT,IAAMC,EAAMD,EACZA,EAAKA,EAAGnQ,KAERzP,KAAK8f,eAAeD,EAAIzE,SAExBjc,EAAEuf,cAAgBkB,EAEpBzgB,EAAEuf,cAAgB,KAIlB,IADA,IAAIhW,EAAIvJ,EAAEwf,cACHjW,GAAG,CACR,IAAMm6B,EAAKn6B,EACXA,EAAIA,EAAEoP,OAEN9X,KAAKojB,QAAQ,iBAAkByf,GAC/BA,EAAGrqB,eAAexY,KAAKuY,cAEvBpZ,EAAEwf,cAAgBjW,EAuBpB,OArBAvJ,EAAEwf,cAAgB,KAGdxf,EAAEyf,SACJzf,EAAEyf,OAAO9G,OAAS3Y,EAAE2Y,QAGlB3Y,EAAE2Y,SACJ3Y,EAAE2Y,OAAO8G,OAASzf,EAAEyf,QAGlBzf,GAAKa,KAAKswB,aACZtwB,KAAKswB,WAAanxB,EAAE2Y,QAGtB3Y,EAAE0f,aAAc,IAEd7e,KAAKmgC,YAEPngC,KAAKojB,QAAQ,cAAejkB,IAErB,IAST4gC,EAAWtgC,UAAAwhC,YAAX,SAA6Bne,GAI3B,GAAI9iB,KAAKif,WACP,OAAO,KA8BT,GA1BA6D,EAAMlE,OAAS,KACfkE,EAAMhL,OAAS9X,KAAKye,YAChBze,KAAKye,cACPze,KAAKye,YAAYG,OAASkE,GAE5B9iB,KAAKye,YAAcqE,IACjB9iB,KAAKogC,aAGPtd,EAAMiB,QAAQjB,MAAQA,EACtBA,EAAMiB,QAAQlB,MAAQC,EAAMoB,QAC5BpB,EAAMiB,QAAQJ,KAAO,KACrBb,EAAMiB,QAAQtU,KAAOqT,EAAMmB,QAAQxF,YAC/BqE,EAAMmB,QAAQxF,cAChBqE,EAAMmB,QAAQxF,YAAYkF,KAAOb,EAAMiB,SACzCjB,EAAMmB,QAAQxF,YAAcqE,EAAMiB,QAElCjB,EAAMkB,QAAQlB,MAAQA,EACtBA,EAAMkB,QAAQnB,MAAQC,EAAMmB,QAC5BnB,EAAMkB,QAAQL,KAAO,KACrBb,EAAMkB,QAAQvU,KAAOqT,EAAMoB,QAAQzF,YAC/BqE,EAAMoB,QAAQzF,cAChBqE,EAAMoB,QAAQzF,YAAYkF,KAAOb,EAAMkB,SACzClB,EAAMoB,QAAQzF,YAAcqE,EAAMkB,QAGF,GAA5BlB,EAAMC,mBACR,IAAK,IAAI7H,EAAO4H,EAAMoB,QAAQ/I,iBAAkBD,EAAMA,EAAOA,EAAKzL,KAC5DyL,EAAK2H,OAASC,EAAMmB,SAGtB/I,EAAKE,QAAQK,mBAOnB,OAAOqH,GAOTid,EAAYtgC,UAAAmjC,aAAZ,SAAa9f,GAEX,IAAI9iB,KAAKif,WAAT,CAKI6D,EAAMlE,SACRkE,EAAMlE,OAAO9G,OAASgL,EAAMhL,QAG1BgL,EAAMhL,SACRgL,EAAMhL,OAAO8G,OAASkE,EAAMlE,QAG1BkE,GAAS9iB,KAAKye,cAChBze,KAAKye,YAAcqE,EAAMhL,QAI3B,IAAM+L,EAAQf,EAAMmB,QACdH,EAAQhB,EAAMoB,QA0CpB,GAvCAL,EAAM5K,UAAS,GACf6K,EAAM7K,UAAS,GAGX6J,EAAMiB,QAAQJ,OAChBb,EAAMiB,QAAQJ,KAAKlU,KAAOqT,EAAMiB,QAAQtU,MAGtCqT,EAAMiB,QAAQtU,OAChBqT,EAAMiB,QAAQtU,KAAKkU,KAAOb,EAAMiB,QAAQJ,MAGtCb,EAAMiB,SAAWF,EAAMpF,cACzBoF,EAAMpF,YAAcqE,EAAMiB,QAAQtU,MAGpCqT,EAAMiB,QAAQJ,KAAO,KACrBb,EAAMiB,QAAQtU,KAAO,KAGjBqT,EAAMkB,QAAQL,OAChBb,EAAMkB,QAAQL,KAAKlU,KAAOqT,EAAMkB,QAAQvU,MAGtCqT,EAAMkB,QAAQvU,OAChBqT,EAAMkB,QAAQvU,KAAKkU,KAAOb,EAAMkB,QAAQL,MAGtCb,EAAMkB,SAAWF,EAAMrF,cACzBqF,EAAMrF,YAAcqE,EAAMkB,QAAQvU,MAGpCqT,EAAMkB,QAAQL,KAAO,KACrBb,EAAMkB,QAAQvU,KAAO,OAGnBzP,KAAKogC,aAGyB,GAA5Btd,EAAMC,mBAER,IADA,IAAI7H,EAAO4I,EAAM3I,iBACVD,GACDA,EAAK2H,OAASgB,GAGhB3I,EAAKE,QAAQK,mBAGfP,EAAOA,EAAKzL,KAIhBzP,KAAKojB,QAAQ,eAAgBN,KAc/Bid,EAAAtgC,UAAA4wB,KAAA,SAAKyS,EAAkBjU,EAA6BC,GA6BlD,GA5BA9uB,KAAKojB,QAAQ,WAAY0f,IAEC,EAArBjU,KAA4BA,IAE/BA,EAAqB,GAGvBA,EAAqBA,GAAsB7uB,KAAK0gC,qBAChD5R,EAAqBA,GAAsB9uB,KAAK2gC,qBAG5C3gC,KAAKgjB,eACPhjB,KAAKo0B,kBACLp0B,KAAKgjB,cAAe,GAGtBhjB,KAAKsgC,UAAW,EAEhBtgC,KAAKggC,OAAO7Q,MAAM2T,GAClB9iC,KAAKggC,OAAOnR,mBAAqBA,EACjC7uB,KAAKggC,OAAOlR,mBAAqBA,EACjC9uB,KAAKggC,OAAOjR,aAAe/uB,KAAKugC,eAChCvgC,KAAKggC,OAAOhR,WAAahvB,KAAKygC,aAG9BzgC,KAAK+iC,iBAGD/iC,KAAK6yB,gBAAkBiQ,EAAW,EAAK,CACzC9iC,KAAKigC,SAAS7P,WAAWpwB,KAAKggC,QAG9B,IAAK,IAAI7gC,EAAIa,KAAKswB,WAAYnxB,EAAGA,EAAIA,EAAEga,UAEf,GAAlBha,EAAEqe,eAIFre,EAAEigB,YAKNjgB,EAAEwgB,uBAGJ3f,KAAKo0B,kBAIHp0B,KAAKwgC,qBAAuBsC,EAAW,GACzC9iC,KAAKigC,SAASrN,cAAc5yB,KAAKggC,QAG/BhgC,KAAKqgC,eACPrgC,KAAKiiC,cAGPjiC,KAAKsgC,UAAW,EAEhBtgC,KAAKojB,QAAQ,YAAa0f,IAO5B/C,EAAAtgC,UAAA20B,gBAAA,WAAA,IAICziB,EAAA3R,KAHCA,KAAKuY,aAAavF,aAChB,SAAC0S,EAAsBE,GAAyB,OAAAjU,EAAKqxB,cAActd,EAAQE,OAQ/Ema,EAAAtgC,UAAAujC,cAAA,SAActd,EAAsBE,GAClC,IAAMvK,EAAWqK,EAAO3O,QAClBwE,EAAWqK,EAAO7O,QAElBsP,EAASX,EAAO1O,WAChBsP,EAASV,EAAO5O,WAEhB6M,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAGvB,GAAIyL,GAASC,EAAb,CAQA,IADA,IAAI5I,EAAO4I,EAAM3I,iBACVD,GAAM,CACX,GAAIA,EAAK2H,OAASgB,EAAO,CACvB,IAAM6P,EAAKxY,EAAKE,QAAQE,cAClBqY,EAAKzY,EAAKE,QAAQI,cAClB7M,EAAKuM,EAAKE,QAAQoY,iBAClByJ,EAAK/hB,EAAKE,QAAQqY,iBAExB,GAAIC,GAAMrY,GAAYsY,GAAMpY,GAAY5M,GAAM0X,GAAU4W,GAAM3W,EAE5D,OAGF,GAAIoN,GAAMnY,GAAYoY,GAAMtY,GAAY1M,GAAM2X,GAAU2W,GAAM5W,EAE5D,OAIJnL,EAAOA,EAAKzL,KAGd,GAAkC,GAA9BqU,EAAMlI,cAAciI,IAGgB,GAApCtI,EAASK,cAAcP,GAA3B,CAKA,IAAMD,EAAU6d,GAAQ/4B,OAAOmb,EAAUgL,EAAQ9K,EAAU+K,GAC5C,MAAXlL,IAKJA,EAAQwD,OAAS,KACS,MAAtB5e,KAAK0e,gBACPtD,EAAQtD,OAAS9X,KAAK0e,cACtB1e,KAAK0e,cAAcE,OAASxD,GAE9Bpb,KAAK0e,cAAgBtD,IAEnBpb,KAAKkgC,mBAOTH,EAAAtgC,UAAAsjC,eAAA,WAIE,IAFA,IAAI1xB,EACA4xB,EAASjjC,KAAK0e,cACXrN,EAAI4xB,GAAQ,CACjBA,EAAS5xB,EAAE8H,UACX,IAAMkC,EAAWhK,EAAEiK,cACbC,EAAWlK,EAAEmK,cACb6K,EAAShV,EAAEmiB,iBACXlN,EAASjV,EAAEoiB,iBACX5P,EAAQxI,EAASjD,UACjB0L,EAAQvI,EAASnD,UAGvB,GAAI/G,EAAEkoB,aAAc,CAClB,GAAkC,GAA9BzV,EAAMlI,cAAciI,GAAiB,CACvC7jB,KAAK8f,eAAezO,GACpB,SAGF,GAAwC,GAApCkK,EAASK,cAAcP,GAAoB,CAC7Crb,KAAK8f,eAAezO,GACpB,SAIFA,EAAEkoB,cAAe,EAGnB,IAAMjG,EAAUzP,EAAMxD,YAAcwD,EAAMzE,WACpCmU,EAAUzP,EAAMzD,YAAcyD,EAAM1E,WAG1C,GAAe,GAAXkU,GAA+B,GAAXC,EAAxB,CAIA,IAAMthB,EAAWoJ,EAAStD,UAAUsO,GAAQtU,QACtCG,EAAWqJ,EAASxD,UAAUuO,GAAQvU,QAI7B,GAHC/R,KAAKuY,aAAa7Q,YAAYuK,EAAUC,GASxDb,EAAE2iB,OAAOh0B,MALPA,KAAK8f,eAAezO,MAY1B0uB,EAActgC,UAAAqgB,eAAd,SAAe1E,GACb6d,GAAQ0G,QAAQvkB,EAASpb,MAGrBob,EAAQwD,SACVxD,EAAQwD,OAAO9G,OAASsD,EAAQtD,QAE9BsD,EAAQtD,SACVsD,EAAQtD,OAAO8G,OAASxD,EAAQwD,QAE9BxD,GAAWpb,KAAK0e,gBAClB1e,KAAK0e,cAAgBtD,EAAQtD,UAG7B9X,KAAKkgC,gBAiETH,EAAAtgC,UAAAyjC,GAAA,SAAGC,EAAMnH,GACP,MAAoB,iBAATmH,GAAyC,mBAAbnH,IAGlCh8B,KAAKojC,aACRpjC,KAAKojC,WAAa,IAEfpjC,KAAKojC,WAAWD,KACnBnjC,KAAKojC,WAAWD,GAAQ,IAE1BnjC,KAAKojC,WAAWD,GAAMv3B,KAAKowB,IARlBh8B,MAuBX+/B,EAAAtgC,UAAA4jC,IAAA,SAAIF,EAAMnH,GACR,GAAoB,iBAATmH,GAAyC,mBAAbnH,EACrC,OAAOh8B,KAET,IAAMsjC,EAAYtjC,KAAKojC,YAAcpjC,KAAKojC,WAAWD,GACrD,IAAKG,IAAcA,EAAU5iC,OAC3B,OAAOV,KAET,IAAM6N,EAAQy1B,EAAUC,QAAQvH,GAIhC,OAHInuB,GAAS,GACXy1B,EAAUE,OAAO31B,EAAO,GAEnB7N,MAGT+/B,EAAOtgC,UAAA2jB,QAAP,SAAQ+f,EAAcb,EAAYC,EAAYkB,GAC5C,IAAMH,EAAYtjC,KAAKojC,YAAcpjC,KAAKojC,WAAWD,GACrD,IAAKG,IAAcA,EAAU5iC,OAC3B,OAAO,EAET,IAAK,IAAIgjC,EAAI,EAAGA,EAAIJ,EAAU5iC,OAAQgjC,IACpCJ,EAAUI,GAAG/jC,KAAKK,KAAMsiC,EAAMC,EAAMkB,GAEtC,OAAOH,EAAU5iC,QAMnBq/B,EAAYtgC,UAAA68B,aAAZ,SAAalhB,GACXpb,KAAKojB,QAAQ,gBAAiBhI,IAMhC2kB,EAAUtgC,UAAA88B,WAAV,SAAWnhB,GACTpb,KAAKojB,QAAQ,cAAehI,IAM9B2kB,EAAAtgC,UAAA+8B,SAAA,SAASphB,EAAkB6gB,GACzBj8B,KAAKojB,QAAQ,YAAahI,EAAS6gB,IAMrC8D,EAAAtgC,UAAAk1B,UAAA,SAAUvZ,EAAkBsH,GAC1B1iB,KAAKojB,QAAQ,aAAchI,EAASsH,IAmBxCqd,KCtmCA4D,GAAA,WASE,SAAAA,EAAYliC,EAAIY,EAAIuhC,GAClB,KAA8B5jC,gBAAgB2jC,GAC5C,OAAO,IAAIA,EAAKliC,EAAGY,EAAGuhC,QAEP,IAANniC,GACTzB,KAAKyB,EAAI,EACTzB,KAAKqC,EAAI,EACTrC,KAAK4jC,EAAI,GACa,iBAANniC,GAChBzB,KAAKyB,EAAIA,EAAEA,EACXzB,KAAKqC,EAAIZ,EAAEY,EACXrC,KAAK4jC,EAAIniC,EAAEmiC,IAEX5jC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,EACTrC,KAAK4jC,EAAIA,GAoJf,OA9IED,EAAAlkC,UAAA6C,WAAA,WACE,MAAO,CACLb,EAAGzB,KAAKyB,EACRY,EAAGrC,KAAKqC,EACRuhC,EAAG5jC,KAAK4jC,IAKLD,EAAYphC,aAAnB,SAAoBC,GAClB,IAAMC,EAAMrD,OAAOc,OAAOyjC,EAAKlkC,WAI/B,OAHAgD,EAAIhB,EAAIe,EAAKf,EACbgB,EAAIJ,EAAIG,EAAKH,EACbI,EAAImhC,EAAIphC,EAAKohC,EACNnhC,GAIFkhC,EAAAhhC,IAAP,SAAWlB,EAAWY,EAAWuhC,GAC/B,IAAMnhC,EAAMrD,OAAOc,OAAOyjC,EAAKlkC,WAI/B,OAHAgD,EAAIhB,EAAIA,EACRgB,EAAIJ,EAAIA,EACRI,EAAImhC,EAAIA,EACDnhC,GAGFkhC,EAAAjhC,KAAP,WACE,IAAMD,EAAMrD,OAAOc,OAAOyjC,EAAKlkC,WAI/B,OAHAgD,EAAIhB,EAAI,EACRgB,EAAIJ,EAAI,EACRI,EAAImhC,EAAI,EACDnhC,GAGFkhC,EAAK/gC,MAAZ,SAAaC,GAEX,OAAO8gC,EAAKhhC,IAAIE,EAAEpB,EAAGoB,EAAER,EAAGQ,EAAE+gC,IAI9BD,EAAAlkC,UAAAqD,SAAA,WACE,OAAOC,KAAKC,UAAUhD,OAMjB2jC,EAAO1gC,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGnB,EAAKE,SAASiB,EAAIhB,IAAMH,EAAKE,SAASiB,EAAIJ,IAAMf,EAAKE,SAASiB,EAAImhC,KAGpED,EAAMhiC,OAAb,SAAcuB,KAIdygC,EAAAlkC,UAAA0D,QAAA,WAIE,OAHAnD,KAAKyB,EAAI,EACTzB,KAAKqC,EAAI,EACTrC,KAAK4jC,EAAI,EACF5jC,MAGT2jC,EAAAlkC,UAAA2D,IAAA,SAAI3B,EAAWY,EAAWuhC,GAIxB,OAHA5jC,KAAKyB,EAAIA,EACTzB,KAAKqC,EAAIA,EACTrC,KAAK4jC,EAAIA,EACF5jC,MAGT2jC,EAAGlkC,UAAAoE,IAAH,SAAIH,GAIF,OAHA1D,KAAKyB,GAAKiC,EAAEjC,EACZzB,KAAKqC,GAAKqB,EAAErB,EACZrC,KAAK4jC,GAAKlgC,EAAEkgC,EACL5jC,MAGT2jC,EAAGlkC,UAAA2E,IAAH,SAAIV,GAIF,OAHA1D,KAAKyB,GAAKiC,EAAEjC,EACZzB,KAAKqC,GAAKqB,EAAErB,EACZrC,KAAK4jC,GAAKlgC,EAAEkgC,EACL5jC,MAGT2jC,EAAGlkC,UAAA4E,IAAH,SAAIC,GAIF,OAHAtE,KAAKyB,GAAK6C,EACVtE,KAAKqC,GAAKiC,EACVtE,KAAK4jC,GAAKt/B,EACHtE,MAGF2jC,EAAA3+B,SAAP,SAAgBnC,EAASa,GAGvB,OAAOb,IAAMa,GACE,iBAANb,GAAwB,OAANA,GACZ,iBAANa,GAAwB,OAANA,GACzBb,EAAEpB,IAAMiC,EAAEjC,GAAKoB,EAAER,IAAMqB,EAAErB,GAAKQ,EAAE+gC,IAAMlgC,EAAEkgC,GAMrCD,EAAAz+B,IAAP,SAAWrC,EAASa,GAClB,OAAOb,EAAEpB,EAAIiC,EAAEjC,EAAIoB,EAAER,EAAIqB,EAAErB,EAAIQ,EAAE+gC,EAAIlgC,EAAEkgC,GAMlCD,EAAAx+B,MAAP,SAAatC,EAASa,GACpB,OAAO,IAAIigC,EACT9gC,EAAER,EAAIqB,EAAEkgC,EAAI/gC,EAAE+gC,EAAIlgC,EAAErB,EACpBQ,EAAE+gC,EAAIlgC,EAAEjC,EAAIoB,EAAEpB,EAAIiC,EAAEkgC,EACpB/gC,EAAEpB,EAAIiC,EAAErB,EAAIQ,EAAER,EAAIqB,EAAEjC,IAIjBkiC,EAAA9/B,IAAP,SAAWhB,EAASa,GAClB,OAAO,IAAIigC,EAAK9gC,EAAEpB,EAAIiC,EAAEjC,EAAGoB,EAAER,EAAIqB,EAAErB,EAAGQ,EAAE+gC,EAAIlgC,EAAEkgC,IAGzCD,EAAAv/B,IAAP,SAAWvB,EAASa,GAClB,OAAO,IAAIigC,EAAK9gC,EAAEpB,EAAIiC,EAAEjC,EAAGoB,EAAER,EAAIqB,EAAErB,EAAGQ,EAAE+gC,EAAIlgC,EAAEkgC,IAGzCD,EAAAt/B,IAAP,SAAWxB,EAASyB,GAClB,OAAO,IAAIq/B,EAAKr/B,EAAIzB,EAAEpB,EAAG6C,EAAIzB,EAAER,EAAGiC,EAAIzB,EAAE+gC,IAG1CD,EAAAlkC,UAAAoG,IAAA,WAIE,OAHA7F,KAAKyB,GAAKzB,KAAKyB,EACfzB,KAAKqC,GAAKrC,KAAKqC,EACfrC,KAAK4jC,GAAK5jC,KAAK4jC,EACR5jC,MAGF2jC,EAAG99B,IAAV,SAAWhD,GACT,OAAO,IAAI8gC,GAAM9gC,EAAEpB,GAAIoB,EAAER,GAAIQ,EAAE+gC,IAElCD,KCjKDE,GAAA,SAAAC,GAiBE,SAAYD,EAAAE,EAAgBC,GAA5B,IAkBCryB,EAAA3R,KAhBC,OAA8B2R,aAAgBkyB,IAI9ClyB,EAAAmyB,cAAQ9jC,MAEHoW,OAASytB,EAAUI,KACxBtyB,EAAK0E,SAAWpN,EAASi7B,cAEzBvyB,EAAKwyB,UAAYJ,EAAK3hC,EAAKQ,MAAMmhC,GAAM3hC,EAAKM,OAC5CiP,EAAKyyB,UAAYJ,EAAK5hC,EAAKQ,MAAMohC,GAAM5hC,EAAKM,OAE5CiP,EAAK0yB,UAAYjiC,EAAKM,OACtBiP,EAAK2yB,UAAYliC,EAAKM,OACtBiP,EAAK4yB,cAAe,EACpB5yB,EAAK6yB,cAAe,KAdX,IAAIX,EAAUE,EAAIC,GAkQ/B,OAtR+BpkC,EAAKikC,EAAAC,GAsClCD,EAAApkC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OAEXquB,QAASzkC,KAAKmkC,UACdO,QAAS1kC,KAAKokC,UAEdO,QAAS3kC,KAAKqkC,UACdO,QAAS5kC,KAAKskC,UACdO,WAAY7kC,KAAKukC,aACjBO,WAAY9kC,KAAKwkC,eAKdX,EAAYthC,aAAnB,SAAoBC,GAClB,IAAM2U,EAAQ,IAAI0sB,EAAUrhC,EAAKiiC,QAASjiC,EAAKkiC,SAO/C,OANIvtB,EAAMotB,cACRptB,EAAM4tB,cAAcviC,EAAKmiC,SAEvBxtB,EAAMqtB,cACRrtB,EAAM6tB,cAAcxiC,EAAKoiC,SAEpBztB,GAIT0sB,EAAApkC,UAAA0Y,OAAA,aAIA0rB,EAAApkC,UAAAwlC,UAAA,WACE,OAAOjlC,KAAKqW,UAGdwtB,EAAApkC,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAIdytB,EAAOpkC,UAAAylC,QAAP,SAAQriC,GACN,OAAO7C,KAAKglC,cAAcniC,IAM5BghC,EAAapkC,UAAAulC,cAAb,SAAcniC,GAQZ,OAPIA,GACF7C,KAAKskC,UAAUhhC,QAAQT,GACvB7C,KAAKwkC,cAAe,IAEpBxkC,KAAKskC,UAAUnhC,UACfnD,KAAKwkC,cAAe,GAEfxkC,MAMT6jC,EAAApkC,UAAA0lC,cAAA,WACE,OAAOnlC,KAAKskC,WAIdT,EAAOpkC,UAAA2lC,QAAP,SAAQviC,GACN,OAAO7C,KAAK+kC,cAAcliC,IAM5BghC,EAAapkC,UAAAslC,cAAb,SAAcliC,GAQZ,OAPIA,GACF7C,KAAKqkC,UAAU/gC,QAAQT,GACvB7C,KAAKukC,cAAe,IAEpBvkC,KAAKqkC,UAAUlhC,UACfnD,KAAKukC,cAAe,GAEfvkC,MAMT6jC,EAAApkC,UAAA4lC,cAAA,WACE,OAAOrlC,KAAKqkC,WAMdR,EAAApkC,UAAA6lC,KAAA,SAAKvB,EAAUC,GAKb,OAJAhkC,KAAKmkC,UAAU7gC,QAAQygC,GACvB/jC,KAAKokC,UAAU9gC,QAAQ0gC,GACvBhkC,KAAKukC,cAAe,EACpBvkC,KAAKwkC,cAAe,EACbxkC,MAST6jC,EAAApkC,UAAA8lC,OAAA,WACE,IAAM3iC,EAAQ,IAAIihC,EASlB,OARAjhC,EAAMwT,OAASpW,KAAKoW,OACpBxT,EAAMyT,SAAWrW,KAAKqW,SACtBzT,EAAMuhC,UAAU7gC,QAAQtD,KAAKmkC,WAC7BvhC,EAAMwhC,UAAU9gC,QAAQtD,KAAKokC,WAC7BxhC,EAAMyhC,UAAU/gC,QAAQtD,KAAKqkC,WAC7BzhC,EAAM0hC,UAAUhhC,QAAQtD,KAAKskC,WAC7B1hC,EAAM2hC,aAAevkC,KAAKukC,aAC1B3hC,EAAM4hC,aAAexkC,KAAKwkC,aACnB5hC,GAMTihC,EAAApkC,UAAAwY,cAAA,WACE,OAAO,GAUT4rB,EAAApkC,UAAAia,UAAA,SAAU/E,EAAenV,GACvB,OAAO,GAWTqkC,EAAOpkC,UAAAyI,QAAP,SAAQnH,EAAuBF,EAAqB8T,EAAeqC,GASjE,IAAM1O,EAAK6K,EAAImB,SAASK,EAAGD,EAAGtS,EAAKgC,IAAIvD,EAAMyH,GAAIqM,EAAGnV,IAC9C+I,EAAK4K,EAAImB,SAASK,EAAGD,EAAGtS,EAAKgC,IAAIvD,EAAM0H,GAAIoM,EAAGnV,IAC9CN,EAAIkD,EAAKgC,IAAImE,EAAID,GAEjBy7B,EAAK/jC,KAAKmkC,UACVH,EAAKhkC,KAAKokC,UACVoB,EAAIpjC,EAAKgC,IAAI4/B,EAAID,GACjBt7B,EAASrG,EAAKO,IAAI6iC,EAAEnjC,GAAImjC,EAAE/jC,GAChCgH,EAAOhE,YAKP,IAAMghC,EAAYrjC,EAAK8C,IAAIuD,EAAQrG,EAAKgC,IAAI2/B,EAAIz7B,IAC1Co9B,EAActjC,EAAK8C,IAAIuD,EAAQvJ,GAErC,GAAmB,GAAfwmC,EACF,OAAO,EAGT,IAAMrlC,EAAIolC,EAAYC,EACtB,GAAIrlC,EAAI,GAAOQ,EAAMkI,YAAc1I,EACjC,OAAO,EAGT,IAAMqU,EAAItS,EAAKyB,IAAIyE,EAAIlG,EAAKuD,WAAWtF,EAAGnB,IAIpCkH,EAAIhE,EAAKgC,IAAI4/B,EAAID,GACjB4B,EAAKvjC,EAAK8C,IAAIkB,EAAGA,GACvB,GAAU,GAANu/B,EACF,OAAO,EAGT,IAAMrlC,EAAI8B,EAAK8C,IAAI9C,EAAKgC,IAAIsQ,EAAGqvB,GAAK39B,GAAKu/B,EACzC,QAAIrlC,EAAI,GAAO,EAAMA,KAIrBS,EAAOiI,SAAW3I,EAEhBU,EAAO0H,OADLg9B,EAAY,EACEtyB,EAAIe,QAAQS,EAAGD,EAAGjM,GAAQ5C,MAE1BsN,EAAIe,QAAQS,EAAGD,EAAGjM,IAE7B,IAWTo7B,EAAApkC,UAAAua,YAAA,SAAY1S,EAAYqN,EAAeqC,GACrC,IAAM+sB,EAAKxvB,EAAUL,QAAQS,EAAI3U,KAAKmkC,WAChCH,EAAKzvB,EAAUL,QAAQS,EAAI3U,KAAKokC,WAEtC98B,EAAKD,cAAc08B,EAAIC,GACvB18B,EAAKG,OAAOzH,KAAKqW,WAUnBwtB,EAAApkC,UAAAoa,YAAA,SAAYD,EAAoBnD,GAC9BmD,EAASmD,KAAO,EAChBnD,EAASoD,OAAOrZ,WAAW,GAAK3D,KAAKmkC,UAAW,GAAKnkC,KAAKokC,WAC1DxqB,EAASqD,EAAI,GAGf4mB,EAAoBpkC,UAAAipB,qBAApB,SAAqB3O,GACnBA,EAAMsO,WAAWzc,KAAK5L,KAAKmkC,WAC3BpqB,EAAMsO,WAAWzc,KAAK5L,KAAKokC,WAC3BrqB,EAAMsN,QAAU,EAChBtN,EAAM1D,SAAWrW,KAAKqW,UAnRjBwtB,EAAII,KAAG,OAqRfJ,EAtRD,CAA+B1tB,GAwRlByvB,GAAO/B,GCpRpBgC,GAAA,SAAA/B,GAeE,SAAY+B,EAAA/e,EAAwBgf,GAApC,IA0BCn0B,EAAA3R,KAxBC,OAA8B2R,aAAgBk0B,IAI9Cl0B,EAAAmyB,cAAQ9jC,MAEHoW,OAASyvB,EAAW5B,KACzBtyB,EAAK0E,SAAWpN,EAASi7B,cACzBvyB,EAAK0W,WAAa,GAClB1W,EAAK0V,QAAU,EACf1V,EAAKo0B,aAAe,KACpBp0B,EAAKq0B,aAAe,KACpBr0B,EAAKs0B,iBAAkB,EACvBt0B,EAAKu0B,iBAAkB,EAEvBv0B,EAAKw0B,WAAaL,EAEdhf,GAAYA,EAASpmB,SACnBolC,EACFn0B,EAAKy0B,YAAYtf,GAEjBnV,EAAK00B,aAAavf,OApBb,IAAI+e,EAAW/e,EAAUgf,GAgTtC,OAlUgClmC,EAAKimC,EAAA/B,GA4CnC+B,EAAApmC,UAAA6C,WAAA,WACE,IAAME,EAAO,CACX2Z,KAAMnc,KAAKoW,OACX0Q,SAAU9mB,KAAKqoB,WACfie,OAAQtmC,KAAKmmC,SACbI,cAAevmC,KAAKimC,gBACpBO,cAAexmC,KAAKkmC,gBACpBO,WAAY,KACZC,WAAY,MAQd,OANI1mC,KAAK+lC,eACPvjC,EAAKikC,WAAazmC,KAAK+lC,cAErB/lC,KAAKgmC,eACPxjC,EAAKkkC,WAAa1mC,KAAKgmC,cAElBxjC,GAIFqjC,EAAAtjC,aAAP,SAAoBC,EAAWuU,EAAc6B,GAC3C,IAAMkO,EAAmB,GACzB,GAAItkB,EAAKskB,SACP,IAAK,IAAIvmB,EAAI,EAAGA,EAAIiC,EAAKskB,SAASpmB,OAAQH,IACxCumB,EAASlb,KAAKgN,EAAQxW,EAAMI,EAAKskB,SAASvmB,KAG9C,IAAM4W,EAAQ,IAAI0uB,EAAW/e,EAAUtkB,EAAK8jC,QAO5C,OANI9jC,EAAKikC,YACPtvB,EAAM4tB,cAAcviC,EAAKikC,YAEvBjkC,EAAKkkC,YACPvvB,EAAM6tB,cAAcxiC,EAAKkkC,YAEpBvvB,GAQT0uB,EAAApmC,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAGdyvB,EAAApmC,UAAAwlC,UAAA,WACE,OAAOjlC,KAAKqW,UAUdwvB,EAAWpmC,UAAA2mC,YAAX,SAAYtf,GAGV,IAAK,IAAIvmB,EAAI,EAAGA,EAAIumB,EAASpmB,SAAUH,EAC1BumB,EAASvmB,EAAI,GACbumB,EAASvmB,GAKtBP,KAAKqoB,WAAa,GAClBroB,KAAKqnB,QAAUP,EAASpmB,OAAS,EACjC,IAASH,EAAI,EAAGA,EAAIumB,EAASpmB,SAAUH,EACrCP,KAAKqoB,WAAW9nB,GAAK6B,EAAKQ,MAAMkkB,EAASvmB,IAQ3C,OANAP,KAAKqoB,WAAWvB,EAASpmB,QAAU0B,EAAKQ,MAAMkkB,EAAS,IAEvD9mB,KAAK+lC,aAAe/lC,KAAKqoB,WAAWroB,KAAKqnB,QAAU,GACnDrnB,KAAKgmC,aAAehmC,KAAKqoB,WAAW,GACpCroB,KAAKimC,iBAAkB,EACvBjmC,KAAKkmC,iBAAkB,EAChBlmC,MAUT6lC,EAAYpmC,UAAA4mC,aAAZ,SAAavf,GAGX,IAAK,IAAIvmB,EAAI,EAAGA,EAAIumB,EAASpmB,SAAUH,EAE1BumB,EAASvmB,EAAI,GACbumB,EAASvmB,GAItBP,KAAKqnB,QAAUP,EAASpmB,OACxB,IAASH,EAAI,EAAGA,EAAIumB,EAASpmB,SAAUH,EACrCP,KAAKqoB,WAAW9nB,GAAK6B,EAAKQ,MAAMkkB,EAASvmB,IAO3C,OAJAP,KAAKimC,iBAAkB,EACvBjmC,KAAKkmC,iBAAkB,EACvBlmC,KAAK+lC,aAAe,KACpB/lC,KAAKgmC,aAAe,KACbhmC,MAIT6lC,EAAApmC,UAAA0Y,OAAA,WACMnY,KAAKmmC,SACPnmC,KAAKomC,YAAYpmC,KAAKqoB,YAEtBroB,KAAKqmC,aAAarmC,KAAKqoB,aAQ3Bwd,EAAapmC,UAAAslC,cAAb,SAAc0B,GACZzmC,KAAK+lC,aAAeU,EACpBzmC,KAAKimC,iBAAkB,GAGzBJ,EAAApmC,UAAA4lC,cAAA,WACE,OAAOrlC,KAAK+lC,cAOdF,EAAapmC,UAAAulC,cAAb,SAAc0B,GACZ1mC,KAAKgmC,aAAeU,EACpB1mC,KAAKkmC,iBAAkB,GAGzBL,EAAApmC,UAAA0lC,cAAA,WACE,OAAOnlC,KAAKgmC,cASdH,EAAApmC,UAAA8lC,OAAA,WACE,IAAM3iC,EAAQ,IAAIijC,EAQlB,OAPAjjC,EAAMyjC,aAAarmC,KAAKqoB,YACxBzlB,EAAMwT,OAASpW,KAAKoW,OACpBxT,EAAMyT,SAAWrW,KAAKqW,SACtBzT,EAAMmjC,aAAe/lC,KAAK+lC,aAC1BnjC,EAAMojC,aAAehmC,KAAKgmC,aAC1BpjC,EAAMqjC,gBAAkBjmC,KAAKimC,gBAC7BrjC,EAAMsjC,gBAAkBlmC,KAAKkmC,gBACtBtjC,GAMTijC,EAAApmC,UAAAwY,cAAA,WAEE,OAAOjY,KAAKqnB,QAAU,GAIxBwe,EAAApmC,UAAAknC,aAAA,SAAazrB,EAAiBlE,GAE5BkE,EAAK9E,OAASytB,GAAUI,KACxB/oB,EAAK7E,SAAWrW,KAAKqW,SAErB6E,EAAKipB,UAAYnkC,KAAKqoB,WAAWrR,GACjCkE,EAAKkpB,UAAYpkC,KAAKqoB,WAAWrR,EAAa,GAE1CA,EAAa,GACfkE,EAAKmpB,UAAYrkC,KAAKqoB,WAAWrR,EAAa,GAC9CkE,EAAKqpB,cAAe,IAEpBrpB,EAAKmpB,UAAYrkC,KAAK+lC,aACtB7qB,EAAKqpB,aAAevkC,KAAKimC,iBAGvBjvB,EAAahX,KAAKqnB,QAAU,GAC9BnM,EAAKopB,UAAYtkC,KAAKqoB,WAAWrR,EAAa,GAC9CkE,EAAKspB,cAAe,IAEpBtpB,EAAKopB,UAAYtkC,KAAKgmC,aACtB9qB,EAAKspB,aAAexkC,KAAKkmC,kBAI7BL,EAASpmC,UAAAmoB,UAAT,SAAU/Z,GAER,OAAIA,EAAQ7N,KAAKqnB,QACRrnB,KAAKqoB,WAAWxa,GAEhB7N,KAAKqoB,WAAW,IAI3Bwd,EAAApmC,UAAA6mC,OAAA,WACE,OAAOtmC,KAAKmmC,UAYdN,EAAApmC,UAAAia,UAAA,SAAU/E,EAAenV,GACvB,OAAO,GAWTqmC,EAAOpmC,UAAAyI,QAAP,SAAQnH,EAAuBF,EAAqB8T,EAAeqC,GAIjE,OADkB,IAAI6sB,GAAU7jC,KAAK4nB,UAAU5Q,GAAahX,KAAK4nB,UAAU5Q,EAAa,IACvE9O,QAAQnH,EAAQF,EAAO8T,EAAI,IAW9CkxB,EAAApmC,UAAAua,YAAA,SAAY1S,EAAYqN,EAAeqC,GAGrC,IAAM+sB,EAAKxvB,EAAUL,QAAQS,EAAI3U,KAAK4nB,UAAU5Q,IAC1CgtB,EAAKzvB,EAAUL,QAAQS,EAAI3U,KAAK4nB,UAAU5Q,EAAa,IAE7D1P,EAAKD,cAAc08B,EAAIC,IAYzB6B,EAAApmC,UAAAoa,YAAA,SAAYD,EAAoBnD,GAC9BmD,EAASmD,KAAO,EAChBnD,EAASoD,OAAS5a,EAAKM,OACvBkX,EAASqD,EAAI,GAGf4oB,EAAApmC,UAAAipB,qBAAA,SAAqB3O,EAAsB/C,GAEzC+C,EAAMqO,SAAS,GAAKpoB,KAAK4nB,UAAU5Q,GACnC+C,EAAMqO,SAAS,GAAKpoB,KAAK4nB,UAAU5Q,EAAa,GAChD+C,EAAMsO,WAAatO,EAAMqO,SACzBrO,EAAMsN,QAAU,EAChBtN,EAAM1D,SAAWrW,KAAKqW,UA/TjBwvB,EAAI5B,KAAG,QAiUf4B,EAlUD,CAAgC1vB,GAoUnBywB,GAAQf,GCrUrBgB,GAAA,SAAA/C,GAWE,SAAA+C,EAAY/f,GAAZ,IAkBCnV,EAAA3R,KAhBC,OAA8B2R,aAAgBk1B,IAI9Cl1B,EAAAmyB,cAAQ9jC,MAEHoW,OAASywB,EAAa5C,KAC3BtyB,EAAK0E,SAAWpN,EAASi7B,cACzBvyB,EAAKm1B,WAAa1kC,EAAKM,OACvBiP,EAAK0W,WAAa,GAClB1W,EAAKo1B,UAAY,GACjBp1B,EAAK0V,QAAU,EAEXP,GAAYA,EAASpmB,QACvBiR,EAAK2zB,KAAKxe,MAbH,IAAI+f,EAAa/f,GA4d9B,OA1ekClnB,EAAKinC,EAAA/C,GAgCrC+C,EAAApnC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OAEX0Q,SAAU9mB,KAAKqoB,aAKZwe,EAAAtkC,aAAP,SAAoBC,EAAWuU,EAAc6B,GAC3C,IAAMkO,EAAmB,GACzB,GAAItkB,EAAKskB,SACP,IAAK,IAAIvmB,EAAI,EAAGA,EAAIiC,EAAKskB,SAASpmB,OAAQH,IACxCumB,EAASlb,KAAKgN,EAAQxW,EAAMI,EAAKskB,SAASvmB,KAK9C,OADc,IAAIsmC,EAAa/f,IAIjC+f,EAAApnC,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAGdywB,EAAApnC,UAAAwlC,UAAA,WACE,OAAOjlC,KAAKqW,UAGdwwB,EAASpnC,UAAAmoB,UAAT,SAAU/Z,GAER,OAAO7N,KAAKqoB,WAAWxa,IASzBg5B,EAAApnC,UAAA8lC,OAAA,WACE,IAAM3iC,EAAQ,IAAIikC,EAClBjkC,EAAMwT,OAASpW,KAAKoW,OACpBxT,EAAMyT,SAAWrW,KAAKqW,SACtBzT,EAAMykB,QAAUrnB,KAAKqnB,QACrBzkB,EAAMkkC,WAAWxjC,QAAQtD,KAAK8mC,YAC9B,IAAK,IAAIvmC,EAAI,EAAGA,EAAIP,KAAKqnB,QAAS9mB,IAChCqC,EAAMylB,WAAWzc,KAAK5L,KAAKqoB,WAAW9nB,GAAGqC,SAE3C,IAASrC,EAAI,EAAGA,EAAIP,KAAK+mC,UAAUrmC,OAAQH,IACzCqC,EAAMmkC,UAAUn7B,KAAK5L,KAAK+mC,UAAUxmC,GAAGqC,SAEzC,OAAOA,GAMTikC,EAAApnC,UAAAwY,cAAA,WACE,OAAO,GAIT4uB,EAAApnC,UAAA0Y,OAAA,WACEnY,KAAKslC,KAAKtlC,KAAKqoB,aAajBwe,EAAIpnC,UAAA6lC,KAAJ,SAAKxe,GAEH,GAAIA,EAASpmB,OAAS,EACpBV,KAAKgnC,UAAU,EAAK,OADtB,CASA,IAJA,IAAIxmC,EAAIc,EAAKU,IAAI8kB,EAASpmB,OAAQuI,EAASU,oBAGrCs9B,EAAa,GACV1mC,EAAI,EAAGA,EAAIC,IAAKD,EAAG,CAI1B,IAHA,IAAMsC,EAAIikB,EAASvmB,GAEf2mC,GAAS,EACJz2B,EAAI,EAAGA,EAAIw2B,EAAGvmC,SAAU+P,EAC/B,GAAIrO,EAAK2C,gBAAgBlC,EAAGokC,EAAGx2B,IAAM,IAAOxH,EAASk+B,kBAAmB,CACtED,GAAS,EACT,MAIAA,GACFD,EAAGr7B,KAAKxJ,EAAKQ,MAAMC,IAKvB,IADArC,EAAIymC,EAAGvmC,QACC,EAGNV,KAAKgnC,UAAU,EAAK,OAHtB,CAWA,IAAII,EAAK,EACLC,EAAKJ,EAAG,GAAGxlC,EACf,IAASlB,EAAI,EAAGA,EAAIC,IAAKD,EAAG,CAC1B,IAAMkB,EAAIwlC,EAAG1mC,GAAGkB,GACZA,EAAI4lC,GAAO5lC,IAAM4lC,GAAMJ,EAAG1mC,GAAG8B,EAAI4kC,EAAGG,GAAI/kC,KAC1C+kC,EAAK7mC,EACL8mC,EAAK5lC,GAQT,IAJA,IAAM6lC,EAAO,GACThjC,EAAI,EACJijC,EAAKH,IAEI,CACXE,EAAKhjC,GAAKijC,EAEV,IAAIC,EAAK,EACT,IAAS/2B,EAAI,EAAGA,EAAIjQ,IAAKiQ,EACvB,GAAI+2B,IAAOD,EAAX,CAKA,IAAMnhC,EAAIhE,EAAKgC,IAAI6iC,EAAGO,GAAKP,EAAGK,EAAKhjC,KAE7B+M,GADAxO,EAAIT,EAAKgC,IAAI6iC,EAAGx2B,GAAIw2B,EAAGK,EAAKhjC,KACxBlC,EAAKgD,cAAcgB,EAAGvD,IAE5BwO,EAAI,IACNm2B,EAAK/2B,GAIG,IAANY,GAAaxO,EAAE2B,gBAAkB4B,EAAE5B,kBACrCgjC,EAAK/2B,QAdL+2B,EAAK/2B,EAqBT,KAHEnM,EACFijC,EAAKC,EAEDA,IAAOJ,EACT,MAIJ,GAAI9iC,EAAI,EAGNtE,KAAKgnC,UAAU,EAAK,OAHtB,CAOAhnC,KAAKqnB,QAAU/iB,EAGftE,KAAKqoB,WAAa,GAClB,IAAS9nB,EAAI,EAAGA,EAAI+D,IAAK/D,EACvBP,KAAKqoB,WAAW9nB,GAAK0mC,EAAGK,EAAK/mC,IAI/B,IAASA,EAAI,EAAGA,EAAI+D,IAAK/D,EAAG,CAC1B,IAAMknC,EAAKlnC,EACLmnC,EAAKnnC,EAAI,EAAI+D,EAAI/D,EAAI,EAAI,EACzB2a,EAAO9Y,EAAKgC,IAAIpE,KAAKqoB,WAAWqf,GAAK1nC,KAAKqoB,WAAWof,IAE3DznC,KAAK+mC,UAAUxmC,GAAK6B,EAAKiD,aAAa6V,EAAM,GAC5Clb,KAAK+mC,UAAUxmC,GAAGkE,YAIpBzE,KAAK8mC,WAgRT,SAAyBa,EAAYv3B,GAmBnC,IAhBA,IAAMiB,EAAIjP,EAAKM,OACXoL,EAAO,EAIL85B,EAAOxlC,EAAKM,OASZmlC,EAAO,EAAM,EAEVtnC,EAAI,EAAGA,EAAI6P,IAAS7P,EAAG,CAE9B,IAAM+H,EAAKs/B,EACLr/B,EAAKo/B,EAAGpnC,GACRunC,EAAKvnC,EAAI,EAAI6P,EAAQu3B,EAAGpnC,EAAI,GAAKonC,EAAG,GAEpCI,EAAK3lC,EAAKgC,IAAImE,EAAID,GAClB0/B,EAAK5lC,EAAKgC,IAAI0jC,EAAIx/B,GAIlB2/B,EAAe,GAFX7lC,EAAKgD,cAAc2iC,EAAIC,GAGjCl6B,GAAQm6B,EAGR52B,EAAErN,OAAOikC,EAAeJ,EAAMv/B,GAC9B+I,EAAErN,OAAOikC,EAAeJ,EAAMt/B,GAC9B8I,EAAErN,OAAOikC,EAAeJ,EAAMC,GAMhC,OADAz2B,EAAEhN,IAAI,EAAMyJ,GACLuD,EA1Ta62B,CAAgBloC,KAAKqoB,WAAY/jB,OAIrDuiC,EAASpnC,UAAAunC,UAAT,SAAUmB,EAAYC,EAAYprB,EAAoB5J,GAcpD,GAZApT,KAAKqoB,WAAW,GAAKjmB,EAAKO,IAAIwlC,GAAKC,GACnCpoC,KAAKqoB,WAAW,GAAKjmB,EAAKO,IAAIwlC,EAAIC,GAClCpoC,KAAKqoB,WAAW,GAAKjmB,EAAKO,KAAKwlC,EAAIC,GACnCpoC,KAAKqoB,WAAW,GAAKjmB,EAAKO,KAAKwlC,GAAKC,GAEpCpoC,KAAK+mC,UAAU,GAAK3kC,EAAKO,IAAI,EAAK,GAClC3C,KAAK+mC,UAAU,GAAK3kC,EAAKO,IAAI,EAAK,GAClC3C,KAAK+mC,UAAU,GAAK3kC,EAAKO,KAAK,EAAK,GACnC3C,KAAK+mC,UAAU,GAAK3kC,EAAKO,IAAI,GAAM,GAEnC3C,KAAKqnB,QAAU,EAEXjlB,EAAKa,QAAQ+Z,GAAS,CACxB5J,EAAQA,GAAS,EAEjBpT,KAAK8mC,WAAWxjC,QAAQ0Z,GAExB,IAAMrI,EAAKJ,EAAUd,WACrBkB,EAAGnV,EAAE8D,QAAQ0Z,GACbrI,EAAGD,EAAErB,SAASD,GAGd,IAAK,IAAI7S,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAClCP,KAAKqoB,WAAW9nB,GAAKgU,EAAUL,QAAQS,EAAI3U,KAAKqoB,WAAW9nB,IAC3DP,KAAK+mC,UAAUxmC,GAAK4S,EAAIe,QAAQS,EAAGD,EAAG1U,KAAK+mC,UAAUxmC,MAY3DsmC,EAAApnC,UAAAia,UAAA,SAAU/E,EAAenV,GAGvB,IAFA,IAAM6oC,EAASl1B,EAAImB,SAASK,EAAGD,EAAGtS,EAAKgC,IAAI5E,EAAGmV,EAAGnV,IAExCe,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,CAErC,GADY6B,EAAK8C,IAAIlF,KAAK+mC,UAAUxmC,GAAI6B,EAAKgC,IAAIikC,EAAQroC,KAAKqoB,WAAW9nB,KAC/D,EACR,OAAO,EAIX,OAAO,GAWTsmC,EAAOpnC,UAAAyI,QAAP,SAAQnH,EAAuBF,EAAqB8T,EAAeqC,GAYjE,IATA,IAAM1O,EAAK6K,EAAImB,SAASK,EAAGD,EAAGtS,EAAKgC,IAAIvD,EAAMyH,GAAIqM,EAAGnV,IAC9C+I,EAAK4K,EAAImB,SAASK,EAAGD,EAAGtS,EAAKgC,IAAIvD,EAAM0H,GAAIoM,EAAGnV,IAC9CN,EAAIkD,EAAKgC,IAAImE,EAAID,GAEnBrC,EAAQ,EACRD,EAAQnF,EAAMkI,YAEd8E,GAAS,EAEJtN,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,CAIrC,IAAMklC,EAAYrjC,EAAK8C,IAAIlF,KAAK+mC,UAAUxmC,GAAI6B,EAAKgC,IAAIpE,KAAKqoB,WAAW9nB,GAAI+H,IACrEo9B,EAActjC,EAAK8C,IAAIlF,KAAK+mC,UAAUxmC,GAAIrB,GAEhD,GAAmB,GAAfwmC,GACF,GAAID,EAAY,EACd,OAAO,OAOLC,EAAc,GAAOD,EAAYx/B,EAAQy/B,GAG3Cz/B,EAAQw/B,EAAYC,EACpB73B,EAAQtN,GACCmlC,EAAc,GAAOD,EAAYz/B,EAAQ0/B,IAGlD1/B,EAAQy/B,EAAYC,GAQxB,GAAI1/B,EAAQC,EACV,OAAO,EAMX,OAAI4H,GAAS,IACX9M,EAAOiI,SAAW/C,EAClBlF,EAAO0H,OAAS0K,EAAIe,QAAQS,EAAGD,EAAG1U,KAAK+mC,UAAUl5B,KAC1C,IAcXg5B,EAAApnC,UAAAua,YAAA,SAAY1S,EAAYqN,EAAeqC,GAKrC,IAJA,IAAIsxB,EAAOlgC,EAAAA,EACPmgC,EAAOngC,EAAAA,EACPogC,GAAQpgC,EAAAA,EACRqgC,GAAQrgC,EAAAA,EACH7H,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,CACrC,IAAMsC,EAAI0R,EAAUL,QAAQS,EAAI3U,KAAKqoB,WAAW9nB,IAChD+nC,EAAOhnC,EAAKU,IAAIsmC,EAAMzlC,EAAEpB,GACxB+mC,EAAOlnC,EAAKW,IAAIumC,EAAM3lC,EAAEpB,GACxB8mC,EAAOjnC,EAAKU,IAAIumC,EAAM1lC,EAAER,GACxBomC,EAAOnnC,EAAKW,IAAIwmC,EAAM5lC,EAAER,GAG1BiF,EAAKd,WAAWnD,OAAOilC,EAAMC,GAC7BjhC,EAAKb,WAAWpD,OAAOmlC,EAAMC,GAC7BnhC,EAAKG,OAAOzH,KAAKqW,WAUnBwwB,EAAApnC,UAAAoa,YAAA,SAAYD,EAAoBnD,GAoC9B,IATA,IAAMuG,EAAS5a,EAAKM,OAChBoL,EAAO,EACPmP,EAAI,EAIF3c,EAAI8B,EAAKM,OAGNnC,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAClCD,EAAEuD,IAAI7D,KAAKqoB,WAAW9nB,IAExBD,EAAE+D,IAAI,EAAMrE,KAAKqnB,SAEjB,IAAMqhB,EAAS,EAAM,EAErB,IAASnoC,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAAG,CAErC,IAAMwnC,EAAK3lC,EAAKgC,IAAIpE,KAAKqoB,WAAW9nB,GAAID,GAClC0nC,EAAKznC,EAAI,EAAIP,KAAKqnB,QAAUjlB,EAAKgC,IAAIpE,KAAKqoB,WAAW9nB,EAAI,GAAID,GAAK8B,EAAMgC,IAAIpE,KAAKqoB,WAAW,GAAI/nB,GAEhG2O,EAAI7M,EAAKgD,cAAc2iC,EAAIC,GAE3BC,EAAe,GAAMh5B,EAC3BnB,GAAQm6B,EAGRjrB,EAAOjZ,WAAWkkC,EAAeS,EAAQX,EAAIE,EAAeS,EAAQV,GAEpE,IAAMW,EAAMZ,EAAGtmC,EACTmnC,EAAMb,EAAG1lC,EACTwmC,EAAMb,EAAGvmC,EACTqnC,EAAMd,EAAG3lC,EAKf4a,GAAM,IAAOyrB,EAASz5B,GAHR05B,EAAMA,EAAME,EAAMF,EAAME,EAAMA,GAC9BD,EAAMA,EAAME,EAAMF,EAAME,EAAMA,IAM9ClvB,EAASmD,KAAOtG,EAAU3I,EAI1BkP,EAAO3Y,IAAI,EAAMyJ,GACjB8L,EAASoD,OAAOrZ,WAAW,EAAGqZ,EAAQ,EAAG1c,GAGzCsZ,EAASqD,EAAIxG,EAAUwG,EAGvBrD,EAASqD,GAAKrD,EAASmD,MAAQ3a,EAAK8C,IAAI0U,EAASoD,OAAQpD,EAASoD,QAAU5a,EAAK8C,IAAI8X,EAAQA,KAO/F6pB,EAAApnC,UAAAsQ,SAAA,WACE,IAAK,IAAIxP,EAAI,EAAGA,EAAIP,KAAKqnB,UAAW9mB,EAMlC,IALA,IAAMknC,EAAKlnC,EACLmnC,EAAKnnC,EAAIP,KAAKqnB,QAAU,EAAIogB,EAAK,EAAI,EACrCjoC,EAAIQ,KAAKqoB,WAAWof,GACpBjC,EAAIpjC,EAAKgC,IAAIpE,KAAKqoB,WAAWqf,GAAKloC,GAE/BiR,EAAI,EAAGA,EAAIzQ,KAAKqnB,UAAW5W,EAClC,GAAIA,GAAKg3B,GAAMh3B,GAAKi3B,EAApB,CAIA,IAAM7kC,EAAIT,EAAKgC,IAAIpE,KAAKqoB,WAAW5X,GAAIjR,GAEvC,GADU4C,EAAKgD,cAAcogC,EAAG3iC,GACxB,EACN,OAAO,EAKb,OAAO,GAGTgkC,EAAoBpnC,UAAAipB,qBAApB,SAAqB3O,GACnBA,EAAMsO,WAAaroB,KAAKqoB,WACxBtO,EAAMsN,QAAUrnB,KAAKqnB,QACrBtN,EAAM1D,SAAWrW,KAAKqW,UAvejBwwB,EAAI5C,KAAG,UAyef4C,EA1eD,CAAkC1wB,GAyhB3B,IAAM4yB,GAAUlC,GCpiBvBmC,GAAA,SAAAlF,GAGE,SAAAkF,EAAYb,EAAYC,EAAYprB,EAAoB5J,GAAxD,IASCzB,EAAA3R,KAPC,OAA8B2R,aAAgBq3B,IAI9Cr3B,EAAAmyB,cAAQ9jC,MAEHgnC,UAAUmB,EAAIC,EAAIprB,EAAQ5J,MALtB,IAAI41B,EAASb,EAAIC,EAAIprB,EAAQ5J,GAO1C,OAb8BxT,EAAYopC,EAAAlF,GACjCkF,EAAI/E,KAAG,UAYf+E,EAbD,CAA8BnC,IAejBoC,GAAMD,GCXnBE,GAAA,SAAApF,GAUE,SAAYoF,EAAAzlC,EAAGtE,GAAf,IAsBCwS,EAAA3R,KApBC,OAA8B2R,aAAgBu3B,IAI9Cv3B,EAAAmyB,cAAQ9jC,MAEHoW,OAAS8yB,EAAYjF,KAC1BtyB,EAAKw3B,IAAM/mC,EAAKM,OAChBiP,EAAK0E,SAAW,EAEC,iBAAN5S,GAAkBrB,EAAKa,QAAQQ,IACxCkO,EAAKw3B,IAAI7lC,QAAQG,GAEA,iBAANtE,IACTwS,EAAK0E,SAAWlX,IAGI,iBAANsE,IAChBkO,EAAK0E,SAAW5S,MAjBT,IAAIylC,EAAYzlC,EAAGtE,GA2KhC,OAxLiCS,EAAKspC,EAAApF,GAmCpCoF,EAAAzpC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OAEX5W,EAAGQ,KAAKmpC,IACRC,OAAQppC,KAAKqW,WAKV6yB,EAAY3mC,aAAnB,SAAoBC,GAClB,OAAO,IAAI0mC,EAAY1mC,EAAKhD,EAAGgD,EAAK4mC,SAItCF,EAAAzpC,UAAA0Y,OAAA,aAIA+wB,EAAAzpC,UAAAoZ,QAAA,WACE,OAAO7Y,KAAKoW,QAGd8yB,EAAAzpC,UAAAwlC,UAAA,WACE,OAAOjlC,KAAKqW,UAGd6yB,EAAAzpC,UAAAiH,UAAA,WACE,OAAO1G,KAAKmpC,KAGdD,EAASzpC,UAAAmoB,UAAT,SAAU/Z,GAER,OAAO7N,KAAKmpC,KASdD,EAAAzpC,UAAA8lC,OAAA,WACE,IAAM3iC,EAAQ,IAAIsmC,EAIlB,OAHAtmC,EAAMwT,OAASpW,KAAKoW,OACpBxT,EAAMyT,SAAWrW,KAAKqW,SACtBzT,EAAMumC,IAAMnpC,KAAKmpC,IAAIvmC,QACdA,GAMTsmC,EAAAzpC,UAAAwY,cAAA,WACE,OAAO,GAUTixB,EAAAzpC,UAAAia,UAAA,SAAU/E,EAAenV,GACvB,IAAMwd,EAAS5a,EAAKyB,IAAI8Q,EAAGnV,EAAG2T,EAAIe,QAAQS,EAAGD,EAAG1U,KAAKmpC,MAC/CjqC,EAAIkD,EAAKgC,IAAI5E,EAAGwd,GACtB,OAAO5a,EAAK8C,IAAIhG,EAAGA,IAAMc,KAAKqW,SAAWrW,KAAKqW,UAWhD6yB,EAAOzpC,UAAAyI,QAAP,SAAQnH,EAAuBF,EAAqB8T,EAAeqC,GAMjE,IAAMxC,EAAWpS,EAAKyB,IAAI8Q,EAAGnV,EAAG2T,EAAIe,QAAQS,EAAGD,EAAG1U,KAAKmpC,MACjD7oC,EAAI8B,EAAKgC,IAAIvD,EAAMyH,GAAIkM,GACvBrV,EAAIiD,EAAK8C,IAAI5E,EAAGA,GAAKN,KAAKqW,SAAWrW,KAAKqW,SAG1CjQ,EAAIhE,EAAKgC,IAAIvD,EAAM0H,GAAI1H,EAAMyH,IAC7B+I,EAAIjP,EAAK8C,IAAI5E,EAAG8F,GAChBu/B,EAAKvjC,EAAK8C,IAAIkB,EAAGA,GACjBijC,EAAQh4B,EAAIA,EAAIs0B,EAAKxmC,EAG3B,GAAIkqC,EAAQ,GAAO1D,EAAKrkC,EAAKC,QAC3B,OAAO,EAIT,IAAIkC,IAAM4N,EAAI/P,EAAKqD,KAAK0kC,IAGxB,OAAI,GAAO5lC,GAAKA,GAAK5C,EAAMkI,YAAc48B,IACvCliC,GAAKkiC,EACL5kC,EAAOiI,SAAWvF,EAClB1C,EAAO0H,OAASrG,EAAKyB,IAAIvD,EAAG8B,EAAKuD,WAAWlC,EAAG2C,IAC/CrF,EAAO0H,OAAOhE,aACP,IAcXykC,EAAAzpC,UAAAua,YAAA,SAAY1S,EAAYqN,EAAeqC,GACrC,IAAMxX,EAAI4C,EAAKyB,IAAI8Q,EAAGnV,EAAG2T,EAAIe,QAAQS,EAAGD,EAAG1U,KAAKmpC,MAChD7hC,EAAKd,WAAWnD,OAAO7D,EAAEiC,EAAIzB,KAAKqW,SAAU7W,EAAE6C,EAAIrC,KAAKqW,UACvD/O,EAAKb,WAAWpD,OAAO7D,EAAEiC,EAAIzB,KAAKqW,SAAU7W,EAAE6C,EAAIrC,KAAKqW,WAUzD6yB,EAAAzpC,UAAAoa,YAAA,SAAYD,EAAoBnD,GAC9BmD,EAASmD,KAAOtG,EAAUnV,EAAKyI,GAAK/J,KAAKqW,SAAWrW,KAAKqW,SACzDuD,EAASoD,OAAShd,KAAKmpC,IAEvBvvB,EAASqD,EAAIrD,EAASmD,MACf,GAAM/c,KAAKqW,SAAWrW,KAAKqW,SAAWjU,EAAK8C,IAAIlF,KAAKmpC,IAAKnpC,KAAKmpC,OAGvED,EAAoBzpC,UAAAipB,qBAApB,SAAqB3O,GACnBA,EAAMsO,WAAWzc,KAAK5L,KAAKmpC,KAC3BpvB,EAAMsN,QAAU,EAChBtN,EAAM1D,SAAWrW,KAAKqW,UApLjB6yB,EAAIjF,KAAG,SAuLfiF,EAxLD,CAAiC/yB,GA0LpBmzB,GAASJ,GCpJhBK,GAAW,CACfC,YAAc,EACdC,aAAe,GAUjBC,GAAA,SAAA5F,GA2BE,SAAY4F,EAAAtyB,EAAuByM,EAAcC,EAAc6lB,EAAgBC,GAA/E,IA6CCj4B,EAAA3R,KA3CC,KAA8B2R,aAAgB+3B,GAC5C,OAAO,IAAIA,EAActyB,EAAKyM,EAAOC,EAAO6lB,EAASC,GAIvD,GAAI9lB,GAAS6lB,GAAY,WAAYA,GAAa,MAAO7lB,GAAW,MAAOA,EAAQ,CACjF,IAAMhb,EAAOgb,EACbA,EAAQ6lB,EACRA,EAAU7gC,SAGZsO,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASszB,EAAczF,KAG5BtyB,EAAKk4B,eAAiBznC,EAAKQ,MAAM+mC,EAAU9lB,EAAMN,cAAcomB,GAAWvyB,EAAI0yB,cAAgB1nC,EAAKM,QACnGiP,EAAKo4B,eAAiB3nC,EAAKQ,MAAMgnC,EAAU9lB,EAAMP,cAAcqmB,GAAWxyB,EAAI4yB,cAAgB5nC,EAAKM,QACnGiP,EAAKs4B,SAAW3oC,EAAKE,SAAS4V,EAAI1W,QAAU0W,EAAI1W,OAC9C0B,EAAKwC,SAASif,EAAMzC,cAAczP,EAAKk4B,gBAAiB/lB,EAAM1C,cAAczP,EAAKo4B,iBACnFp4B,EAAKu4B,cAAgB9yB,EAAIoyB,YACzB73B,EAAKw4B,eAAiB/yB,EAAIqyB,aAC1B93B,EAAKijB,UAAY,EACjBjjB,EAAKy4B,QAAU,EACfz4B,EAAK04B,OAAS,IAqTlB,OA7WmCzqC,EAAK8pC,EAAA5F,GA2EtC4F,EAAAjqC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBymB,YAAaxpC,KAAKkqC,cAClBT,aAAczpC,KAAKmqC,eAEnBL,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBrpC,OAAQV,KAAKiqC,SAEbvnB,QAAS1iB,KAAK40B,UACd0V,MAAOtqC,KAAKoqC,QACZG,KAAMvqC,KAAKqqC,SAKRX,EAAAnnC,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIguB,EAAclnC,IAKlCknC,EAAWjqC,UAAA+qC,YAAX,SAAYpzB,GAONA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,cAG9B5yB,EAAI1W,OAAS,EACfV,KAAKiqC,UAAY7yB,EAAI1W,OACZ0W,EAAI1W,OAAS,IACb0W,EAAIuyB,SAAWvyB,EAAIuyB,SAAWvyB,EAAIuyB,SAAWvyB,EAAIuyB,WAC1D3pC,KAAKiqC,SAAW7nC,EAAKwC,SACjB5E,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,gBAChC7pC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,mBAQxCL,EAAAjqC,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMdH,EAAAjqC,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAOdL,EAASjqC,UAAAkrC,UAAT,SAAUjqC,GACRV,KAAKiqC,SAAWvpC,GAMlBgpC,EAAAjqC,UAAAmrC,UAAA,WACE,OAAO5qC,KAAKiqC,UAGdP,EAAYjqC,UAAAorC,aAAZ,SAAaC,GACX9qC,KAAKkqC,cAAgBY,GAGvBpB,EAAAjqC,UAAAsrC,aAAA,WACE,OAAO/qC,KAAKkqC,eAGdR,EAAejqC,UAAAurC,gBAAf,SAAgBpZ,GACd5xB,KAAKmqC,eAAiBvY,GAGxB8X,EAAAjqC,UAAAwrC,gBAAA,WACE,OAAOjrC,KAAKmqC,gBAMdT,EAAAjqC,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCH,EAAAjqC,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCL,EAAgBjqC,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAKqrC,KAAKhnC,IAAIuqB,IAMvD8a,EAAiBjqC,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAO,GAGT8a,EAAuBjqC,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAM6Y,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBAC/DvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAC/DxrC,KAAKqrC,IAAMjpC,EAAKgC,IAAIhC,EAAKyB,IAAI8yB,EAAI32B,KAAKgsC,MAAO5pC,EAAKyB,IAAI6yB,EAAI12B,KAAK+rC,OAG/D,IAAMrrC,EAASV,KAAKqrC,IAAI3qC,SACpBA,EAASuI,EAASE,WACpBnJ,KAAKqrC,IAAIhnC,IAAI,EAAM3D,GAEnBV,KAAKqrC,IAAIhoC,OAAO,EAAK,GAGvB,IAAM4oC,EAAO7pC,EAAKgD,cAAcpF,KAAK+rC,KAAM/rC,KAAKqrC,KAC1Ca,EAAO9pC,EAAKgD,cAAcpF,KAAKgsC,KAAMhsC,KAAKqrC,KAC5Cc,EAAUnsC,KAAKyrC,WAAazrC,KAAK2rC,QAAUM,EAAOA,EAAOjsC,KAAK0rC,WAC5D1rC,KAAK4rC,QAAUM,EAAOA,EAK5B,GAFAlsC,KAAK0d,OAAoB,GAAXyuB,EAAiB,EAAMA,EAAU,EAE3CnsC,KAAKkqC,cAAgB,EAAK,CAC5B,IAAMp7B,EAAIpO,EAASV,KAAKiqC,SAGlBmC,EAAQ,EAAM9qC,EAAKyI,GAAK/J,KAAKkqC,cAG7BhrC,EAAI,EAAMc,KAAK0d,OAAS1d,KAAKmqC,eAAiBiC,EAG9CC,EAAIrsC,KAAK0d,OAAS0uB,EAAQA,EAG1B96B,EAAI+e,EAAK1B,GACf3uB,KAAKoqC,QAAU94B,GAAKpS,EAAIoS,EAAI+6B,GAC5BrsC,KAAKoqC,QAA0B,GAAhBpqC,KAAKoqC,QAAiB,EAAMpqC,KAAKoqC,QAAU,EAC1DpqC,KAAKqqC,OAASv7B,EAAIwC,EAAI+6B,EAAIrsC,KAAKoqC,QAE/B+B,GAAWnsC,KAAKoqC,QAChBpqC,KAAK0d,OAAoB,GAAXyuB,EAAiB,EAAMA,EAAU,OAE/CnsC,KAAKoqC,QAAU,EACfpqC,KAAKqqC,OAAS,EAGhB,GAAIha,EAAKtB,aAAc,CAErB/uB,KAAK40B,WAAavE,EAAKnB,QAEvB,IAAMqO,EAAIn7B,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAKqrC,KAE/C3N,EAAGv5B,OAAOnE,KAAKyrC,WAAYlO,GAC3B5V,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAEnDI,EAAG35B,OAAOhE,KAAK0rC,WAAYnO,GAC3B1V,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,QAGnDv9B,KAAK40B,UAAY,EAGnB50B,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9B6hB,EAAwBjqC,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAG3B4oC,EAAMlqC,EAAKyB,IAAI65B,EAAIt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OAC9CQ,EAAMnqC,EAAKyB,IAAI85B,EAAIv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OAC9CQ,EAAOpqC,EAAK8C,IAAIlF,KAAKqrC,IAAKkB,GAAOnqC,EAAK8C,IAAIlF,KAAKqrC,IAAKiB,GAEpD5pB,GAAW1iB,KAAK0d,QACf8uB,EAAOxsC,KAAKqqC,OAASrqC,KAAKoqC,QAAUpqC,KAAK40B,WAChD50B,KAAK40B,WAAalS,EAElB,IAAM6a,EAAIn7B,EAAKuD,WAAW+c,EAAS1iB,KAAKqrC,KACxC3N,EAAGv5B,OAAOnE,KAAKyrC,WAAYlO,GAC3B5V,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GACnDI,EAAG35B,OAAOhE,KAAK0rC,WAAYnO,GAC3B1V,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAEnDv9B,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9B6hB,EAAwBjqC,UAAA4yB,yBAAxB,SAAyBhC,GACvB,GAAIrwB,KAAKkqC,cAAgB,EAEvB,OAAO,EAGT,IAAMxT,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbjV,EAAK/U,EAAIgB,OAAO03B,EAAI7rC,KAAK6pC,eAAgB7pC,KAAKurC,gBAC9CpjB,EAAKhV,EAAIgB,OAAO23B,EAAI9rC,KAAK+pC,eAAgB/pC,KAAKwrC,gBAC9CiB,EAAIrqC,EAAKgC,IAAIhC,EAAKyB,IAAI8yB,EAAIxO,GAAK/lB,EAAKyB,IAAI6yB,EAAIxO,IAG9CpZ,EADW29B,EAAEhoC,YACAzE,KAAKiqC,SACtBn7B,EAAIxN,EACCY,MAAM4M,GAAI7F,EAASoB,oBAAqBpB,EAASoB,qBAEtD,IAAMqY,GAAW1iB,KAAK0d,OAAS5O,EACzByuB,EAAIn7B,EAAKuD,WAAW+c,EAAS+pB,GAYnC,OAVA/V,EAAGvyB,OAAOnE,KAAKyrC,WAAYlO,GAC3BL,GAAMl9B,KAAK2rC,QAAUvpC,EAAKgD,cAAc8iB,EAAIqV,GAC5C5G,EAAG3yB,OAAOhE,KAAK0rC,WAAYnO,GAC3BJ,GAAMn9B,KAAK4rC,QAAUxpC,EAAKgD,cAAc+iB,EAAIoV,GAE5Cv9B,KAAKikB,QAAQjG,WAAW3M,EAAE/N,QAAQozB,GAClC12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAE/N,QAAQqzB,GAClC32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB77B,EAAKwE,IAAIgJ,GAAK7F,EAASE,YAzWzBugC,EAAIzF,KAAG,iBA4WfyF,EA7WD,CAAmC9lB,GCvB7B2lB,GAAW,CACfmD,SAAW,EACXC,UAAY,GASdC,GAAA,SAAA9I,GA4BE,SAAA8I,EAAYx1B,EAAuByM,EAAcC,EAAc+oB,GAA/D,IAiCCl7B,EAAA3R,KA/BC,OAA8B2R,aAAgBi7B,GAI9Cx1B,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASw2B,EAAc3I,KAE5BtyB,EAAKk4B,eAAiBznC,EAAKQ,MAAMiqC,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKM,QACjGiP,EAAKo4B,eAAiB3nC,EAAKQ,MAAMiqC,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKM,QAGjGiP,EAAKm7B,gBAAkB1qC,EAAKM,OAC5BiP,EAAKo7B,iBAAmB,EACxBp7B,EAAKq7B,WAAa51B,EAAIs1B,SACtB/6B,EAAKs7B,YAAc71B,EAAIu1B,aAjBd,IAAIC,EAAcx1B,EAAKyM,EAAOC,EAAO+oB,GAoSlD,OAnUmCjtC,EAAKgtC,EAAA9I,GAgEtC8I,EAAAntC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvB2pB,SAAU1sC,KAAKgtC,WACfL,UAAW3sC,KAAKitC,YAEhBnD,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,iBAKhB6C,EAAArqC,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIkxB,EAAcpqC,IAKlCoqC,EAAWntC,UAAA+qC,YAAX,SAAYpzB,GAMNA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,eAQpC4C,EAAAntC,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMd+C,EAAAntC,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMd6C,EAAWntC,UAAAytC,YAAX,SAAY/qB,GAEVniB,KAAKgtC,WAAa7qB,GAMpByqB,EAAAntC,UAAA0tC,YAAA,WACE,OAAOntC,KAAKgtC,YAMdJ,EAAYntC,UAAA2tC,aAAZ,SAAa5qB,GAEXxiB,KAAKitC,YAAczqB,GAMrBoqB,EAAAntC,UAAA4tC,aAAA,WACE,OAAOrtC,KAAKitC,aAMdL,EAAAntC,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzC+C,EAAAntC,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzC6C,EAAgBntC,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAWipB,EAAQ5uB,KAAK8sC,kBAMtCF,EAAiBntC,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAK+sC,kBAGvBH,EAAuBntC,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAMqf,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3By5B,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAGnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBAC/DvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAW/D,IAAMzO,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVtO,EAAI,IAAItI,GAed,GAdAsI,EAAErI,GAAGxzB,EAAIs7B,EAAKC,EAAKruB,EAAK3O,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAK1pC,EAAI46B,EAAKj9B,KAAKgsC,KAAK3pC,EAC7DrC,KAAKgsC,KAAK3pC,EAChBi7B,EAAErI,GAAG5yB,GAAKsM,EAAK3O,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAK1pC,EAAI46B,EAAKj9B,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAK3pC,EACxEi7B,EAAEpI,GAAGzzB,EAAI67B,EAAErI,GAAG5yB,EACdi7B,EAAEpI,GAAG7yB,EAAI06B,EAAKC,EAAKruB,EAAK3O,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAKtqC,EAAIw7B,EAAKj9B,KAAKgsC,KAAKvqC,EAC7DzB,KAAKgsC,KAAKvqC,EAEhBzB,KAAKstC,aAAehQ,EAAEnI,aAEtBn1B,KAAKutC,cAAgB5+B,EAAKsuB,EACtBj9B,KAAKutC,cAAgB,IACvBvtC,KAAKutC,cAAgB,EAAMvtC,KAAKutC,eAG9Bld,EAAKtB,aAAc,CAErB/uB,KAAK8sC,gBAAgBzoC,IAAIgsB,EAAKnB,SAC9BlvB,KAAK+sC,kBAAoB1c,EAAKnB,QAE9B,IAAMqO,EAAIn7B,EAAKO,IAAI3C,KAAK8sC,gBAAgBrrC,EAAGzB,KAAK8sC,gBAAgBzqC,GAEhEq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAKv9B,KAAK+sC,kBAEpDpP,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAKv9B,KAAK+sC,uBAGpD/sC,KAAK8sC,gBAAgB3pC,UACrBnD,KAAK+sC,iBAAmB,EAG1B/sC,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9B+kB,EAAwBntC,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3Bq5B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVt6B,EAAI+e,EAAK1B,GAIP6d,EAAO3kB,EAAKF,EACdjF,GAAW1iB,KAAKutC,cAAgBf,EAE9BgB,EAAaxtC,KAAK+sC,iBAClBU,EAAan8B,EAAItR,KAAKitC,YAC5BjtC,KAAK+sC,iBAAmBzrC,EAAKY,MAAMlC,KAAK+sC,iBAAmBrqB,GACtD+qB,EAAYA,GAGjB9lB,GAAMhZ,GAFN+T,EAAU1iB,KAAK+sC,iBAAmBS,GAGlC3lB,GAAMoV,EAAKva,EAKL8pB,EAAOpqC,EAAKgC,IAAIhC,EAAKyB,IAAI85B,EAAIv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OAAQ5pC,EAAKyB,IAAI65B,EAC3Et7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,QAE3BrpB,EAAUtgB,EAAKyD,IAAImvB,GAAM9gB,QAAQlU,KAAKstC,aAAcd,IAClDgB,EAAaxtC,KAAK8sC,gBACxB9sC,KAAK8sC,gBAAgBjpC,IAAI6e,GAEnB+qB,EAAan8B,EAAItR,KAAKgtC,WAExBhtC,KAAK8sC,gBAAgBtoC,gBAAkBipC,EAAaA,IACtDztC,KAAK8sC,gBAAgBroC,YACrBzE,KAAK8sC,gBAAgBzoC,IAAIopC,IAG3B/qB,EAAUtgB,EAAKgC,IAAIpE,KAAK8sC,gBAAiBU,GAEzC9P,EAAGv5B,OAAO44B,EAAIra,GACdiF,GAAMhZ,EAAKvM,EAAKgD,cAAcpF,KAAK+rC,KAAMrpB,GAEzCib,EAAG35B,OAAOg5B,EAAIta,GACdmF,GAAMoV,EAAK76B,EAAKgD,cAAcpF,KAAKgsC,KAAMtpB,GAG3C1iB,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9B+kB,EAAwBntC,UAAA4yB,yBAAxB,SAAyBhC,GACvB,OAAO,GA/TFuc,EAAI3I,KAAG,iBAkUf2I,EAnUD,CAAmChpB,GC1CnC8pB,GAAA,WAOE,SAAAA,EAAYjqC,EAAUtE,EAAUkS,GACb,iBAAN5N,GAAwB,OAANA,GAC3BzD,KAAKi1B,GAAK0O,GAAK/gC,MAAMa,GACrBzD,KAAKk1B,GAAKyO,GAAK/gC,MAAMzD,GACrBa,KAAK2tC,GAAKhK,GAAK/gC,MAAMyO,KAErBrR,KAAKi1B,GAAK0O,GAAKjhC,OACf1C,KAAKk1B,GAAKyO,GAAKjhC,OACf1C,KAAK2tC,GAAKhK,GAAKjhC,QA0KrB,OArKEgrC,EAAAjuC,UAAAqD,SAAA,WACE,OAAOC,KAAKC,UAAUhD,OAGjB0tC,EAAOzqC,QAAd,SAAeR,GACb,OAAIA,MAAAA,IAGGkhC,GAAK1gC,QAAQR,EAAIwyB,KAAO0O,GAAK1gC,QAAQR,EAAIyyB,KAAOyO,GAAK1gC,QAAQR,EAAIkrC,MAGnED,EAAM/rC,OAAb,SAAcuB,KAOdwqC,EAAAjuC,UAAA0D,QAAA,WAIE,OAHAnD,KAAKi1B,GAAG9xB,UACRnD,KAAKk1B,GAAG/xB,UACRnD,KAAK2tC,GAAGxqC,UACDnD,MAOT0tC,EAAOjuC,UAAAmuC,QAAP,SAAQ/qC,GACN,IAAIuyB,EAAMuO,GAAKz+B,IAAIlF,KAAKi1B,GAAI0O,GAAKx+B,MAAMnF,KAAKk1B,GAAIl1B,KAAK2tC,KACzC,IAARvY,IACFA,EAAM,EAAMA,GAEd,IAAMhvB,EAAI,IAAIu9B,GAId,OAHAv9B,EAAE3E,EAAI2zB,EAAMuO,GAAKz+B,IAAIrC,EAAG8gC,GAAKx+B,MAAMnF,KAAKk1B,GAAIl1B,KAAK2tC,KACjDvnC,EAAE/D,EAAI+yB,EAAMuO,GAAKz+B,IAAIlF,KAAKi1B,GAAI0O,GAAKx+B,MAAMtC,EAAG7C,KAAK2tC,KACjDvnC,EAAEw9B,EAAIxO,EAAMuO,GAAKz+B,IAAIlF,KAAKi1B,GAAI0O,GAAKx+B,MAAMnF,KAAKk1B,GAAIryB,IAC3CuD,GAQTsnC,EAAOjuC,UAAAouC,QAAP,SAAQhrC,GACN,IAAMirC,EAAM9tC,KAAKi1B,GAAGxzB,EACdssC,EAAM/tC,KAAKk1B,GAAGzzB,EACdusC,EAAMhuC,KAAKi1B,GAAG5yB,EACd4rC,EAAMjuC,KAAKk1B,GAAG7yB,EAChB+yB,EAAM0Y,EAAMG,EAAMF,EAAMC,EAChB,IAAR5Y,IACFA,EAAM,EAAMA,GAEd,IAAMhvB,EAAIhE,EAAKM,OAGf,OAFA0D,EAAE3E,EAAI2zB,GAAO6Y,EAAMprC,EAAEpB,EAAIssC,EAAMlrC,EAAER,GACjC+D,EAAE/D,EAAI+yB,GAAO0Y,EAAMjrC,EAAER,EAAI2rC,EAAMnrC,EAAEpB,GAC1B2E,GAOTsnC,EAAYjuC,UAAAyuC,aAAZ,SAAaC,GACX,IAAM1qC,EAAIzD,KAAKi1B,GAAGxzB,EACZtC,EAAIa,KAAKk1B,GAAGzzB,EACZ4P,EAAIrR,KAAKi1B,GAAG5yB,EACZnD,EAAIc,KAAKk1B,GAAG7yB,EACd+yB,EAAM3xB,EAAIvE,EAAIC,EAAIkS,EACV,IAAR+jB,IACFA,EAAM,EAAMA,GAEd+Y,EAAElZ,GAAGxzB,EAAI2zB,EAAMl2B,EACfivC,EAAEjZ,GAAGzzB,GAAK2zB,EAAMj2B,EAChBgvC,EAAElZ,GAAG2O,EAAI,EACTuK,EAAElZ,GAAG5yB,GAAK+yB,EAAM/jB,EAChB88B,EAAEjZ,GAAG7yB,EAAI+yB,EAAM3xB,EACf0qC,EAAEjZ,GAAG0O,EAAI,EACTuK,EAAER,GAAGlsC,EAAI,EACT0sC,EAAER,GAAGtrC,EAAI,EACT8rC,EAAER,GAAG/J,EAAI,GAOX8J,EAAejuC,UAAA2uC,gBAAf,SAAgBD,GACd,IAAI/Y,EAAMuO,GAAKz+B,IAAIlF,KAAKi1B,GAAI0O,GAAKx+B,MAAMnF,KAAKk1B,GAAIl1B,KAAK2tC,KACzC,IAARvY,IACFA,EAAM,EAAMA,GAEd,IAAM0Y,EAAM9tC,KAAKi1B,GAAGxzB,EACdssC,EAAM/tC,KAAKk1B,GAAGzzB,EACd4sC,EAAMruC,KAAK2tC,GAAGlsC,EACdwsC,EAAMjuC,KAAKk1B,GAAG7yB,EACdisC,EAAMtuC,KAAK2tC,GAAGtrC,EACdksC,EAAMvuC,KAAK2tC,GAAG/J,EAEpBuK,EAAElZ,GAAGxzB,EAAI2zB,GAAO6Y,EAAMM,EAAMD,EAAMA,GAClCH,EAAElZ,GAAG5yB,EAAI+yB,GAAOiZ,EAAMC,EAAMP,EAAMQ,GAClCJ,EAAElZ,GAAG2O,EAAIxO,GAAO2Y,EAAMO,EAAMD,EAAMJ,GAElCE,EAAEjZ,GAAGzzB,EAAI0sC,EAAElZ,GAAG5yB,EACd8rC,EAAEjZ,GAAG7yB,EAAI+yB,GAAO0Y,EAAMS,EAAMF,EAAMA,GAClCF,EAAEjZ,GAAG0O,EAAIxO,GAAOiZ,EAAMN,EAAMD,EAAMQ,GAElCH,EAAER,GAAGlsC,EAAI0sC,EAAElZ,GAAG2O,EACduK,EAAER,GAAGtrC,EAAI8rC,EAAEjZ,GAAG0O,EACduK,EAAER,GAAG/J,EAAIxO,GAAO0Y,EAAMG,EAAMF,EAAMA,IAS7BL,EAAArpC,IAAP,SAAWZ,EAAGtE,GAEZ,GAAIA,GAAK,MAAOA,GAAK,MAAOA,GAAK,MAAOA,EAAG,CAEzC,IAAMsC,EAAIgC,EAAEwxB,GAAGxzB,EAAItC,EAAEsC,EAAIgC,EAAEyxB,GAAGzzB,EAAItC,EAAEkD,EAAIoB,EAAEkqC,GAAGlsC,EAAItC,EAAEykC,EAC7CvhC,EAAIoB,EAAEwxB,GAAG5yB,EAAIlD,EAAEsC,EAAIgC,EAAEyxB,GAAG7yB,EAAIlD,EAAEkD,EAAIoB,EAAEkqC,GAAGtrC,EAAIlD,EAAEykC,EAC7CA,EAAIngC,EAAEwxB,GAAG2O,EAAIzkC,EAAEsC,EAAIgC,EAAEyxB,GAAG0O,EAAIzkC,EAAEkD,EAAIoB,EAAEkqC,GAAG/J,EAAIzkC,EAAEykC,EACnD,OAAO,IAAID,GAAKliC,EAAGY,EAAGuhC,GAEjB,GAAIzkC,GAAK,MAAOA,GAAK,MAAOA,EAAG,CAE9BsC,EAAIgC,EAAEwxB,GAAGxzB,EAAItC,EAAEsC,EAAIgC,EAAEyxB,GAAGzzB,EAAItC,EAAEkD,EAC9BA,EAAIoB,EAAEwxB,GAAG5yB,EAAIlD,EAAEsC,EAAIgC,EAAEyxB,GAAG7yB,EAAIlD,EAAEkD,EACpC,OAAOD,EAAKO,IAAIlB,EAAGY,KAMhBqrC,EAAAc,QAAP,SAAe/qC,EAAUtE,GAGvB,IAAMsC,EAAIgC,EAAEwxB,GAAGxzB,EAAItC,EAAEsC,EAAIgC,EAAEyxB,GAAGzzB,EAAItC,EAAEkD,EAAIoB,EAAEkqC,GAAGlsC,EAAItC,EAAEykC,EAC7CvhC,EAAIoB,EAAEwxB,GAAG5yB,EAAIlD,EAAEsC,EAAIgC,EAAEyxB,GAAG7yB,EAAIlD,EAAEkD,EAAIoB,EAAEkqC,GAAGtrC,EAAIlD,EAAEykC,EAC7CA,EAAIngC,EAAEwxB,GAAG2O,EAAIzkC,EAAEsC,EAAIgC,EAAEyxB,GAAG0O,EAAIzkC,EAAEkD,EAAIoB,EAAEkqC,GAAG/J,EAAIzkC,EAAEykC,EACnD,OAAO,IAAID,GAAKliC,EAAGY,EAAGuhC,IAGjB8J,EAAAx5B,QAAP,SAAezQ,EAAUtE,GAGvB,IAAMsC,EAAIgC,EAAEwxB,GAAGxzB,EAAItC,EAAEsC,EAAIgC,EAAEyxB,GAAGzzB,EAAItC,EAAEkD,EAC9BA,EAAIoB,EAAEwxB,GAAG5yB,EAAIlD,EAAEsC,EAAIgC,EAAEyxB,GAAG7yB,EAAIlD,EAAEkD,EACpC,OAAOD,EAAKO,IAAIlB,EAAGY,IAGdqrC,EAAA7pC,IAAP,SAAWJ,EAAUtE,GAGnB,OAAO,IAAIuuC,EACT/J,GAAK9/B,IAAIJ,EAAEwxB,GAAI91B,EAAE81B,IACjB0O,GAAK9/B,IAAIJ,EAAEyxB,GAAI/1B,EAAE+1B,IACjByO,GAAK9/B,IAAIJ,EAAEkqC,GAAIxuC,EAAEwuC,MAGtBD,KC3GKnE,GAAW,CACfkF,WAAa,EACbC,WAAa,EACbC,eAAiB,EACjBC,WAAa,EACbC,aAAc,EACdC,aAAc,GAWhBC,GAAA,SAAAjL,GAkCE,SAAAiL,EAAY33B,EAAuByM,EAAcC,EAAc+oB,GAA/D,IAuCCl7B,EAAA3R,KArCC,OAA8B2R,aAAgBo9B,GAI9C33B,EAAMxW,EAAQwW,EAAKmyB,KACnB53B,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MAfJ0d,OAAU,IAAIgwB,GAGpB/7B,EAAYq9B,aArHT,EAkIlBnrB,EAAQlS,EAAKsS,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAAS24B,EAAc9K,KAE5BtyB,EAAKk4B,eAAkBznC,EAAKQ,MAAMiqC,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKM,QAClGiP,EAAKo4B,eAAkB3nC,EAAKQ,MAAMiqC,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKM,QAClGiP,EAAKs9B,iBAAmB3tC,EAAKE,SAAS4V,EAAI83B,gBAAkB93B,EAAI83B,eAAiBprB,EAAMlQ,WAAaiQ,EAAMjQ,WAE1GjC,EAAKijB,UAAY,IAAI+O,GACrBhyB,EAAKw9B,eAAiB,EAEtBx9B,EAAKy9B,aAAeh4B,EAAIq3B,WACxB98B,EAAK09B,aAAej4B,EAAIs3B,WACxB/8B,EAAK29B,iBAAmBl4B,EAAIu3B,eAC5Bh9B,EAAK49B,aAAen4B,EAAIw3B,WACxBj9B,EAAK69B,cAAgBp4B,EAAIy3B,YACzBl9B,EAAK89B,cAAgBr4B,EAAI03B,eAtBhB,IAAIC,EAAc33B,EAAKyM,EAAOC,EAAO+oB,GAyjBlD,OA9lBmCjtC,EAAKmvC,EAAAjL,GA4EtCiL,EAAAtvC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvB0rB,WAAYzuC,KAAKovC,aACjBV,WAAY1uC,KAAKqvC,aACjBV,eAAgB3uC,KAAKsvC,iBACrBV,WAAY5uC,KAAKuvC,aACjBV,YAAa7uC,KAAKwvC,cAClBV,YAAa9uC,KAAKyvC,cAElB3F,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBmF,eAAgBlvC,KAAKivC,mBAKlBF,EAAAxsC,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIqzB,EAAcvsC,IAKlCusC,EAAWtvC,UAAA+qC,YAAX,SAAYpzB,GAMNA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,eAOpC+E,EAAAtvC,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMdkF,EAAAtvC,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMdgF,EAAAtvC,UAAAiwC,kBAAA,WACE,OAAO1vC,KAAKivC,kBAMdF,EAAAtvC,UAAAkwC,cAAA,WACE,IAAM/b,EAAK5zB,KAAKikB,QAEhB,OADWjkB,KAAKkkB,QACNpG,QAAQra,EAAImwB,EAAG9V,QAAQra,EAAIzD,KAAKivC,kBAM5CF,EAAAtvC,UAAAmwC,cAAA,WACE,IAAMhc,EAAK5zB,KAAKikB,QAEhB,OADWjkB,KAAKkkB,QACN9F,kBAAoBwV,EAAGxV,mBAMnC2wB,EAAAtvC,UAAAowC,eAAA,WACE,OAAO7vC,KAAKyvC,eAMdV,EAAWtvC,UAAAqvC,YAAX,SAAY5uB,GACVlgB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKyvC,cAAgBvvB,GAMvB6uB,EAActvC,UAAAqwC,eAAd,SAAelhB,GACb,OAAOA,EAAS5uB,KAAKmvC,gBAMvBJ,EAAatvC,UAAAswC,cAAb,SAAcjU,GACZ97B,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKuvC,aAAezT,GAMtBiT,EAAAtvC,UAAAuwC,cAAA,WACE,OAAOhwC,KAAKuvC,cAMdR,EAAiBtvC,UAAAwwC,kBAAjB,SAAkBztB,GAChBxiB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKsvC,iBAAmB9sB,GAG1BusB,EAAAtvC,UAAAywC,kBAAA,WACE,OAAOlwC,KAAKsvC,kBAMdP,EAAAtvC,UAAA0wC,eAAA,WACE,OAAOnwC,KAAKwvC,eAMdT,EAAWtvC,UAAAovC,YAAX,SAAY3uB,GACNA,GAAQlgB,KAAKwvC,gBACfxvC,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKwvC,cAAgBtvB,EACrBlgB,KAAK40B,UAAUgP,EAAI,IAOvBmL,EAAAtvC,UAAA2wC,cAAA,WACE,OAAOpwC,KAAKovC,cAMdL,EAAAtvC,UAAA4wC,cAAA,WACE,OAAOrwC,KAAKqvC,cAMdN,EAAAtvC,UAAA6wC,UAAA,SAAUrqC,EAAeD,GAGnBC,GAASjG,KAAKovC,cAAgBppC,GAAShG,KAAKqvC,eAC9CrvC,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAK40B,UAAUgP,EAAI,EACnB5jC,KAAKovC,aAAenpC,EACpBjG,KAAKqvC,aAAerpC,IAOxB+oC,EAAAtvC,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCkF,EAAAtvC,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCgF,EAAgBtvC,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKO,IAAI3C,KAAK40B,UAAUnzB,EAAGzB,KAAK40B,UAAUvyB,GAAGgC,IAAIuqB,IAO1DmgB,EAAiBtvC,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAK40B,UAAUgP,GAGjCmL,EAAuBtvC,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAMqf,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3By5B,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBAC/DvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAW/D,IAAMzO,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVpvB,EAAiB7N,EAAKsuB,IAAO,EAwBnC,GAtBAj9B,KAAK0d,OAAOuX,GAAGxzB,EAAIs7B,EAAKC,EAAKh9B,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAK1pC,EAAIsM,EAAK3O,KAAKgsC,KAAK3pC,EAClErC,KAAKgsC,KAAK3pC,EAAI46B,EACpBj9B,KAAK0d,OAAOwX,GAAGzzB,GAAKzB,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAK3pC,EACzDrC,KAAKgsC,KAAKvqC,EAAIw7B,EACpBj9B,KAAK0d,OAAOiwB,GAAGlsC,GAAKzB,KAAK+rC,KAAK1pC,EAAIsM,EAAK3O,KAAKgsC,KAAK3pC,EAAI46B,EACrDj9B,KAAK0d,OAAOuX,GAAG5yB,EAAIrC,KAAK0d,OAAOwX,GAAGzzB,EAClCzB,KAAK0d,OAAOwX,GAAG7yB,EAAI06B,EAAKC,EAAKh9B,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAKvqC,EAClEzB,KAAKgsC,KAAKvqC,EAAIw7B,EACpBj9B,KAAK0d,OAAOiwB,GAAGtrC,EAAIrC,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAKvqC,EAAIw7B,EACpDj9B,KAAK0d,OAAOuX,GAAG2O,EAAI5jC,KAAK0d,OAAOiwB,GAAGlsC,EAClCzB,KAAK0d,OAAOwX,GAAG0O,EAAI5jC,KAAK0d,OAAOiwB,GAAGtrC,EAClCrC,KAAK0d,OAAOiwB,GAAG/J,EAAIj1B,EAAKsuB,EAExBj9B,KAAKuwC,YAAc5hC,EAAKsuB,EACpBj9B,KAAKuwC,YAAc,IACrBvwC,KAAKuwC,YAAc,EAAMvwC,KAAKuwC,cAGN,GAAtBvwC,KAAKyvC,eAA0BjzB,KACjCxc,KAAKmvC,eAAiB,GAGpBnvC,KAAKwvC,eAAkC,GAAjBhzB,EAAwB,CAChD,IAAMg0B,EAAarT,EAAKD,EAAKl9B,KAAKivC,iBAE9B3tC,EAAKwE,IAAI9F,KAAKqvC,aAAervC,KAAKovC,cAAgB,EAAMnmC,EAASa,YACnE9J,KAAKgvC,aA1bO,EA4bHwB,GAAcxwC,KAAKovC,cA9bf,GA+bTpvC,KAAKgvC,eACPhvC,KAAK40B,UAAUgP,EAAI,GAErB5jC,KAAKgvC,aAlcQ,GAocJwB,GAAcxwC,KAAKqvC,cAncf,GAocTrvC,KAAKgvC,eACPhvC,KAAK40B,UAAUgP,EAAI,GAErB5jC,KAAKgvC,aAvcQ,IA0cbhvC,KAAKgvC,aA5cS,EA6cdhvC,KAAK40B,UAAUgP,EAAI,QAIrB5jC,KAAKgvC,aAjdW,EAodlB,GAAI3e,EAAKtB,aAAc,CAErB/uB,KAAK40B,UAAUvwB,IAAIgsB,EAAKnB,SACxBlvB,KAAKmvC,gBAAkB9e,EAAKnB,QAE5B,IAAMqO,EAAIn7B,EAAKO,IAAI3C,KAAK40B,UAAUnzB,EAAGzB,KAAK40B,UAAUvyB,GAEpDq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAKv9B,KAAKmvC,eAAiBnvC,KAAK40B,UAAUgP,GAEpFjG,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAKv9B,KAAKmvC,eAAiBnvC,KAAK40B,UAAUgP,QAGpF5jC,KAAK40B,UAAUzxB,UACfnD,KAAKmvC,eAAiB,EAGxBnvC,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BknB,EAAwBtvC,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3Bq5B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVpvB,EAAiB7N,EAAKsuB,IAAO,EAGnC,GAAIj9B,KAAKyvC,eAvfO,GAufUzvC,KAAKgvC,cACP,GAAjBxyB,EAAwB,CAC7B,IAAMgwB,EAAO3kB,EAAKF,EAAK3nB,KAAKuvC,aACxB7sB,GAAW1iB,KAAKuwC,YAAc/D,EAC5BgB,EAAaxtC,KAAKmvC,eAClB1B,EAAapd,EAAK1B,GAAK3uB,KAAKsvC,iBAClCtvC,KAAKmvC,eAAiB7tC,EAAKY,MAAMlC,KAAKmvC,eAAiBzsB,GAClD+qB,EAAYA,GAGjB9lB,GAAMhZ,GAFN+T,EAAU1iB,KAAKmvC,eAAiB3B,GAGhC3lB,GAAMoV,EAAKva,EAIb,GAAI1iB,KAAKwvC,eAzgBS,GAygBQxvC,KAAKgvC,cACP,GAAjBxyB,EAAwB,CAC7B,IAAMi0B,EAAQruC,EAAKM,OACnB+tC,EAAM1sC,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OACtDyE,EAAMvsC,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OACtD,IAAM2E,EAAQ7oB,EAAKF,EACb6kB,EAAO,IAAI7I,GAAK8M,EAAMhvC,EAAGgvC,EAAMpuC,EAAGquC,GAElChuB,EAAUihB,GAAK99B,IAAI7F,KAAK0d,OAAOkwB,QAAQpB,IAE7C,GAhhBc,GAghBVxsC,KAAKgvC,aACPhvC,KAAK40B,UAAU/wB,IAAI6e,QAEd,GArhBQ,GAqhBJ1iB,KAAKgvC,aAA8B,CAG5C,GAFmBhvC,KAAK40B,UAAUgP,EAAIlhB,EAAQkhB,EAE7B,EAAK,CACpB,IAAM+M,EAAMvuC,EAAKsD,SAAS,EAAG+qC,EAAOzwC,KAAK40B,UAAUgP,EAAGxhC,EAAKO,IAAI3C,KAAK0d,OAAOiwB,GAAGlsC,EAAGzB,KAAK0d,OAAOiwB,GAAGtrC,IAC1FuuC,EAAU5wC,KAAK0d,OAAOmwB,QAAQ8C,GACpCjuB,EAAQjhB,EAAImvC,EAAQnvC,EACpBihB,EAAQrgB,EAAIuuC,EAAQvuC,EACpBqgB,EAAQkhB,GAAK5jC,KAAK40B,UAAUgP,EAC5B5jC,KAAK40B,UAAUnzB,GAAKmvC,EAAQnvC,EAC5BzB,KAAK40B,UAAUvyB,GAAKuuC,EAAQvuC,EAC5BrC,KAAK40B,UAAUgP,EAAI,OAGnB5jC,KAAK40B,UAAU/wB,IAAI6e,QAGhB,GAriBQ,GAqiBJ1iB,KAAKgvC,aAA8B,CAG5C,GAFmBhvC,KAAK40B,UAAUgP,EAAIlhB,EAAQkhB,EAE7B,EAAK,CACd+M,EAAMvuC,EAAKsD,SAAS,EAAG+qC,EAAOzwC,KAAK40B,UAAUgP,EAAGxhC,EAAKO,IAAI3C,KAAK0d,OAAOiwB,GAAGlsC,EAAGzB,KAAK0d,OAAOiwB,GAAGtrC,IAC1FuuC,EAAU5wC,KAAK0d,OAAOmwB,QAAQ8C,GACpCjuB,EAAQjhB,EAAImvC,EAAQnvC,EACpBihB,EAAQrgB,EAAIuuC,EAAQvuC,EACpBqgB,EAAQkhB,GAAK5jC,KAAK40B,UAAUgP,EAC5B5jC,KAAK40B,UAAUnzB,GAAKmvC,EAAQnvC,EAC5BzB,KAAK40B,UAAUvyB,GAAKuuC,EAAQvuC,EAC5BrC,KAAK40B,UAAUgP,EAAI,OAGnB5jC,KAAK40B,UAAU/wB,IAAI6e,GAIvB,IAAM6a,EAAIn7B,EAAKO,IAAI+f,EAAQjhB,EAAGihB,EAAQrgB,GAEtCq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAK7a,EAAQkhB,GAEvDjG,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAK7a,EAAQkhB,OAElD,EAEC4I,EAAOpqC,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OACrDQ,EAAKtoC,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OAC/CrpB,EAAU1iB,KAAK0d,OAAOmwB,QAAQzrC,EAAKyD,IAAI2mC,IAE7CxsC,KAAK40B,UAAUnzB,GAAKihB,EAAQjhB,EAC5BzB,KAAK40B,UAAUvyB,GAAKqgB,EAAQrgB,EAE5Bq7B,EAAGv5B,OAAO44B,EAAIra,GACdiF,GAAMhZ,EAAKvM,EAAKgD,cAAcpF,KAAK+rC,KAAMrpB,GAEzCib,EAAG35B,OAAOg5B,EAAIta,GACdmF,GAAMoV,EAAK76B,EAAKgD,cAAcpF,KAAKgsC,KAAMtpB,GAG3C1iB,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BknB,EAAwBtvC,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IASIwgB,EATEna,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEf2T,EAAe,EAGbt0B,EAAiBxc,KAAK2rC,QAAU3rC,KAAK4rC,SAAW,EAGtD,GAAI5rC,KAAKwvC,eA1mBS,GA0mBQxvC,KAAKgvC,cACP,GAAjBxyB,EAAwB,CAC7B,IAAMpJ,EAAQ+pB,EAAKD,EAAKl9B,KAAKivC,iBACzB8B,EAAe,EAEnB,GA5mBc,GA4mBV/wC,KAAKgvC,aAA6B,CAEpC,IAAMlgC,EAAIxN,EAAKY,MAAMkR,EAAQpT,KAAKovC,cAC7BnmC,EAASqB,qBAAsBrB,EAASqB,sBAC7CymC,GAAgB/wC,KAAKuwC,YAAczhC,EACnCgiC,EAAexvC,EAAKwE,IAAIgJ,QAEnB,GArnBQ,GAqnBJ9O,KAAKgvC,aAA8B,CAE5C8B,IADIhiC,EAAIsE,EAAQpT,KAAKovC,cAIrBtgC,EAAIxN,EAAKY,MAAM4M,EAAI7F,EAASa,aAAcb,EAASqB,qBAC/C,GACJymC,GAAgB/wC,KAAKuwC,YAAczhC,OAE9B,GA7nBQ,GA6nBJ9O,KAAKgvC,aAA8B,CAE5C8B,EADIhiC,EAAIsE,EAAQpT,KAAKqvC,aAIrBvgC,EAAIxN,EAAKY,MAAM4M,EAAI7F,EAASa,YAAa,EACrCb,EAASqB,sBACbymC,GAAgB/wC,KAAKuwC,YAAczhC,EAGrCouB,GAAMl9B,KAAK2rC,QAAUoF,EACrB5T,GAAMn9B,KAAK4rC,QAAUmF,EAKrBlF,EAAGx4B,SAAS6pB,GACZ4O,EAAGz4B,SAAS8pB,GACZ,IAAMjV,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,kBAExD18B,EAAI1M,EAAKM,QACbqB,WAAW,EAAG4yB,EAAI,EAAGxO,GACvBrZ,EAAE5K,WAAW,EAAGwyB,EAAI,EAAGxO,GACvB2oB,EAAgB/hC,EAAEpO,SAElB,IAAMq8B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVtO,EAAI,IAAItI,GACdsI,EAAErI,GAAGxzB,EAAIs7B,EAAKC,EAAKruB,EAAKuZ,EAAG7lB,EAAI6lB,EAAG7lB,EAAI46B,EAAK9U,EAAG9lB,EAAI8lB,EAAG9lB,EACrDi7B,EAAErI,GAAG5yB,GAAKsM,EAAKuZ,EAAGzmB,EAAIymB,EAAG7lB,EAAI46B,EAAK9U,EAAG1mB,EAAI0mB,EAAG9lB,EAC5Ci7B,EAAEpI,GAAGzzB,EAAI67B,EAAErI,GAAG5yB,EACdi7B,EAAEpI,GAAG7yB,EAAI06B,EAAKC,EAAKruB,EAAKuZ,EAAGzmB,EAAIymB,EAAGzmB,EAAIw7B,EAAK9U,EAAG1mB,EAAI0mB,EAAG1mB,EAErD,IAAMihB,EAAUtgB,EAAKyD,IAAIy3B,EAAEhW,MAAMxY,IAcnC,OAZE4nB,EAAGvyB,OAAO44B,EAAIra,GACdwa,GAAMvuB,EAAKvM,EAAKgD,cAAc8iB,EAAIxF,GAElCiU,EAAG3yB,OAAOg5B,EAAIta,GACdya,GAAMF,EAAK76B,EAAKgD,cAAc+iB,EAAIzF,GAGpC1iB,KAAKikB,QAAQjG,WAAW3M,EAAE/N,QAAQozB,GAClC12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAE/N,QAAQqzB,GAClC32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB0T,GAAiB5nC,EAASE,YAC1B2nC,GAAgB7nC,EAASa,aA1lB3BilC,EAAI9K,KAAG,iBA6lBf8K,EA9lBD,CAAmCnrB,GCrB7B2lB,GAAW,CACfsF,aAAc,EACdmC,iBAAmB,EACnBC,iBAAmB,EACnBnC,aAAc,EACdoC,cAAgB,EAChBtC,WAAa,GASfuC,GAAA,SAAArN,GAoCE,SAAYqN,EAAA/5B,EAAwByM,EAAcC,EAAc+oB,EAAeuE,GAA/E,IA6GCz/B,EAAA3R,KA3GC,OAA8B2R,aAAgBw/B,GAI9C/5B,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAAS+6B,EAAelN,KAE7BtyB,EAAKk4B,eAAiBznC,EAAKQ,MAAMiqC,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKM,QACjGiP,EAAKo4B,eAAiB3nC,EAAKQ,MAAMiqC,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKM,QACjGiP,EAAK0/B,cAAgBjvC,EAAKQ,MAAMwuC,EAAOvtB,EAAML,eAAe4tB,GAAQh6B,EAAIk6B,YAAclvC,EAAKO,IAAI,EAAK,IACpGgP,EAAK0/B,cAAc5sC,YACnBkN,EAAK4/B,cAAgBnvC,EAAKkD,aAAa,EAAKqM,EAAK0/B,eACjD1/B,EAAKs9B,iBAAmB3tC,EAAKE,SAAS4V,EAAI83B,gBAAkB93B,EAAI83B,eAAiBprB,EAAMlQ,WAAaiQ,EAAMjQ,WAE1GjC,EAAKijB,UAAY,IAAI+O,GACrBhyB,EAAK4+B,YAAc,EACnB5+B,EAAKw9B,eAAiB,EAEtBx9B,EAAK6/B,mBAAqBp6B,EAAI45B,iBAC9Br/B,EAAK8/B,mBAAqBr6B,EAAI65B,iBAC9Bt/B,EAAK+/B,gBAAkBt6B,EAAI85B,cAC3Bv/B,EAAK49B,aAAen4B,EAAIw3B,WACxBj9B,EAAK69B,cAAgBp4B,EAAIy3B,YACzBl9B,EAAK89B,cAAgBr4B,EAAI03B,YACzBn9B,EAAKq9B,aApJa,EAsJlBr9B,EAAK+b,OAAStrB,EAAKM,OACnBiP,EAAKggC,OAASvvC,EAAKM,OAEnBiP,EAAKigC,IAAM,IAAIlE,MAhCN,IAAIyD,EAAe/5B,EAAKyM,EAAOC,EAAO+oB,EAAQuE,GA4sB3D,OAnvBoCxxC,EAAKuxC,EAAArN,GAoJvCqN,EAAA1xC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBiuB,iBAAkBhxC,KAAKwxC,mBACvBP,iBAAkBjxC,KAAKyxC,mBACvBP,cAAelxC,KAAK0xC,gBACpB9C,WAAY5uC,KAAKuvC,aACjBV,YAAa7uC,KAAKwvC,cAClBV,YAAa9uC,KAAKyvC,cAElB3F,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBuH,WAAYtxC,KAAKqxC,cACjBnC,eAAgBlvC,KAAKivC,mBAKlBkC,EAAA5uC,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAMzC,OALApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACvClZ,EAAK8uC,WAAalvC,EAAKQ,MAAMJ,EAAK8uC,YACpB,IAAIH,EAAe3uC,IAKnC2uC,EAAW1xC,UAAA+qC,YAAX,SAAYpzB,GAONA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,cAG9B5yB,EAAIk6B,aACNtxC,KAAKqxC,cAAc/tC,QAAQ8T,EAAIk6B,YAC/BtxC,KAAKuxC,cAAcjuC,QAAQlB,EAAKkD,aAAa,EAAK8R,EAAIk6B,eAO1DH,EAAA1xC,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMdsH,EAAA1xC,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMdoH,EAAA1xC,UAAAoyC,cAAA,WACE,OAAO7xC,KAAKqxC,eAMdF,EAAA1xC,UAAAiwC,kBAAA,WACE,OAAO1vC,KAAKivC,kBAMdkC,EAAA1xC,UAAAqyC,oBAAA,WACE,IAAMzoB,EAAKrpB,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,gBACrCvgB,EAAKtpB,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,gBACrC7qC,EAAIkD,EAAKgC,IAAIklB,EAAID,GACjB+nB,EAAOpxC,KAAKikB,QAAQZ,eAAerjB,KAAKqxC,eAG9C,OADoBjvC,EAAK8C,IAAIhG,EAAGkyC,IAOlCD,EAAA1xC,UAAAmwC,cAAA,WACE,IAAMhc,EAAK5zB,KAAKikB,QACV4P,EAAK7zB,KAAKkkB,QAEVgE,EAAK/U,EAAIe,QAAQ0f,EAAGlb,KAAKhE,EAAGtS,EAAKgC,IAAIpE,KAAK6pC,eAAgBjW,EAAG9V,QAAQxI,cACrE6S,EAAKhV,EAAIe,QAAQ2f,EAAGnb,KAAKhE,EAAGtS,EAAKgC,IAAIpE,KAAK+pC,eAAgBlW,EAAG/V,QAAQxI,cACrEhN,EAAKlG,EAAKyB,IAAI+vB,EAAG9V,QAAQzM,EAAG6W,GAC5B3f,EAAKnG,EAAKyB,IAAIgwB,EAAG/V,QAAQzM,EAAG8W,GAC5BjpB,EAAIkD,EAAKgC,IAAImE,EAAID,GACjB8oC,EAAOj+B,EAAIe,QAAQ0f,EAAGlb,KAAKhE,EAAG1U,KAAKqxC,eAEnC3T,EAAK9J,EAAGzV,iBACRwf,EAAK9J,EAAG1V,iBACRwJ,EAAKiM,EAAGxV,kBACRyJ,EAAKgM,EAAGzV,kBAId,OAFchc,EAAK8C,IAAIhG,EAAGkD,EAAKkD,aAAaqiB,EAAIypB,IAC1ChvC,EAAK8C,IAAIksC,EAAMhvC,EAAKgC,IAAIhC,EAAKqD,gBAAgBk4B,EAAI9V,EAAIM,GAAK/lB,EAAKqD,gBAAgBi4B,EAAI/V,EAAIO,MAO/FipB,EAAA1xC,UAAA0wC,eAAA,WACE,OAAOnwC,KAAKwvC,eAMd2B,EAAW1xC,UAAAovC,YAAX,SAAY3uB,GACNA,GAAQlgB,KAAKwvC,gBACfxvC,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKwvC,cAAgBtvB,EACrBlgB,KAAK40B,UAAUgP,EAAI,IAOvBuN,EAAA1xC,UAAA2wC,cAAA,WACE,OAAOpwC,KAAKwxC,oBAMdL,EAAA1xC,UAAA4wC,cAAA,WACE,OAAOrwC,KAAKyxC,oBAMdN,EAAA1xC,UAAA6wC,UAAA,SAAUrqC,EAAeD,GAEnBC,GAASjG,KAAKwxC,oBAAsBxrC,GAAShG,KAAKyxC,qBACpDzxC,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKwxC,mBAAqBvrC,EAC1BjG,KAAKyxC,mBAAqBzrC,EAC1BhG,KAAK40B,UAAUgP,EAAI,IAOvBuN,EAAA1xC,UAAAowC,eAAA,WACE,OAAO7vC,KAAKyvC,eAMd0B,EAAW1xC,UAAAqvC,YAAX,SAAY5uB,GACVlgB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKyvC,cAAgBvvB,GAMvBixB,EAAa1xC,UAAAswC,cAAb,SAAcjU,GACZ97B,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKuvC,aAAezT,GAMtBqV,EAAgB1xC,UAAAsyC,iBAAhB,SAAiB5vB,GACfniB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAK0xC,gBAAkBvvB,GAGzBgvB,EAAA1xC,UAAAuyC,iBAAA,WACE,OAAOhyC,KAAK0xC,iBAMdP,EAAA1xC,UAAAuwC,cAAA,WACE,OAAOhwC,KAAKuvC,cAMd4B,EAAa1xC,UAAAwyC,cAAb,SAAcrjB,GACZ,OAAOA,EAAS5uB,KAAKmvC,gBAMvBgC,EAAA1xC,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCsH,EAAA1xC,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCoH,EAAgB1xC,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKsD,QAAQ1F,KAAK40B,UAAUnzB,EAAGzB,KAAK2xC,OAAQ3xC,KAAKmvC,eAAiBnvC,KAAK40B,UAAUgP,EAAG5jC,KAAK0tB,QAAQrpB,IAAIuqB,IAM9GuiB,EAAiB1xC,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAK40B,UAAUvyB,GAGjC8uC,EAAuB1xC,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAM6Y,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAGbjV,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBACxDtsC,EAAIkD,EAAKM,OACfxD,EAAE6E,WAAW,EAAG4yB,EAAI,EAAGxO,GACvBjpB,EAAEgF,WAAW,EAAGwyB,EAAI,EAAGxO,GAEvB,IAAM6U,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAId5rC,KAAK0tB,OAASva,EAAIe,QAAQ23B,EAAI7rC,KAAKqxC,eACnCrxC,KAAKkyC,KAAO9vC,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAKloB,KAAK0tB,QACrD1tB,KAAKmyC,KAAO/vC,EAAKgD,cAAc+iB,EAAInoB,KAAK0tB,QAExC1tB,KAAKuwC,YAAcxT,EAAKC,EAAKruB,EAAK3O,KAAKkyC,KAAOlyC,KAAKkyC,KAAOjV,EAAKj9B,KAAKmyC,KAC9DnyC,KAAKmyC,KACPnyC,KAAKuwC,YAAc,IACrBvwC,KAAKuwC,YAAc,EAAMvwC,KAAKuwC,aAMhCvwC,KAAK2xC,OAASx+B,EAAIe,QAAQ23B,EAAI7rC,KAAKuxC,eAEnCvxC,KAAKoyC,KAAOhwC,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAKloB,KAAK2xC,QACrD3xC,KAAKqyC,KAAOjwC,EAAKgD,cAAc+iB,EAAInoB,KAAK2xC,QAEzBvvC,EAAKgD,cAAc8iB,EAAIloB,KAAK2xC,QAE3C,IAAMnT,EAAMzB,EAAKC,EAAKruB,EAAK3O,KAAKoyC,KAAOpyC,KAAKoyC,KAAOnV,EAAKj9B,KAAKqyC,KAAOryC,KAAKqyC,KACnE3T,EAAM/vB,EAAK3O,KAAKoyC,KAAOnV,EAAKj9B,KAAKqyC,KACjCC,EAAM3jC,EAAK3O,KAAKoyC,KAAOpyC,KAAKkyC,KAAOjV,EAAKj9B,KAAKqyC,KAAOryC,KAAKmyC,KAC3D1T,EAAM9vB,EAAKsuB,EACJ,GAAPwB,IAEFA,EAAM,GAER,IAAM8T,EAAM5jC,EAAK3O,KAAKkyC,KAAOjV,EAAKj9B,KAAKmyC,KACjCK,EAAMzV,EAAKC,EAAKruB,EAAK3O,KAAKkyC,KAAOlyC,KAAKkyC,KAAOjV,EAAKj9B,KAAKmyC,KAAOnyC,KAAKmyC,KAQ3E,GANEnyC,KAAK4xC,IAAI3c,GAAG7xB,IAAIo7B,EAAKE,EAAK4T,GAC1BtyC,KAAK4xC,IAAI1c,GAAG9xB,IAAIs7B,EAAKD,EAAK8T,GAC1BvyC,KAAK4xC,IAAIjE,GAAGvqC,IAAIkvC,EAAKC,EAAKC,GAIxBxyC,KAAKwvC,cAAe,CAEtB,IAAMiD,EAAmBrwC,EAAK8C,IAAIlF,KAAK0tB,OAAQxuB,GAC3CoC,EAAKwE,IAAI9F,KAAKyxC,mBAAqBzxC,KAAKwxC,oBAAsB,EAAMvoC,EAASE,WAC/EnJ,KAAKgvC,aAxiBO,EA0iBHyD,GAAoBzyC,KAAKwxC,mBA5iBrB,GA6iBTxxC,KAAKgvC,eACPhvC,KAAKgvC,aA9iBM,EA+iBXhvC,KAAK40B,UAAUgP,EAAI,GAGZ6O,GAAoBzyC,KAAKyxC,mBAjjBrB,GAkjBTzxC,KAAKgvC,eACPhvC,KAAKgvC,aAnjBM,EAojBXhvC,KAAK40B,UAAUgP,EAAI,IAIrB5jC,KAAKgvC,aA1jBS,EA2jBdhvC,KAAK40B,UAAUgP,EAAI,QAIrB5jC,KAAKgvC,aA/jBW,EAgkBhBhvC,KAAK40B,UAAUgP,EAAI,EAOrB,GAJ0B,GAAtB5jC,KAAKyvC,gBACPzvC,KAAKmvC,eAAiB,GAGpB9e,EAAKtB,aAAc,CAErB/uB,KAAK40B,UAAUvwB,IAAIgsB,EAAKnB,SACxBlvB,KAAKmvC,gBAAkB9e,EAAKnB,QAE5B,IAAMqO,EAAIn7B,EAAKsD,QAAQ1F,KAAK40B,UAAUnzB,EAAGzB,KAAK2xC,OAAQ3xC,KAAKmvC,eACrDnvC,KAAK40B,UAAUgP,EAAG5jC,KAAK0tB,QACvBglB,EAAK1yC,KAAK40B,UAAUnzB,EAAIzB,KAAKoyC,KAAOpyC,KAAK40B,UAAUvyB,GAClDrC,KAAKmvC,eAAiBnvC,KAAK40B,UAAUgP,GAAK5jC,KAAKkyC,KAChDS,EAAK3yC,KAAK40B,UAAUnzB,EAAIzB,KAAKqyC,KAAOryC,KAAK40B,UAAUvyB,GAClDrC,KAAKmvC,eAAiBnvC,KAAK40B,UAAUgP,GAAK5jC,KAAKmyC,KAEtDzU,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK0V,OAEX3yC,KAAK40B,UAAUzxB,UACfnD,KAAKmvC,eAAiB,EAGxBnvC,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BspB,EAAwB1xC,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3Bq5B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAGhB,GAAI5rC,KAAKyvC,eA5mBO,GA4mBUzvC,KAAKgvC,aAA6B,CAC1D,IAAMxC,EAAOpqC,EAAK8C,IAAIlF,KAAK0tB,OAAQtrB,EAAKgC,IAAIu5B,EAAID,IAAO19B,KAAKmyC,KAAOtqB,EAC7D7nB,KAAKkyC,KAAOvqB,EACdjF,EAAU1iB,KAAKuwC,aAAevwC,KAAKuvC,aAAe/C,GAChDgB,EAAaxtC,KAAKmvC,eAClB1B,EAAapd,EAAK1B,GAAK3uB,KAAK0xC,gBAClC1xC,KAAKmvC,eAAiB7tC,EAAKY,MAAMlC,KAAKmvC,eAAiBzsB,GAClD+qB,EAAYA,GACjB/qB,EAAU1iB,KAAKmvC,eAAiB3B,EAEhC,IAAMjQ,EAAIn7B,EAAKuD,WAAW+c,EAAS1iB,KAAK0tB,QAClCglB,EAAKhwB,EAAU1iB,KAAKkyC,KACpBS,EAAKjwB,EAAU1iB,KAAKmyC,KAE1BzU,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK0V,EAGb,IAAMlC,EAAQruC,EAAKM,OAKnB,GAJA+tC,EAAMhvC,GAAKW,EAAK8C,IAAIlF,KAAK2xC,OAAQhU,GAAM39B,KAAKqyC,KAAOxqB,EACnD4oB,EAAMhvC,GAAKW,EAAK8C,IAAIlF,KAAK2xC,OAAQjU,GAAM19B,KAAKoyC,KAAOzqB,EACnD8oB,EAAMpuC,EAAIwlB,EAAKF,EAEX3nB,KAAKwvC,eAzoBS,GAyoBQxvC,KAAKgvC,aAA+B,CAE5D,IAAI0B,EAAQ,EACZA,GAAStuC,EAAK8C,IAAIlF,KAAK0tB,OAAQiQ,GAAM39B,KAAKmyC,KAAOtqB,EACjD6oB,GAAStuC,EAAK8C,IAAIlF,KAAK0tB,OAAQgQ,GAAM19B,KAAKkyC,KAAOvqB,EAE3C6kB,EAAO,IAAI7I,GAAK8M,EAAMhvC,EAAGgvC,EAAMpuC,EAAGquC,GAAxC,IAEMkC,EAAKjP,GAAK/gC,MAAM5C,KAAK40B,WACvBie,EAAK7yC,KAAK4xC,IAAIhE,QAAQjK,GAAK99B,IAAI2mC,IACnCxsC,KAAK40B,UAAU/wB,IAAIgvC,GAlpBJ,GAopBX7yC,KAAKgvC,aACPhvC,KAAK40B,UAAUgP,EAAItiC,EAAKW,IAAIjC,KAAK40B,UAAUgP,EAAG,GAppBjC,GAqpBJ5jC,KAAKgvC,eACdhvC,KAAK40B,UAAUgP,EAAItiC,EAAKU,IAAIhC,KAAK40B,UAAUgP,EAAG,IAKhD,IAAMzkC,EAAIiD,EAAKsD,SAAS,EAAG+qC,IAASzwC,KAAK40B,UAAUgP,EAAIgP,EAAGhP,GAAIxhC,EAAKO,IAAI3C,KAAK4xC,IAAIjE,GAAGlsC,EAAGzB,KAAK4xC,IAAIjE,GAAGtrC,IAC5FywC,EAAM1wC,EAAKyB,IAAI7D,KAAK4xC,IAAI/D,QAAQ1uC,GAAIiD,EAAKO,IAAIiwC,EAAGnxC,EAAGmxC,EAAGvwC,IAC5DrC,KAAK40B,UAAUnzB,EAAIqxC,EAAIrxC,EACvBzB,KAAK40B,UAAUvyB,EAAIywC,EAAIzwC,EAEvBwwC,EAAKlP,GAAKv/B,IAAIpE,KAAK40B,UAAWge,GAExBrV,EAAIn7B,EAAKsD,QAAQmtC,EAAGpxC,EAAGzB,KAAK2xC,OAAQkB,EAAGjP,EAAG5jC,KAAK0tB,QAC/CglB,EAAKG,EAAGpxC,EAAIzB,KAAKoyC,KAAOS,EAAGxwC,EAAIwwC,EAAGjP,EAAI5jC,KAAKkyC,KAC3CS,EAAKE,EAAGpxC,EAAIzB,KAAKqyC,KAAOQ,EAAGxwC,EAAIwwC,EAAGjP,EAAI5jC,KAAKmyC,KAEjDzU,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK0V,MACN,CAECE,EAAK7yC,KAAK4xC,IAAI/D,QAAQzrC,EAAKyD,IAAI4qC,IACrCzwC,KAAK40B,UAAUnzB,GAAKoxC,EAAGpxC,EACvBzB,KAAK40B,UAAUvyB,GAAKwwC,EAAGxwC,EAEjBk7B,EAAIn7B,EAAKuD,WAAWktC,EAAGpxC,EAAGzB,KAAK2xC,QAC/Be,EAAKG,EAAGpxC,EAAIzB,KAAKoyC,KAAOS,EAAGxwC,EAC3BswC,EAAKE,EAAGpxC,EAAIzB,KAAKqyC,KAAOQ,EAAGxwC,EAEjCq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK0V,EAGb3yC,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BspB,EAAwB1xC,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAAMqG,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbJ,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAGV1jB,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBACxDtsC,EAAIkD,EAAKgC,IAAIhC,EAAKyB,IAAI8yB,EAAIxO,GAAK/lB,EAAKyB,IAAI6yB,EAAIxO,IAE5CkpB,EAAOj+B,EAAIe,QAAQ23B,EAAI7rC,KAAKqxC,eAC5BhkB,EAAKjrB,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAKkpB,GACzC9jB,EAAKlrB,EAAKgD,cAAc+iB,EAAIipB,GAC5B2B,EAAO5/B,EAAIe,QAAQ23B,EAAI7rC,KAAKuxC,eAE5BtkB,EAAK7qB,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAK6qB,GACzCjmB,EAAK1qB,EAAKgD,cAAc+iB,EAAI4qB,GAE9BrwB,EAAU,IAAIihB,GACZqP,EAAK5wC,EAAKM,OAChBswC,EAAGvxC,EAAIW,EAAK8C,IAAI6tC,EAAM7zC,GACtB8zC,EAAG3wC,EAAI86B,EAAKD,EAAKl9B,KAAKivC,iBAEtB,IAAIgE,EAAc3xC,EAAKwE,IAAIktC,EAAGvxC,GACxBqvC,EAAexvC,EAAKwE,IAAIktC,EAAG3wC,GAE3B8G,EAAaF,EAASE,WACtBkB,EAAsBpB,EAASoB,oBAEjCwS,GAAS,EACTq2B,EAAK,EACT,GAAIlzC,KAAKwvC,cAAe,CAEtB,IAAM9d,EAActvB,EAAK8C,IAAIksC,EAAMlyC,GAC/BoC,EAAKwE,IAAI9F,KAAKyxC,mBAAqBzxC,KAAKwxC,oBAAsB,EAAMroC,GAEtE+pC,EAAK5xC,EAAKY,MAAMwvB,GAAcrnB,EAAqBA,GACnD4oC,EAAc3xC,EAAKW,IAAIgxC,EAAa3xC,EAAKwE,IAAI4rB,IAC7C7U,GAAS,GAEA6U,GAAe1xB,KAAKwxC,oBAE7B0B,EAAK5xC,EAAKY,MAAMwvB,EAAc1xB,KAAKwxC,mBAAqBroC,GACnDkB,EAAqB,GAC1B4oC,EAAc3xC,EACTW,IAAIgxC,EAAajzC,KAAKwxC,mBAAqB9f,GAChD7U,GAAS,GAEA6U,GAAe1xB,KAAKyxC,qBAE7ByB,EAAK5xC,EAAKY,MAAMwvB,EAAc1xB,KAAKyxC,mBAAqBtoC,EAAY,EAChEkB,GACJ4oC,EAAc3xC,EACTW,IAAIgxC,EAAavhB,EAAc1xB,KAAKyxC,oBACzC50B,GAAS,GAIb,GAAIA,EAAQ,CACV,IAAM2hB,EAAMzB,EAAKC,EAAKruB,EAAKse,EAAKA,EAAKgQ,EAAKnQ,EAAKA,EACzC4R,EAAM/vB,EAAKse,EAAKgQ,EAAKnQ,EACrBwlB,EAAM3jC,EAAKse,EAAKI,EAAK4P,EAAKnQ,EAAKQ,EAE1B,IADPmR,EAAM9vB,EAAKsuB,KAGbwB,EAAM,GAER,IAAM8T,EAAM5jC,EAAK0e,EAAK4P,EAAK3P,EACrBklB,EAAMzV,EAAKC,EAAKruB,EAAK0e,EAAKA,EAAK4P,EAAK3P,EAAKA,GAEzCgQ,EAAI,IAAIoQ,IACZzY,GAAG7xB,IAAIo7B,EAAKE,EAAK4T,GACnBhV,EAAEpI,GAAG9xB,IAAIs7B,EAAKD,EAAK8T,GACnBjV,EAAEqQ,GAAGvqC,IAAIkvC,EAAKC,EAAKC,GAEnB,IAAM1jC,EAAI,IAAI60B,GACd70B,EAAErN,EAAIuxC,EAAGvxC,EACTqN,EAAEzM,EAAI2wC,EAAG3wC,EACTyM,EAAE80B,EAAIsP,EAENxwB,EAAU4a,EAAEsQ,QAAQjK,GAAK99B,IAAIiJ,QACxB,CACL,IAEI2vB,EAKEnB,EAPAkB,EAAMzB,EAAKC,EAAKruB,EAAKse,EAAKA,EAAKgQ,EAAKnQ,EAAKA,EACzC4R,EAAM/vB,EAAKse,EAAKgQ,EAAKnQ,EAEhB,IADP2R,EAAM9vB,EAAKsuB,KAEbwB,EAAM,IAGFnB,EAAI,IAAItI,IACZC,GAAG5xB,OAAOm7B,EAAKE,GACjBpB,EAAEpI,GAAG7xB,OAAOq7B,EAAKD,GAEjB,IAAM0U,EAAW7V,EAAEhW,MAAMllB,EAAKyD,IAAImtC,IAClCtwB,EAAQjhB,EAAI0xC,EAAS1xC,EACrBihB,EAAQrgB,EAAI8wC,EAAS9wC,EACrBqgB,EAAQkhB,EAAI,EAGd,IAAMrG,EAAIn7B,EAAKsD,QAAQgd,EAAQjhB,EAAGsxC,EAAMrwB,EAAQkhB,EAAGwN,GAC7CsB,EAAKhwB,EAAQjhB,EAAIwrB,EAAKvK,EAAQrgB,EAAIqgB,EAAQkhB,EAAIvW,EAC9CslB,EAAKjwB,EAAQjhB,EAAIqrB,EAAKpK,EAAQrgB,EAAIqgB,EAAQkhB,EAAItW,EAYpD,OAVAoJ,EAAGvyB,OAAO44B,EAAIQ,GACdL,GAAMvuB,EAAK+jC,EACX/b,EAAG3yB,OAAOg5B,EAAIO,GACdJ,GAAMF,EAAK0V,EAEX3yC,KAAKikB,QAAQjG,WAAW3M,EAAIqlB,EAC5B12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAIslB,EAC5B32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB8V,GAAehqC,EAASE,YACxB2nC,GAAgB7nC,EAASa,aA/uB3BqnC,EAAIlN,KAAG,kBAkvBfkN,EAnvBD,CAAoCvtB,GC5D9B2lB,GAAW,CACf3X,MAAQ,GAgBVwhB,GAAA,SAAAtP,GA6CE,SAAYsP,EAAAh8B,EAAmByM,EAAcC,EAAcuvB,EAAyCC,EAAyC1hB,GAA7I,IA4BM2hB,EACAC,EAoFL7hC,EAAA3R,KA/GC,KAA8B2R,aAAgByhC,GAC5C,OAAO,IAAIA,EAAUh8B,EAAKyM,EAAOC,EAAOuvB,EAAQC,EAAQ1hB,GAG1Dxa,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASg9B,EAAUnP,KAOxBtyB,EAAK8hC,SAAWJ,GAAkBj8B,EAAIi8B,OACtC1hC,EAAK+hC,SAAWJ,GAAkBl8B,EAAIk8B,OACtC3hC,EAAKgiC,QAAUryC,EAAKE,SAASowB,GAASA,EAAQxa,EAAIwa,MAElDjgB,EAAKiiC,QAAUjiC,EAAK8hC,SAAS56B,UAC7BlH,EAAKkiC,QAAUliC,EAAK+hC,SAAS76B,UAU7BlH,EAAKmiC,QAAUniC,EAAK8hC,SAASrvB,WAC7BzS,EAAKsS,QAAUtS,EAAK8hC,SAASpvB,WAG7B,IAAMoC,EAAM9U,EAAKsS,QAAQvL,KACnBwkB,EAAKvrB,EAAKsS,QAAQnG,QAAQra,EAC1BswC,EAAMpiC,EAAKmiC,QAAQp7B,KACnBs7B,EAAKriC,EAAKmiC,QAAQh2B,QAAQra,EAEhC,GAAIkO,EAAKiiC,UAAY7E,GAAc9K,KAAM,CACvC,IAAMgQ,EAAWtiC,EAAK8hC,SACtB9hC,EAAKuiC,eAAiBD,EAASpK,eAC/Bl4B,EAAKk4B,eAAiBoK,EAASlK,eAC/Bp4B,EAAKwiC,kBAAoBF,EAAShF,iBAClCt9B,EAAKyiC,aAAehyC,EAAKM,OAEzB6wC,EAAcrW,EAAK8W,EAAKriC,EAAKwiC,sBACxB,CACL,IAAME,EAAY1iC,EAAK8hC,SACvB9hC,EAAKuiC,eAAiBG,EAAUxK,eAChCl4B,EAAKk4B,eAAiBwK,EAAUtK,eAChCp4B,EAAKwiC,kBAAoBE,EAAUpF,iBACnCt9B,EAAKyiC,aAAeC,EAAUhD,cAE9B,IAAMiD,EAAK3iC,EAAKuiC,eACV7qB,EAAKlW,EAAImB,SAASy/B,EAAIr/B,EAAGtS,EAAKyB,IAAIsP,EAAIe,QAAQuS,EAAI/R,EAAG/C,EAAKk4B,gBAAiBznC,EAAKgC,IAAIqiB,EAAIjnB,EAAGu0C,EAAIv0C,KACrG+zC,EAAcnxC,EAAK8C,IAAImkB,EAAI1X,EAAKyiC,cAAgBhyC,EAAK8C,IAAIovC,EAAI3iC,EAAKyiC,cAGpEziC,EAAK4iC,QAAU5iC,EAAK+hC,SAAStvB,WAC7BzS,EAAKuS,QAAUvS,EAAK+hC,SAASrvB,WAG7B,IAAMqC,EAAM/U,EAAKuS,QAAQxL,KACnBykB,EAAKxrB,EAAKuS,QAAQpG,QAAQra,EAC1B+wC,EAAM7iC,EAAK4iC,QAAQ77B,KACnB+7B,EAAK9iC,EAAK4iC,QAAQz2B,QAAQra,EAEhC,GAAIkO,EAAKkiC,UAAY9E,GAAc9K,KAAM,CACjCgQ,EAAWtiC,EAAK+hC,SACtB/hC,EAAK+iC,eAAiBT,EAASpK,eAC/Bl4B,EAAKo4B,eAAiBkK,EAASlK,eAC/Bp4B,EAAKgjC,kBAAoBV,EAAShF,iBAClCt9B,EAAKijC,aAAexyC,EAAKM,OAEzB8wC,EAAcrW,EAAKsX,EAAK9iC,EAAKgjC,sBACxB,CACCN,EAAY1iC,EAAK+hC,SACvB/hC,EAAK+iC,eAAiBL,EAAUxK,eAChCl4B,EAAKo4B,eAAiBsK,EAAUtK,eAChCp4B,EAAKgjC,kBAAoBN,EAAUpF,iBACnCt9B,EAAKijC,aAAeP,EAAUhD,cAE9B,IAAMwD,EAAKljC,EAAK+iC,eACVprB,EAAKnW,EAAImB,SAASkgC,EAAI9/B,EAAGtS,EAAKyB,IAAIsP,EAAIe,QAAQwS,EAAIhS,EAAG/C,EAAKo4B,gBAAiB3nC,EAAKgC,IAAIsiB,EAAIlnB,EAAGg1C,EAAIh1C,KACrGg0C,EAAcpxC,EAAK8C,IAAIokB,EAAI3X,EAAKijC,cAAgBxyC,EAAK8C,IAAI2vC,EAAIljC,EAAKijC,qBAGpEjjC,EAAKmjC,WAAavB,EAAc5hC,EAAKgiC,QAAUH,EAE/C7hC,EAAKijB,UAAY,IA0VrB,OApe+Bh1B,EAAKwzC,EAAAtP,GAiKlCsP,EAAA3zC,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBswB,OAAQrzC,KAAKyzC,SACbH,OAAQtzC,KAAK0zC,SACb9hB,MAAO5xB,KAAK2zC,UAOTP,EAAA7wC,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAQzC,OAPApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACvClZ,EAAK6wC,OAASz6B,EAAQgL,EAAOphB,EAAK6wC,OAAQ33B,GAC1ClZ,EAAK8wC,OAAS16B,EAAQgL,EAAOphB,EAAK8wC,OAAQ53B,GAC5B,IAAI03B,EAAU5wC,IAQ9B4wC,EAAA3zC,UAAAs1C,UAAA,WACE,OAAO/0C,KAAKyzC,UAMdL,EAAA3zC,UAAAu1C,UAAA,WACE,OAAOh1C,KAAK0zC,UAMdN,EAAQ3zC,UAAAw1C,SAAR,SAASrjB,GAEP5xB,KAAK2zC,QAAU/hB,GAMjBwhB,EAAA3zC,UAAAy1C,SAAA,WACE,OAAOl1C,KAAK2zC,SAMdP,EAAA3zC,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCuJ,EAAA3zC,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCqJ,EAAgB3zC,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAKm1C,QAAQ9wC,IAAIuqB,IAM1DwkB,EAAiB3zC,UAAA6rC,kBAAjB,SAAkB1c,GAEhB,OAAOA,GADG5uB,KAAK40B,UAAY50B,KAAKo1C,QAIlChC,EAAuB3zC,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKq1C,MAAQr1C,KAAKikB,QAAQnG,QAAQxI,YAClCtV,KAAKs1C,MAAQt1C,KAAKkkB,QAAQpG,QAAQxI,YAClCtV,KAAKu1C,MAAQv1C,KAAK8zC,QAAQh2B,QAAQxI,YAClCtV,KAAKw1C,MAAQx1C,KAAKu0C,QAAQz2B,QAAQxI,YAClCtV,KAAKy1C,KAAOz1C,KAAKikB,QAAQtG,UACzB3d,KAAK01C,KAAO11C,KAAKkkB,QAAQvG,UACzB3d,KAAK21C,KAAO31C,KAAK8zC,QAAQn2B,UACzB3d,KAAK41C,KAAO51C,KAAKu0C,QAAQ52B,UACzB3d,KAAK61C,KAAO71C,KAAKikB,QAAQpG,OACzB7d,KAAK81C,KAAO91C,KAAKkkB,QAAQrG,OACzB7d,KAAK+1C,KAAO/1C,KAAK8zC,QAAQj2B,OACzB7d,KAAKg2C,KAAOh2C,KAAKu0C,QAAQ12B,OAEzB,IAAMqf,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3By5B,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BswC,EAAKh0C,KAAK8zC,QAAQ91B,WAAWva,EAC7BwyC,EAAKj2C,KAAK8zC,QAAQ/1B,WAAWlb,EAC/BqzC,EAAKl2C,KAAK8zC,QAAQ/1B,WAAWra,EAE3B+wC,EAAKz0C,KAAKu0C,QAAQv2B,WAAWva,EAC7B0yC,EAAKn2C,KAAKu0C,QAAQx2B,WAAWlb,EAC/BmF,EAAKhI,KAAKu0C,QAAQx2B,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GACbiZ,EAAKjjC,EAAIxQ,IAAIqxC,GACbqC,EAAKljC,EAAIxQ,IAAI8xC,GAInB,GAFAz0C,KAAK0d,OAAS,EAEV1d,KAAK4zC,SAAW7E,GAAc9K,KAChCjkC,KAAKm1C,OAAS/yC,EAAKM,OACnB1C,KAAKo1C,MAAQ,EACbp1C,KAAKs2C,MAAQ,EACbt2C,KAAK0d,QAAU1d,KAAK61C,KAAO71C,KAAK+1C,SAC3B,CACL,IAAMtJ,EAAIt5B,EAAIe,QAAQkiC,EAAIp2C,KAAKo0C,cACzBmC,EAAKpjC,EAAIgB,OAAOiiC,EAAIp2C,KAAKk0C,eAAgBl0C,KAAKu1C,OAC9CrtB,EAAK/U,EAAIgB,OAAO03B,EAAI7rC,KAAK6pC,eAAgB7pC,KAAKq1C,OACpDr1C,KAAKm1C,OAAS1I,EACdzsC,KAAKs2C,MAAQl0C,EAAKgD,cAAcmxC,EAAI9J,GACpCzsC,KAAKo1C,MAAQhzC,EAAKgD,cAAc8iB,EAAIukB,GACpCzsC,KAAK0d,QAAU1d,KAAK21C,KAAO31C,KAAKy1C,KAAOz1C,KAAK+1C,KAAO/1C,KAAKs2C,MAAQt2C,KAAKs2C,MAAQt2C,KAAK61C,KAAO71C,KAAKo1C,MAAQp1C,KAAKo1C,MAG7G,GAAIp1C,KAAK6zC,SAAW9E,GAAc9K,KAChCjkC,KAAKw2C,OAASp0C,EAAKM,OACnB1C,KAAKy2C,MAAQz2C,KAAK2zC,QAClB3zC,KAAK02C,MAAQ12C,KAAK2zC,QAClB3zC,KAAK0d,QAAU1d,KAAK2zC,QAAU3zC,KAAK2zC,SAAW3zC,KAAK81C,KAAO91C,KAAKg2C,UAC1D,CACCvJ,EAAIt5B,EAAIe,QAAQmiC,EAAIr2C,KAAK40C,cAA/B,IACM+B,EAAKxjC,EAAIgB,OAAOkiC,EAAIr2C,KAAK00C,eAAgB10C,KAAKw1C,OAC9CrtB,EAAKhV,EAAIgB,OAAO23B,EAAI9rC,KAAK+pC,eAAgB/pC,KAAKs1C,OACpDt1C,KAAKw2C,OAASp0C,EAAKuD,WAAW3F,KAAK2zC,QAASlH,GAC5CzsC,KAAK02C,MAAQ12C,KAAK2zC,QAAUvxC,EAAKgD,cAAcuxC,EAAIlK,GACnDzsC,KAAKy2C,MAAQz2C,KAAK2zC,QAAUvxC,EAAKgD,cAAc+iB,EAAIskB,GACnDzsC,KAAK0d,QAAU1d,KAAK2zC,QAAU3zC,KAAK2zC,SAAW3zC,KAAK41C,KAAO51C,KAAK01C,MAAQ11C,KAAKg2C,KAAOh2C,KAAK02C,MAAQ12C,KAAK02C,MAAQ12C,KAAK81C,KAAO91C,KAAKy2C,MAAQz2C,KAAKy2C,MAI7Iz2C,KAAK0d,OAAS1d,KAAK0d,OAAS,EAAM,EAAM1d,KAAK0d,OAAS,EAElD2S,EAAKtB,cACP2O,EAAG15B,OAAOhE,KAAKy1C,KAAOz1C,KAAK40B,UAAW50B,KAAKm1C,QAC3CxtB,GAAM3nB,KAAK61C,KAAO71C,KAAK40B,UAAY50B,KAAKo1C,MAExCzX,EAAG35B,OAAOhE,KAAK01C,KAAO11C,KAAK40B,UAAW50B,KAAKw2C,QAC3C3uB,GAAM7nB,KAAK81C,KAAO91C,KAAK40B,UAAY50B,KAAKy2C,MAExCR,EAAG9xC,OAAOnE,KAAK21C,KAAO31C,KAAK40B,UAAW50B,KAAKm1C,QAC3Ce,GAAMl2C,KAAK+1C,KAAO/1C,KAAK40B,UAAY50B,KAAKs2C,MAExCH,EAAGhyC,OAAOnE,KAAK41C,KAAO51C,KAAK40B,UAAW50B,KAAKw2C,QAC3CxuC,GAAMhI,KAAKg2C,KAAOh2C,KAAK40B,UAAY50B,KAAK02C,OAGxC12C,KAAK40B,UAAY,EAGnB50B,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,EAC5B7nB,KAAK8zC,QAAQ/1B,WAAWlb,EAAES,QAAQ2yC,GAClCj2C,KAAK8zC,QAAQ/1B,WAAWra,EAAIwyC,EAC5Bl2C,KAAKu0C,QAAQx2B,WAAWlb,EAAES,QAAQ6yC,GAClCn2C,KAAKu0C,QAAQx2B,WAAWra,EAAIsE,GAG9BorC,EAAwB3zC,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAC3BuyC,EAAKj2C,KAAK8zC,QAAQ/1B,WAAWlb,EAC/BqzC,EAAKl2C,KAAK8zC,QAAQ/1B,WAAWra,EAC3ByyC,EAAKn2C,KAAKu0C,QAAQx2B,WAAWlb,EAC/BmF,EAAKhI,KAAKu0C,QAAQx2B,WAAWra,EAE7B8oC,EAAOpqC,EAAK8C,IAAIlF,KAAKm1C,OAAQzX,GAAMt7B,EAAK8C,IAAIlF,KAAKm1C,OAAQc,GACvD7zC,EAAK8C,IAAIlF,KAAKw2C,OAAQ7Y,GAAMv7B,EAAK8C,IAAIlF,KAAKw2C,OAAQL,GACxD3J,GAASxsC,KAAKo1C,MAAQztB,EAAK3nB,KAAKs2C,MAAQJ,GACjCl2C,KAAKy2C,MAAQ5uB,EAAK7nB,KAAK02C,MAAQ1uC,GAEtC,IAAM0a,GAAW1iB,KAAK0d,OAAS8uB,EAC/BxsC,KAAK40B,WAAalS,EAElBgb,EAAG15B,OAAOhE,KAAKy1C,KAAO/yB,EAAS1iB,KAAKm1C,QACpCxtB,GAAM3nB,KAAK61C,KAAOnzB,EAAU1iB,KAAKo1C,MACjCzX,EAAG35B,OAAOhE,KAAK01C,KAAOhzB,EAAS1iB,KAAKw2C,QACpC3uB,GAAM7nB,KAAK81C,KAAOpzB,EAAU1iB,KAAKy2C,MACjCR,EAAG9xC,OAAOnE,KAAK21C,KAAOjzB,EAAS1iB,KAAKm1C,QACpCe,GAAMl2C,KAAK+1C,KAAOrzB,EAAU1iB,KAAKs2C,MACjCH,EAAGhyC,OAAOnE,KAAK41C,KAAOlzB,EAAS1iB,KAAKw2C,QACpCxuC,GAAMhI,KAAKg2C,KAAOtzB,EAAU1iB,KAAK02C,MAEjC12C,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,EAC5B7nB,KAAK8zC,QAAQ/1B,WAAWlb,EAAES,QAAQ2yC,GAClCj2C,KAAK8zC,QAAQ/1B,WAAWra,EAAIwyC,EAC5Bl2C,KAAKu0C,QAAQx2B,WAAWlb,EAAES,QAAQ6yC,GAClCn2C,KAAKu0C,QAAQx2B,WAAWra,EAAIsE,GAM9BorC,EAAwB3zC,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAgBIkjB,EACAC,EAEAoD,EACAC,EACAC,EACAC,EACAC,EACAC,EAxBEvgB,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC3ByzC,EAAKl3C,KAAK8zC,QAAQ91B,WAAW3M,EAC/B2iC,EAAKh0C,KAAK8zC,QAAQ91B,WAAWva,EAC3B0zC,EAAKn3C,KAAKu0C,QAAQv2B,WAAW3M,EAC/BojC,EAAKz0C,KAAKu0C,QAAQv2B,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GACbiZ,EAAKjjC,EAAIxQ,IAAIqxC,GACbqC,EAAKljC,EAAIxQ,IAAI8xC,GAaf13B,EAAO,EAEX,GAAI/c,KAAK4zC,SAAW7E,GAAc9K,KAChC2S,EAAOx0C,EAAKM,OACZo0C,EAAM,EACNE,EAAM,EACNj6B,GAAQ/c,KAAK61C,KAAO71C,KAAK+1C,KAEzBxC,EAAcrW,EAAK8W,EAAKh0C,KAAKm0C,sBACxB,CACL,IAAM1H,EAAIt5B,EAAIe,QAAQkiC,EAAIp2C,KAAKo0C,cACzBmC,EAAKpjC,EAAIgB,OAAOiiC,EAAIp2C,KAAKk0C,eAAgBl0C,KAAKu1C,OAC9CrtB,EAAK/U,EAAIgB,OAAO03B,EAAI7rC,KAAK6pC,eAAgB7pC,KAAKq1C,OACpDuB,EAAOnK,EACPuK,EAAM50C,EAAKgD,cAAcmxC,EAAI9J,GAC7BqK,EAAM10C,EAAKgD,cAAc8iB,EAAIukB,GAC7B1vB,GAAQ/c,KAAK21C,KAAO31C,KAAKy1C,KAAOz1C,KAAK+1C,KAAOiB,EAAMA,EAAMh3C,KAAK61C,KAAOiB,EAAMA,EAE1E,IAAMxC,EAAKlyC,EAAKgC,IAAIpE,KAAKk0C,eAAgBl0C,KAAKu1C,OACxClsB,EAAKlW,EAAImB,SAAS8hC,EAAIh0C,EAAKyB,IAAIqkB,EAAI9lB,EAAKgC,IAAIsyB,EAAIwgB,KACtD3D,EAAcnxC,EAAK8C,IAAI9C,EAAKgC,IAAIilB,EAAIirB,GAAKt0C,KAAKo0C,cAGhD,GAAIp0C,KAAK6zC,SAAW9E,GAAc9K,KAChC4S,EAAOz0C,EAAKM,OACZq0C,EAAM/2C,KAAK2zC,QACXsD,EAAMj3C,KAAK2zC,QACX52B,GAAQ/c,KAAK2zC,QAAU3zC,KAAK2zC,SAAW3zC,KAAK81C,KAAO91C,KAAKg2C,MAExDxC,EAAcrW,EAAKsX,EAAKz0C,KAAK20C,sBACxB,CACClI,EAAIt5B,EAAIe,QAAQmiC,EAAIr2C,KAAK40C,cAA/B,IACM+B,EAAKxjC,EAAIgB,OAAOkiC,EAAIr2C,KAAK00C,eAAgB10C,KAAKw1C,OAC9CrtB,EAAKhV,EAAIgB,OAAO23B,EAAI9rC,KAAK+pC,eAAgB/pC,KAAKs1C,OACpDuB,EAAOz0C,EAAKuD,WAAW3F,KAAK2zC,QAASlH,GACrCwK,EAAMj3C,KAAK2zC,QAAUvxC,EAAKgD,cAAcuxC,EAAIlK,GAC5CsK,EAAM/2C,KAAK2zC,QAAUvxC,EAAKgD,cAAc+iB,EAAIskB,GAC5C1vB,GAAQ/c,KAAK2zC,QAAU3zC,KAAK2zC,SAAW3zC,KAAK41C,KAAO51C,KAAK01C,MAAQ11C,KAAKg2C,KAC/DiB,EAAMA,EAAMj3C,KAAK81C,KAAOiB,EAAMA,EAEpC,IAAMlC,EAAKzyC,EAAKgC,IAAIpE,KAAK00C,eAAgB10C,KAAKw1C,OACxClsB,EAAKnW,EAAImB,SAAS+hC,EAAIj0C,EAAKyB,IAAIskB,EAAI/lB,EAAKgC,IAAIuyB,EAAIwgB,KACtD3D,EAAcpxC,EAAK8C,IAAIokB,EAAItpB,KAAK40C,cAC1BxyC,EAAK8C,IAAI2vC,EAAI70C,KAAK40C,cAG1B,IAAM9lC,EAAKykC,EAAcvzC,KAAK2zC,QAAUH,EAAexzC,KAAK80C,WAExDpyB,EAAU,EAwBd,OAvBI3F,EAAO,IACT2F,GAAW5T,EAAIiO,GAGjB2Z,EAAG1yB,OAAOhE,KAAKy1C,KAAO/yB,EAASk0B,GAC/B1Z,GAAMl9B,KAAK61C,KAAOnzB,EAAUo0B,EAC5BngB,EAAG3yB,OAAOhE,KAAK01C,KAAOhzB,EAASm0B,GAC/B1Z,GAAMn9B,KAAK81C,KAAOpzB,EAAUq0B,EAC5BG,EAAG/yC,OAAOnE,KAAK21C,KAAOjzB,EAASk0B,GAC/B5C,GAAMh0C,KAAK+1C,KAAOrzB,EAAUs0B,EAC5BG,EAAGhzC,OAAOnE,KAAK41C,KAAOlzB,EAASm0B,GAC/BpC,GAAMz0C,KAAKg2C,KAAOtzB,EAAUu0B,EAE5Bj3C,KAAKikB,QAAQjG,WAAW3M,EAAE/N,QAAQozB,GAClC12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAE/N,QAAQqzB,GAClC32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAC5Bn9B,KAAK8zC,QAAQ91B,WAAW3M,EAAE/N,QAAQ4zC,GAClCl3C,KAAK8zC,QAAQ91B,WAAWva,EAAIuwC,EAC5Bh0C,KAAKu0C,QAAQv2B,WAAW3M,EAAE/N,QAAQ6zC,GAClCn3C,KAAKu0C,QAAQv2B,WAAWva,EAAIgxC,EAhFR,EAmFCxrC,EAASE,YAhezBiqC,EAAInP,KAAG,aAmefmP,EApeD,CAA+BxvB,GCXzB2lB,GAAW,CACfmD,SAAW,EACXC,UAAY,EACZyK,iBAAmB,IAQrBC,GAAA,SAAAvT,GA4BE,SAAAuT,EAAYjgC,EAAoCyM,EAAcC,GAA9D,IAkCCnS,EAAA3R,KAhCC,OAA8B2R,aAAgB0lC,GAI9CjgC,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASihC,EAAWpT,KAEzBtyB,EAAK2lC,eAAiBh2C,EAAKE,SAAS4V,EAAImgC,cAAgBngC,EAAImgC,aAAe1zB,EAAMN,cAAcO,EAAMnD,eACrGhP,EAAK6lC,gBAAkBl2C,EAAKE,SAAS4V,EAAIqgC,eAAiBrgC,EAAIqgC,cAAgB3zB,EAAMlQ,WAAaiQ,EAAMjQ,WAEvGjC,EAAKm7B,gBAAkB1qC,EAAKM,OAC5BiP,EAAKo7B,iBAAmB,EAExBp7B,EAAKq7B,WAAa51B,EAAIs1B,SACtB/6B,EAAKs7B,YAAc71B,EAAIu1B,UACvBh7B,EAAK+lC,mBAAqBtgC,EAAIggC,oBAlBrB,IAAIC,EAAWjgC,EAAKyM,EAAOC,GA4TxC,OA3VgClkB,EAAKy3C,EAAAvT,GAiEnCuT,EAAA53C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvB2pB,SAAU1sC,KAAKgtC,WACfL,UAAW3sC,KAAKitC,YAChBmK,iBAAkBp3C,KAAK03C,mBAEvBH,aAAcv3C,KAAKs3C,eACnBG,cAAez3C,KAAKw3C,kBAKjBH,EAAA90C,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAI27B,EAAW70C,IAK/B60C,EAAW53C,UAAA+qC,YAAX,SAAYpzB,KAMZigC,EAAW53C,UAAAytC,YAAX,SAAY/qB,GAEVniB,KAAKgtC,WAAa7qB,GAMpBk1B,EAAA53C,UAAA0tC,YAAA,WACE,OAAOntC,KAAKgtC,YAMdqK,EAAY53C,UAAA2tC,aAAZ,SAAa5qB,GAEXxiB,KAAKitC,YAAczqB,GAMrB60B,EAAA53C,UAAA4tC,aAAA,WACE,OAAOrtC,KAAKitC,aAMdoK,EAAmB53C,UAAAk4C,oBAAnB,SAAoBC,GAElB53C,KAAK03C,mBAAqBE,GAM5BP,EAAA53C,UAAAo4C,oBAAA,WACE,OAAO73C,KAAK03C,oBAMdL,EAAe53C,UAAAq4C,gBAAf,SAAgBP,GACVA,EAAa91C,GAAKzB,KAAKs3C,eAAe71C,GACnC81C,EAAal1C,GAAKrC,KAAKs3C,eAAej1C,IAC3CrC,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKs3C,eAAiBC,IAI1BF,EAAA53C,UAAAs4C,gBAAA,WACE,OAAO/3C,KAAKs3C,gBAMdD,EAAgB53C,UAAAu4C,iBAAhB,SAAiBP,GACXA,GAAiBz3C,KAAKw3C,kBACxBx3C,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKw3C,gBAAkBC,IAI3BJ,EAAA53C,UAAAw4C,iBAAA,WACE,OAAOj4C,KAAKw3C,iBAMdH,EAAA53C,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQtD,eAMtB02B,EAAA53C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQvD,eAMtB02B,EAAgB53C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAWipB,EAAQ5uB,KAAK8sC,kBAMtCuK,EAAiB53C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAK+sC,kBAGvBsK,EAAuB53C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAM6Y,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAGnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKyD,IAAI7F,KAAKurC,iBAC1CvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKyD,IAAI7F,KAAKwrC,iBAW1C,IAAMzO,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVtO,EAAI,IAAItI,GAoBd,GAnBAsI,EAAErI,GAAGxzB,EAAIs7B,EAAKC,EAAKruB,EAAK3O,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAK1pC,EAAI46B,EAAKj9B,KAAKgsC,KAAK3pC,EAAIrC,KAAKgsC,KAAK3pC,EACjFi7B,EAAErI,GAAG5yB,GAAKsM,EAAK3O,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAK1pC,EAAI46B,EAAKj9B,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAK3pC,EACxEi7B,EAAEpI,GAAGzzB,EAAI67B,EAAErI,GAAG5yB,EACdi7B,EAAEpI,GAAG7yB,EAAI06B,EAAKC,EAAKruB,EAAK3O,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAKtqC,EAAIw7B,EAAKj9B,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAKvqC,EAEjFzB,KAAKstC,aAAehQ,EAAEnI,aAEtBn1B,KAAKutC,cAAgB5+B,EAAKsuB,EACtBj9B,KAAKutC,cAAgB,IACvBvtC,KAAKutC,cAAgB,EAAMvtC,KAAKutC,eAGlCvtC,KAAKk4C,cAAgB91C,EAAKM,OAC1B1C,KAAKk4C,cAAcn0C,WAAW,EAAG4yB,EAAI,EAAG32B,KAAKgsC,MAC7ChsC,KAAKk4C,cAAch0C,WAAW,EAAGwyB,EAAI,EAAG12B,KAAK+rC,MAC7C/rC,KAAKk4C,cAAc9zC,IAAI+O,EAAIe,QAAQ23B,EAAI7rC,KAAKs3C,iBAE5Ct3C,KAAKm4C,eAAiBhb,EAAKD,EAAKl9B,KAAKw3C,gBAEjCnnB,EAAKtB,aAAc,CAErB/uB,KAAK8sC,gBAAgBzoC,IAAIgsB,EAAKnB,SAC9BlvB,KAAK+sC,kBAAoB1c,EAAKnB,QAE9B,IAAMqO,EAAIn7B,EAAKO,IAAI3C,KAAK8sC,gBAAgBrrC,EAAGzB,KAAK8sC,gBAAgBzqC,GAEhEq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAKv9B,KAAK+sC,kBAEpDpP,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAKv9B,KAAK+sC,uBAGpD/sC,KAAK8sC,gBAAgB3pC,UACrBnD,KAAK+sC,iBAAmB,EAG1B/sC,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BwvB,EAAwB53C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3Bq5B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVt6B,EAAI+e,EAAK1B,GACTypB,EAAQ/nB,EAAKzB,OAIX4d,EAAO3kB,EAAKF,EAAKywB,EAAQp4C,KAAK03C,mBAAqB13C,KAAKm4C,eAC1Dz1B,GAAW1iB,KAAKutC,cAAgBf,EAE9BgB,EAAaxtC,KAAK+sC,iBAClBU,EAAan8B,EAAItR,KAAKitC,YAC5BjtC,KAAK+sC,iBAAmBzrC,EAAKY,MAAMlC,KAAK+sC,iBAAmBrqB,GACtD+qB,EAAYA,GAGjB9lB,GAAMhZ,GAFN+T,EAAU1iB,KAAK+sC,iBAAmBS,GAGlC3lB,GAAMoV,EAAKva,GAKL8pB,EAAOpqC,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OACrDQ,EAAKtoC,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OACrDS,EAAKxoC,OAAOo0C,EAAQp4C,KAAK03C,mBAAoB13C,KAAKk4C,eAE9Cx1B,EAAUtgB,EAAKyD,IAAImvB,GAAM9gB,QAAQlU,KAAKstC,aAAcd,IAClDgB,EAAaprC,EAAKQ,MAAM5C,KAAK8sC,iBACnC9sC,KAAK8sC,gBAAgBjpC,IAAI6e,GAEnB+qB,EAAan8B,EAAItR,KAAKgtC,WAE5BhtC,KAAK8sC,gBAAgB5qC,MAAMurC,GAE3B/qB,EAAUtgB,EAAKgC,IAAIpE,KAAK8sC,gBAAiBU,GAEzC9P,EAAGv5B,OAAO44B,EAAIra,GACdiF,GAAMhZ,EAAKvM,EAAKgD,cAAcpF,KAAK+rC,KAAMrpB,GAEzCib,EAAG35B,OAAOg5B,EAAIta,GACdmF,GAAMoV,EAAK76B,EAAKgD,cAAcpF,KAAKgsC,KAAMtpB,GAG3C1iB,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BwvB,EAAwB53C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,OAAO,GAvVFgnB,EAAIpT,KAAG,cA0VfoT,EA3VD,CAAgCzzB,GCR1B2lB,GAAW,CACfmD,SAAW,EACXlD,YAAc,EACdC,aAAe,IAYjB4O,GAAA,SAAAvU,GAsBE,SAAAuU,EAAYjhC,EAAoByM,EAAcC,EAAcoI,GAA5D,IAmDCva,EAAA3R,KAjDC,OAA8B2R,aAAgB0mC,GAI9CjhC,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASiiC,EAAWpU,KAMrB7hC,EAAKa,QAAQipB,GACfva,EAAK2mC,UAAYl2C,EAAKQ,MAAMspB,GACnB9pB,EAAKa,QAAQmU,EAAI8U,QAC1Bva,EAAK2mC,UAAYl2C,EAAKQ,MAAMwU,EAAI8U,QAEhCva,EAAK2mC,UAAYl2C,EAAKM,OAGxBiP,EAAKo4B,eAAiBx1B,EAAUD,SAASwP,EAAMnO,eAAgBhE,EAAK2mC,WAEpE3mC,EAAKq7B,WAAa51B,EAAIs1B,SACtB/6B,EAAKijB,UAAYxyB,EAAKM,OAEtBiP,EAAKu4B,cAAgB9yB,EAAIoyB,YACzB73B,EAAKw4B,eAAiB/yB,EAAIqyB,aAE1B93B,EAAK4mC,OAAS,EACd5mC,EAAKy4B,QAAU,EAGfz4B,EAAKq6B,KAAO5pC,EAAKM,OACjBiP,EAAK65B,eAAiBppC,EAAKM,OAC3BiP,EAAK+5B,WAAa,EAClB/5B,EAAKi6B,QAAU,EACfj6B,EAAK+L,OAAS,IAAIsX,GAClBrjB,EAAK6mC,IAAMp2C,EAAKM,UAvCP,IAAI21C,EAAWjhC,EAAKyM,EAAOC,EAAOoI,GAyR/C,OAlTgCtsB,EAAKy4C,EAAAvU,GA4EnCuU,EAAA54C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBmJ,OAAQlsB,KAAKs4C,UACb5L,SAAU1sC,KAAKgtC,WACfxD,YAAaxpC,KAAKkqC,cAClBT,aAAczpC,KAAKmqC,eAEnBsO,cAAez4C,KAAK+pC,iBAKjBsO,EAAA91C,aAAP,SAAoBC,EAAWkZ,EAAY9C,IACzCpW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACvClZ,EAAK0pB,OAAS9pB,EAAKQ,MAAMJ,EAAK0pB,QAC9B,IAAMpJ,EAAQ,IAAIu1B,EAAW71C,GAI7B,OAHIA,EAAKi2C,gBACP31B,EAAMinB,eAAiBvnC,EAAKi2C,eAEvB31B,GAMTu1B,EAAS54C,UAAAi5C,UAAT,SAAUxsB,GACsB,GAA1BlsB,KAAKkkB,QAAQ7D,WACfrgB,KAAKkkB,QAAQjL,UAAS,GAExBjZ,KAAKs4C,UAAYl2C,EAAKQ,MAAMspB,IAG9BmsB,EAAA54C,UAAAk5C,UAAA,WACE,OAAO34C,KAAKs4C,WAMdD,EAAW54C,UAAAytC,YAAX,SAAY/qB,GACVniB,KAAKgtC,WAAa7qB,GAMpBk2B,EAAA54C,UAAA0tC,YAAA,WACE,OAAOntC,KAAKgtC,YAMdqL,EAAY54C,UAAAorC,aAAZ,SAAaC,GACX9qC,KAAKkqC,cAAgBY,GAMvBuN,EAAA54C,UAAAsrC,aAAA,WACE,OAAO/qC,KAAKkqC,eAMdmO,EAAe54C,UAAAurC,gBAAf,SAAgBpZ,GACd5xB,KAAKmqC,eAAiBvY,GAMxBymB,EAAA54C,UAAAwrC,gBAAA,WACE,OAAOjrC,KAAKmqC,gBAMdkO,EAAA54C,UAAAyrC,WAAA,WACE,OAAO9oC,EAAKQ,MAAM5C,KAAKs4C,YAMzBD,EAAA54C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCsO,EAAgB54C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAWipB,EAAQ5uB,KAAK40B,YAMtCyjB,EAAiB54C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAgB,EAATA,GAMTypB,EAAW54C,UAAAmR,YAAX,SAAYC,GACV7Q,KAAKs4C,UAAUl0C,IAAIyM,IAGrBwnC,EAAuB54C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAMrJ,EAAWxU,KAAKkkB,QAAQlG,WACxB46B,EAAW54C,KAAKkkB,QAAQnG,WAExB4Y,EAAKniB,EAASnD,EACd8rB,EAAK3oB,EAAS/Q,EACdk6B,EAAKib,EAAS/1C,EAChBglB,EAAK+wB,EAASl1C,EAEZooC,EAAK34B,EAAIxQ,IAAIw6B,GAEbpgB,EAAO/c,KAAKkkB,QAAQpC,UAGpBsqB,EAAQ,EAAM9qC,EAAKyI,GAAK/J,KAAKkqC,cAG7BhrC,EAAI,EAAM6d,EAAO/c,KAAKmqC,eAAiBiC,EAGvCC,EAAItvB,GAAQqvB,EAAQA,GAKpB96B,EAAI+e,EAAK1B,GAEf3uB,KAAKoqC,QAAU94B,GAAKpS,EAAIoS,EAAI+6B,GACR,GAAhBrsC,KAAKoqC,UACPpqC,KAAKoqC,QAAU,EAAMpqC,KAAKoqC,SAE5BpqC,KAAKu4C,OAASjnC,EAAI+6B,EAAIrsC,KAAKoqC,QAG3BpqC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAO/D,IAAMlO,EAAI,IAAItI,GACdsI,EAAErI,GAAGxzB,EAAIzB,KAAK0rC,WAAa1rC,KAAK4rC,QAAU5rC,KAAKgsC,KAAK3pC,EAAIrC,KAAKgsC,KAAK3pC,EAC5DrC,KAAKoqC,QACX9M,EAAErI,GAAG5yB,GAAKrC,KAAK4rC,QAAU5rC,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAK3pC,EACjDi7B,EAAEpI,GAAGzzB,EAAI67B,EAAErI,GAAG5yB,EACdi7B,EAAEpI,GAAG7yB,EAAIrC,KAAK0rC,WAAa1rC,KAAK4rC,QAAU5rC,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAKvqC,EAC5DzB,KAAKoqC,QAEXpqC,KAAK0d,OAAS4f,EAAEnI,aAEhBn1B,KAAKw4C,IAAIl1C,QAAQqzB,GACjB32B,KAAKw4C,IAAIz0C,WAAW,EAAG/D,KAAKgsC,MAAO,EAAGhsC,KAAKs4C,WAC3Ct4C,KAAKw4C,IAAIn0C,IAAIrE,KAAKu4C,QAGlB1wB,GAAM,IAEFwI,EAAKtB,cACP/uB,KAAK40B,UAAUvwB,IAAIgsB,EAAKnB,SACxByO,EAAG35B,OAAOhE,KAAK0rC,WAAY1rC,KAAK40B,WAChC/M,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMhsC,KAAK40B,YAGxD50B,KAAK40B,UAAUzxB,UAGjBy1C,EAAS/1C,EAAES,QAAQq6B,GACnBib,EAASl1C,EAAImkB,GAGfwwB,EAAwB54C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMuoB,EAAW54C,KAAKkkB,QAAQnG,WACxB4f,EAAKv7B,EAAKQ,MAAMg2C,EAAS/1C,GAC3BglB,EAAK+wB,EAASl1C,EAIZ8oC,EAAOpqC,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,MACxCQ,EAAK3oC,IAAI85B,GAET6O,EAAKzoC,WAAW,EAAG/D,KAAKw4C,IAAKx4C,KAAKoqC,QAASpqC,KAAK40B,WAChD4X,EAAK3mC,MAEL,IAAI6c,EAAUsS,GAAM9gB,QAAQlU,KAAK0d,OAAQ8uB,GAEnCgB,EAAaprC,EAAKQ,MAAM5C,KAAK40B,WACnC50B,KAAK40B,UAAU/wB,IAAI6e,GACnB,IAAM+qB,EAAapd,EAAK1B,GAAK3uB,KAAKgtC,WAClChtC,KAAK40B,UAAU1yB,MAAMurC,GACrB/qB,EAAUtgB,EAAKgC,IAAIpE,KAAK40B,UAAW4Y,GAEnC7P,EAAG35B,OAAOhE,KAAK0rC,WAAYhpB,GAC3BmF,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMtpB,GAEnDk2B,EAAS/1C,EAAES,QAAQq6B,GACnBib,EAASl1C,EAAImkB,GAMfwwB,EAAwB54C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,OAAO,GA9SFgoB,EAAIpU,KAAG,cAiTfoU,EAlTD,CAAgCz0B,GCP1B2lB,GAAW,CACfplB,kBAAmB,GAcrB00B,GAAA,SAAA/U,GA8BE,SAAA+U,EAAYzhC,EAAqByM,EAAcC,EAAcg1B,EAAgBC,EAAgBpP,EAAgBC,EAAgBhY,GAA7H,IAsCCjgB,EAAA3R,KApCC,OAA8B2R,aAAgBknC,GAI9CzhC,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASyiC,EAAY5U,KAC1BtyB,EAAKqnC,gBAAkBF,IAAoB1hC,EAAI6hC,eAAiB72C,EAAKO,KAAK,EAAK,IAC/EgP,EAAKunC,gBAAkBH,IAAoB3hC,EAAI+hC,eAAiB/2C,EAAKO,IAAI,EAAK,IAC9EgP,EAAKk4B,eAAiBF,EAAU9lB,EAAMN,cAAcomB,GAAWvyB,EAAI0yB,cAAgB1nC,EAAKO,KAAK,EAAK,GAClGgP,EAAKo4B,eAAiBH,EAAU9lB,EAAMP,cAAcqmB,GAAWxyB,EAAI4yB,cAAgB5nC,EAAKO,IAAI,EAAK,GACjGgP,EAAKynC,UAAY93C,EAAKE,SAAS4V,EAAIiiC,SAAWjiC,EAAIiiC,QAAUj3C,EAAKwC,SAAS+kC,EAASmP,GACnFnnC,EAAK2nC,UAAYh4C,EAAKE,SAAS4V,EAAImiC,SAAWniC,EAAImiC,QAAUn3C,EAAKwC,SAASglC,EAASmP,GACnFpnC,EAAKgiC,QAAUryC,EAAKE,SAASowB,GAASA,EAAQxa,EAAIwa,MAIlDjgB,EAAKmjC,WAAanjC,EAAKynC,UAAYznC,EAAKgiC,QAAUhiC,EAAK2nC,UAEvD3nC,EAAKijB,UAAY,KArBR,IAAIikB,EAAYzhC,EAAKyM,EAAOC,EAAOg1B,EAASC,EAASpP,EAASC,EAAShY,GAyUpF,OA1WiChyB,EAAKi5C,EAAA/U,GAsEpC+U,EAAAp5C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBk2B,cAAej5C,KAAKg5C,gBACpBG,cAAen5C,KAAKk5C,gBACpBpP,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBsP,QAASr5C,KAAKo5C,UACdG,QAASv5C,KAAKs5C,UACd1nB,MAAO5xB,KAAK2zC,UAKTkF,EAAAt2C,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIm9B,EAAYr2C,IAOhCq2C,EAAAp5C,UAAA+5C,iBAAA,WACE,OAAOx5C,KAAKg5C,iBAMdH,EAAAp5C,UAAAg6C,iBAAA,WACE,OAAOz5C,KAAKk5C,iBAMdL,EAAAp5C,UAAAi6C,WAAA,WACE,OAAO15C,KAAKo5C,WAMdP,EAAAp5C,UAAAk6C,WAAA,WACE,OAAO35C,KAAKs5C,WAMdT,EAAAp5C,UAAAy1C,SAAA,WACE,OAAOl1C,KAAK2zC,SAMdkF,EAAAp5C,UAAAm6C,kBAAA,WACE,IAAMp6C,EAAIQ,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,gBACpCvpC,EAAIN,KAAKg5C,gBACf,OAAO52C,EAAKwC,SAASpF,EAAGc,IAM1Bu4C,EAAAp5C,UAAAo6C,kBAAA,WACE,IAAMr6C,EAAIQ,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,gBACpCzpC,EAAIN,KAAKk5C,gBACf,OAAO92C,EAAKwC,SAASpF,EAAGc,IAQ1Bu4C,EAAWp5C,UAAAmR,YAAX,SAAYC,GACV7Q,KAAKg5C,gBAAgB50C,IAAIyM,GACzB7Q,KAAKk5C,gBAAgB90C,IAAIyM,IAM3BgoC,EAAAp5C,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCgP,EAAAp5C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzC8O,EAAgBp5C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAK85C,MAAMz1C,IAAIuqB,IAMxDiqB,EAAiBp5C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAO,GAGTiqB,EAAuBp5C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAM6Y,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBAC/DvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAG/DxrC,KAAK+5C,KAAO33C,EAAKgC,IAAIhC,EAAKyB,IAAI6yB,EAAI12B,KAAK+rC,MAAO/rC,KAAKg5C,iBACnDh5C,KAAK85C,KAAO13C,EAAKgC,IAAIhC,EAAKyB,IAAI8yB,EAAI32B,KAAKgsC,MAAOhsC,KAAKk5C,iBAEnD,IAAMG,EAAUr5C,KAAK+5C,KAAKr5C,SACpB64C,EAAUv5C,KAAK85C,KAAKp5C,SAEtB24C,EAAU,GAAOpwC,EAASE,WAC5BnJ,KAAK+5C,KAAK11C,IAAI,EAAMg1C,GAEpBr5C,KAAK+5C,KAAK52C,UAGRo2C,EAAU,GAAOtwC,EAASE,WAC5BnJ,KAAK85C,KAAKz1C,IAAI,EAAMk1C,GAEpBv5C,KAAK85C,KAAK32C,UAIZ,IAAM62C,EAAM53C,EAAKgD,cAAcpF,KAAK+rC,KAAM/rC,KAAK+5C,MACzCE,EAAM73C,EAAKgD,cAAcpF,KAAKgsC,KAAMhsC,KAAK85C,MAEzC/c,EAAK/8B,KAAKyrC,WAAazrC,KAAK2rC,QAAUqO,EAAMA,EAC5Chd,EAAKh9B,KAAK0rC,WAAa1rC,KAAK4rC,QAAUqO,EAAMA,EAQlD,GANAj6C,KAAK0d,OAASqf,EAAK/8B,KAAK2zC,QAAU3zC,KAAK2zC,QAAU3W,EAE7Ch9B,KAAK0d,OAAS,IAChB1d,KAAK0d,OAAS,EAAM1d,KAAK0d,QAGvB2S,EAAKtB,aAAc,CAErB/uB,KAAK40B,WAAavE,EAAKnB,QAGvB,IAAMgrB,EAAK93C,EAAKuD,YAAY3F,KAAK40B,UAAW50B,KAAK+5C,MAC3CI,EAAK/3C,EAAKuD,YAAY3F,KAAK2zC,QAAU3zC,KAAK40B,UAAW50B,KAAK85C,MAEhEpc,EAAG15B,OAAOhE,KAAKyrC,WAAYyO,GAC3BvyB,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMmO,GAEnDvc,EAAG35B,OAAOhE,KAAK0rC,WAAYyO,GAC3BtyB,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMmO,QAGnDn6C,KAAK40B,UAAY,EAGnB50B,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BgxB,EAAwBp5C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3B4oC,EAAMlqC,EAAKyB,IAAI65B,EAAIt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OAC9CQ,EAAMnqC,EAAKyB,IAAI85B,EAAIv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OAE9CQ,GAAQpqC,EAAK8C,IAAIlF,KAAK+5C,KAAMzN,GAAOtsC,KAAK2zC,QACxCvxC,EAAK8C,IAAIlF,KAAK85C,KAAMvN,GACpB7pB,GAAW1iB,KAAK0d,OAAS8uB,EAC/BxsC,KAAK40B,WAAalS,EAElB,IAAMw3B,EAAK93C,EAAKuD,YAAY+c,EAAS1iB,KAAK+5C,MACpCI,EAAK/3C,EAAKuD,YAAY3F,KAAK2zC,QAAUjxB,EAAS1iB,KAAK85C,MACzDpc,EAAG15B,OAAOhE,KAAKyrC,WAAYyO,GAC3BvyB,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMmO,GACnDvc,EAAG35B,OAAOhE,KAAK0rC,WAAYyO,GAC3BtyB,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMmO,GAEnDn6C,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BgxB,EAAwBp5C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAAMqG,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbjV,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAGxD4O,EAAKh4C,EAAKgC,IAAIhC,EAAKyB,IAAI6yB,EAAI12B,KAAK+rC,MAAO/rC,KAAKg5C,iBAC5CqB,EAAKj4C,EAAKgC,IAAIhC,EAAKyB,IAAI8yB,EAAI32B,KAAKgsC,MAAOhsC,KAAKk5C,iBAE5CG,EAAUe,EAAG15C,SACb64C,EAAUc,EAAG35C,SAEf24C,EAAU,GAAOpwC,EAASE,WAC5BixC,EAAG/1C,IAAI,EAAMg1C,GAEbe,EAAGj3C,UAGDo2C,EAAU,GAAOtwC,EAASE,WAC5BkxC,EAAGh2C,IAAI,EAAMk1C,GAEbc,EAAGl3C,UAIL,IAAM62C,EAAM53C,EAAKgD,cAAc8iB,EAAIkyB,GAC7BH,EAAM73C,EAAKgD,cAAc+iB,EAAIkyB,GAE7Btd,EAAK/8B,KAAKyrC,WAAazrC,KAAK2rC,QAAUqO,EAAMA,EAC5Chd,EAAKh9B,KAAK0rC,WAAa1rC,KAAK4rC,QAAUqO,EAAMA,EAE9Cl9B,EAAOggB,EAAK/8B,KAAK2zC,QAAU3zC,KAAK2zC,QAAU3W,EAE1CjgB,EAAO,IACTA,EAAO,EAAMA,GAGf,IAAMjO,EAAI9O,KAAK80C,WAAauE,EAAUr5C,KAAK2zC,QAAU4F,EAC/CtG,EAAc3xC,EAAKwE,IAAIgJ,GAEvB4T,GAAW3F,EAAOjO,EAElBorC,EAAK93C,EAAKuD,YAAY+c,EAAS03B,GAC/BD,EAAK/3C,EAAKuD,YAAY3F,KAAK2zC,QAAUjxB,EAAS23B,GAYpD,OAVA3jB,EAAG1yB,OAAOhE,KAAKyrC,WAAYyO,GAC3Bhd,GAAMl9B,KAAK2rC,QAAUvpC,EAAKgD,cAAc8iB,EAAIgyB,GAC5CvjB,EAAG3yB,OAAOhE,KAAK0rC,WAAYyO,GAC3Bhd,GAAMn9B,KAAK4rC,QAAUxpC,EAAKgD,cAAc+iB,EAAIgyB,GAE5Cn6C,KAAKikB,QAAQjG,WAAW3M,EAAIqlB,EAC5B12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAIslB,EAC5B32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB8V,EAAchqC,EAASE,YAtWzB0vC,EAAI5U,KAAG,eAyWf4U,EA1WD,CAAiCj1B,GCzB3B2lB,GAAW,CACf+Q,UAAY,GAcdC,GAAA,SAAAzW,GA2BE,SAAAyW,EAAYnjC,EAAmByM,EAAcC,EAAc+oB,GAA3D,IA6BCl7B,EAAA3R,KA3BC,OAA8B2R,aAAgB4oC,GAI9CnjC,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAASmkC,EAAUtW,KACxBtyB,EAAKk4B,eAAiBgD,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKO,KAAK,EAAK,GAChGgP,EAAKo4B,eAAiB8C,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKO,IAAI,EAAK,GAE/FgP,EAAK6oC,YAAcpjC,EAAIkjC,UAEvB3oC,EAAK+L,OAAS,EACd/L,EAAKijB,UAAY,EACjBjjB,EAAKs4B,SAAW,EAChBt4B,EAAK8oC,QA/Fa,KA8ET,IAAIF,EAAUnjC,EAAKyM,EAAOC,EAAO+oB,GAoQ9C,OAlS+BjtC,EAAK26C,EAAAzW,GA2DlCyW,EAAA96C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvB+mB,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBuQ,UAAWt6C,KAAKw6C,cAKbD,EAAAh4C,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAI6+B,EAAU/3C,IAO9B+3C,EAAA96C,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMd0Q,EAAA96C,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMdwQ,EAAY96C,UAAAi7C,aAAZ,SAAah6C,GACXV,KAAKw6C,YAAc95C,GAMrB65C,EAAA96C,UAAAk7C,aAAA,WACE,OAAO36C,KAAKw6C,aAGdD,EAAA96C,UAAAm7C,cAAA,WAEE,OAAO56C,KAAKy6C,SAMdF,EAAA96C,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzC0Q,EAAA96C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCwQ,EAAgB96C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAKqrC,KAAKhnC,IAAIuqB,IAMvD2rB,EAAiB96C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAO,GAGT2rB,EAAuB96C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAM6Y,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEnBn9B,KAAK+rC,KAAO54B,EAAIgB,OAAO03B,EAAI7rC,KAAK6pC,eAAgB7pC,KAAKurC,gBACrDvrC,KAAKgsC,KAAO74B,EAAIgB,OAAO23B,EAAI9rC,KAAK+pC,eAAgB/pC,KAAKwrC,gBACrDxrC,KAAKqrC,IAAMjpC,EAAKM,OAChB1C,KAAKqrC,IAAItnC,WAAW,EAAG4yB,EAAI,EAAG32B,KAAKgsC,MACnChsC,KAAKqrC,IAAInnC,WAAW,EAAGwyB,EAAI,EAAG12B,KAAK+rC,MAEnC/rC,KAAKiqC,SAAWjqC,KAAKqrC,IAAI3qC,SAEzB,IAAMoO,EAAI9O,KAAKiqC,SAAWjqC,KAAKw6C,YAO/B,GALEx6C,KAAKy6C,QADH3rC,EAAI,EA1NS,EAFC,IAkOd9O,KAAKiqC,SAAWhhC,EAASE,YAM3B,OAHAnJ,KAAKqrC,IAAIloC,UACTnD,KAAK0d,OAAS,OACd1d,KAAK40B,UAAY,GAJjB50B,KAAKqrC,IAAIhnC,IAAI,EAAMrE,KAAKiqC,UAS1B,IAAM4Q,EAAMz4C,EAAKgD,cAAcpF,KAAK+rC,KAAM/rC,KAAKqrC,KACzCyP,EAAM14C,EAAKgD,cAAcpF,KAAKgsC,KAAMhsC,KAAKqrC,KACzCc,EAAUnsC,KAAKyrC,WAAazrC,KAAK2rC,QAAUkP,EAAMA,EAAM76C,KAAK0rC,WAC5D1rC,KAAK4rC,QAAUkP,EAAMA,EAI3B,GAFA96C,KAAK0d,OAAoB,GAAXyuB,EAAiB,EAAMA,EAAU,EAE3C9b,EAAKtB,aAAc,CAErB/uB,KAAK40B,WAAavE,EAAKnB,QAEvB,IAAMqO,EAAIn7B,EAAKuD,WAAW3F,KAAK40B,UAAW50B,KAAKqrC,KAE/C3N,EAAGv5B,OAAOnE,KAAKyrC,WAAYlO,GAC3B5V,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAEnDI,EAAG35B,OAAOhE,KAAK0rC,WAAYnO,GAC3B1V,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,QAGnDv9B,KAAK40B,UAAY,EAGnB50B,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9B0yB,EAAwB96C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAG3B4oC,EAAMlqC,EAAKqD,gBAAgBi4B,EAAI/V,EAAI3nB,KAAK+rC,MACxCQ,EAAMnqC,EAAKqD,gBAAgBk4B,EAAI9V,EAAI7nB,KAAKgsC,MACxCl9B,EAAI9O,KAAKiqC,SAAWjqC,KAAKw6C,YAC3BhO,EAAOpqC,EAAK8C,IAAIlF,KAAKqrC,IAAKjpC,EAAKgC,IAAImoC,EAAKD,IAGxCx9B,EAAI,IACN09B,GAAQnc,EAAKzB,OAAS9f,GAGxB,IAAI4T,GAAW1iB,KAAK0d,OAAS8uB,EACvBgB,EAAaxtC,KAAK40B,UACxB50B,KAAK40B,UAAYtzB,EAAKU,IAAI,EAAKhC,KAAK40B,UAAYlS,GAChDA,EAAU1iB,KAAK40B,UAAY4Y,EAE3B,IAAMjQ,EAAIn7B,EAAKuD,WAAW+c,EAAS1iB,KAAKqrC,KACxC3N,EAAGv5B,OAAOnE,KAAKyrC,WAAYlO,GAC3B5V,GAAM3nB,KAAK2rC,QAAUvpC,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GACnDI,EAAG35B,OAAOhE,KAAK0rC,WAAYnO,GAC3B1V,GAAM7nB,KAAK4rC,QAAUxpC,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAEnDv9B,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9B0yB,EAAwB96C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAAMqG,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbjV,EAAK/U,EAAIgB,OAAO03B,EAAI7rC,KAAK6pC,eAAgB7pC,KAAKurC,gBAC9CpjB,EAAKhV,EAAIgB,OAAO23B,EAAI9rC,KAAK+pC,eAAgB/pC,KAAKwrC,gBAC9CiB,EAAIrqC,EAAKM,OACf+pC,EAAE1oC,WAAW,EAAG4yB,EAAI,EAAGxO,GACvBskB,EAAEvoC,WAAW,EAAGwyB,EAAI,EAAGxO,GAEvB,IAAMxnB,EAAS+rC,EAAEhoC,YACbqK,EAAIpO,EAASV,KAAKw6C,YAEtB1rC,EAAIxN,EAAKY,MAAM4M,EAAG,EAAK7F,EAASoB,qBAEhC,IAAMqY,GAAW1iB,KAAK0d,OAAS5O,EACzByuB,EAAIn7B,EAAKuD,WAAW+c,EAAS+pB,GAYnC,OAVA/V,EAAGvyB,OAAOnE,KAAKyrC,WAAYlO,GAC3BL,GAAMl9B,KAAK2rC,QAAUvpC,EAAKgD,cAAc8iB,EAAIqV,GAC5C5G,EAAG3yB,OAAOhE,KAAK0rC,WAAYnO,GAC3BJ,GAAMn9B,KAAK4rC,QAAUxpC,EAAKgD,cAAc+iB,EAAIoV,GAE5Cv9B,KAAKikB,QAAQjG,WAAW3M,EAAE/N,QAAQozB,GAClC12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAE/N,QAAQqzB,GAClC32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErBz8B,EAASV,KAAKw6C,YAAcvxC,EAASE,YA9RvCoxC,EAAItW,KAAG,aAiSfsW,EAlSD,CAA+B32B,GCHzB2lB,GAAW,CACfC,YAAc,EACdC,aAAe,GAOjBsR,GAAA,SAAAjX,GA6BE,SAAAiX,EAAY3jC,EAAmByM,EAAcC,EAAc+oB,GAA3D,IAiDCl7B,EAAA3R,KA/CC,OAA8B2R,aAAgBopC,GAI9C3jC,EAAMxW,EAAQwW,EAAKmyB,IAEnB1lB,GADAlS,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MACZikB,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAAS2kC,EAAU9W,KAExBtyB,EAAKk4B,eAAiBznC,EAAKQ,MAAMiqC,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKM,QACjGiP,EAAKo4B,eAAiB3nC,EAAKQ,MAAMiqC,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKM,QACjGiP,EAAKs9B,iBAAmB3tC,EAAKE,SAAS4V,EAAI83B,gBAAkB93B,EAAI83B,eAAiBprB,EAAMlQ,WAAaiQ,EAAMjQ,WAE1GjC,EAAKu4B,cAAgB9yB,EAAIoyB,YACzB73B,EAAKw4B,eAAiB/yB,EAAIqyB,aAE1B93B,EAAKijB,UAAY,IAAI+O,GAErBhyB,EAAK04B,OAAS,EACd14B,EAAKy4B,QAAU,EAGfz4B,EAAKo6B,KACLp6B,EAAKq6B,KACLr6B,EAAK45B,eACL55B,EAAK65B,eACL75B,EAAK85B,WACL95B,EAAK+5B,WACL/5B,EAAKg6B,QACLh6B,EAAKi6B,QACLj6B,EAAK+L,OAAS,IAAIgwB,MA/BT,IAAIqN,EAAU3jC,EAAKyM,EAAOC,EAAO+oB,GAwa9C,OAxc+BjtC,EAAKm7C,EAAAjX,GAiFlCiX,EAAAt7C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvBymB,YAAaxpC,KAAKkqC,cAClBT,aAAczpC,KAAKmqC,eAEnBL,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBmF,eAAgBlvC,KAAKivC,mBAKlB8L,EAAAx4C,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIq/B,EAAUv4C,IAK9Bu4C,EAAWt7C,UAAA+qC,YAAX,SAAYpzB,GAMNA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,eAOpC+Q,EAAAt7C,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMdkR,EAAAt7C,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMdgR,EAAAt7C,UAAAiwC,kBAAA,WACE,OAAO1vC,KAAKivC,kBAMd8L,EAAYt7C,UAAAorC,aAAZ,SAAaC,GACX9qC,KAAKkqC,cAAgBY,GAMvBiQ,EAAAt7C,UAAAsrC,aAAA,WACE,OAAO/qC,KAAKkqC,eAMd6Q,EAAet7C,UAAAurC,gBAAf,SAAgBpZ,GACd5xB,KAAKmqC,eAAiBvY,GAMxBmpB,EAAAt7C,UAAAwrC,gBAAA,WACE,OAAOjrC,KAAKmqC,gBAMd4Q,EAAAt7C,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCkR,EAAAt7C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCgR,EAAgBt7C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKO,IAAI3C,KAAK40B,UAAUnzB,EAAGzB,KAAK40B,UAAUvyB,GAAGgC,IAAIuqB,IAM1DmsB,EAAiBt7C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAK40B,UAAUgP,GAGjCmX,EAAuBt7C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAMqf,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3By5B,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEnBn9B,KAAK+rC,KAAO54B,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBAC/DvrC,KAAKgsC,KAAO74B,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAW/D,IAAMzO,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVtO,EAAI,IAAIoQ,GAad,GAZApQ,EAAErI,GAAGxzB,EAAIs7B,EAAKC,EAAKh9B,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAK1pC,EAAIsM,EAAK3O,KAAKgsC,KAAK3pC,EAAIrC,KAAKgsC,KAAK3pC,EACtE46B,EACNK,EAAEpI,GAAGzzB,GAAKzB,KAAK+rC,KAAK1pC,EAAIrC,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAK3pC,EAAIrC,KAAKgsC,KAAKvqC,EAAIw7B,EACvEK,EAAEqQ,GAAGlsC,GAAKzB,KAAK+rC,KAAK1pC,EAAIsM,EAAK3O,KAAKgsC,KAAK3pC,EAAI46B,EAC3CK,EAAErI,GAAG5yB,EAAIi7B,EAAEpI,GAAGzzB,EACd67B,EAAEpI,GAAG7yB,EAAI06B,EAAKC,EAAKh9B,KAAK+rC,KAAKtqC,EAAIzB,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAKvqC,EAAIzB,KAAKgsC,KAAKvqC,EACtEw7B,EACNK,EAAEqQ,GAAGtrC,EAAIrC,KAAK+rC,KAAKtqC,EAAIkN,EAAK3O,KAAKgsC,KAAKvqC,EAAIw7B,EAC1CK,EAAErI,GAAG2O,EAAItG,EAAEqQ,GAAGlsC,EACd67B,EAAEpI,GAAG0O,EAAItG,EAAEqQ,GAAGtrC,EACdi7B,EAAEqQ,GAAG/J,EAAIj1B,EAAKsuB,EAEVj9B,KAAKkqC,cAAgB,EAAK,CAC5B5M,EAAE4Q,aAAaluC,KAAK0d,QAEpB,IAAIs9B,EAAOrsC,EAAKsuB,EACV34B,EAAI02C,EAAO,EAAM,EAAMA,EAAO,EAE9BlsC,EAAIquB,EAAKD,EAAKl9B,KAAKivC,iBAGnB7C,EAAQ,EAAM9qC,EAAKyI,GAAK/J,KAAKkqC,cAG7BhrC,EAAI,EAAMoF,EAAItE,KAAKmqC,eAAiBiC,EAGpCC,EAAI/nC,EAAI8nC,EAAQA,EAGhB96B,EAAI+e,EAAK1B,GACf3uB,KAAKoqC,QAAU94B,GAAKpS,EAAIoS,EAAI+6B,GAC5BrsC,KAAKoqC,QAA0B,GAAhBpqC,KAAKoqC,QAAiB,EAAMpqC,KAAKoqC,QAAU,EAC1DpqC,KAAKqqC,OAASv7B,EAAIwC,EAAI+6B,EAAIrsC,KAAKoqC,QAE/B4Q,GAAQh7C,KAAKoqC,QACbpqC,KAAK0d,OAAOiwB,GAAG/J,EAAY,GAARoX,EAAc,EAAMA,EAAO,OAC3B,GAAV1d,EAAEqQ,GAAG/J,GACdtG,EAAE4Q,aAAaluC,KAAK0d,QACpB1d,KAAKoqC,QAAU,EACfpqC,KAAKqqC,OAAS,IAEd/M,EAAE8Q,gBAAgBpuC,KAAK0d,QACvB1d,KAAKoqC,QAAU,EACfpqC,KAAKqqC,OAAS,GAGhB,GAAIha,EAAKtB,aAAc,CAErB/uB,KAAK40B,UAAUvwB,IAAIgsB,EAAKnB,SAExB,IAAMqO,EAAIn7B,EAAKO,IAAI3C,KAAK40B,UAAUnzB,EAAGzB,KAAK40B,UAAUvyB,GAEpDq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAKv9B,KAAK40B,UAAUgP,GAE9DjG,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAKv9B,KAAK40B,UAAUgP,QAG9D5jC,KAAK40B,UAAUzxB,UAGjBnD,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BkzB,EAAwBt7C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAMqN,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3Bq5B,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEhB,GAAI5rC,KAAKkqC,cAAgB,EAAK,CAC5B,IAAMwG,EAAQ7oB,EAAKF,EAEbszB,GAAYj7C,KAAK0d,OAAOiwB,GAAG/J,GAC1B8M,EAAQ1wC,KAAKqqC,OAASrqC,KAAKoqC,QAAUpqC,KAAK40B,UAAUgP,GAC3D5jC,KAAK40B,UAAUgP,GAAKqX,EAEpBtzB,GAAMhZ,EAAKssC,EACXpzB,GAAMoV,EAAKge,GAELxK,EAAQruC,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OACtDyE,EAAMvsC,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OAEtD,IAAMoH,EAAW/wC,EAAKyD,IAAI6nC,GAAMx5B,QAAQlU,KAAK0d,OAAQ+yB,IACrDzwC,KAAK40B,UAAUnzB,GAAK0xC,EAAS1xC,EAC7BzB,KAAK40B,UAAUvyB,GAAK8wC,EAAS9wC,EAE7B,IAAMk7B,EAAIn7B,EAAKQ,MAAMuwC,GAErBzV,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAKvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAEzCI,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,OACpC,CACL,IAAMkT,GAAAA,EAAQruC,EAAKM,QACbqB,WAAW,EAAG45B,EAAI,EAAGv7B,EAAKkD,aAAauiB,EAAI7nB,KAAKgsC,OACtDyE,EAAMvsC,WAAW,EAAGw5B,EAAI,EAAGt7B,EAAKkD,aAAaqiB,EAAI3nB,KAAK+rC,OAChD2E,EAAQ7oB,EAAKF,EAAnB,IACM6kB,EAAO,IAAI7I,GAAK8M,EAAMhvC,EAAGgvC,EAAMpuC,EAAGquC,GAElChuB,EAAUihB,GAAK99B,IAAI6nC,GAAMc,QAAQxuC,KAAK0d,OAAQ8uB,IACpDxsC,KAAK40B,UAAU/wB,IAAI6e,GAEb6a,EAAIn7B,EAAKO,IAAI+f,EAAQjhB,EAAGihB,EAAQrgB,GAEtCq7B,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,GAAMvM,EAAKgD,cAAcpF,KAAK+rC,KAAMxO,GAAK7a,EAAQkhB,GAEvDjG,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,GAAM76B,EAAKgD,cAAcpF,KAAKgsC,KAAMzO,GAAK7a,EAAQkhB,GAGzD5jC,KAAKikB,QAAQlG,WAAWlb,EAAI66B,EAC5B19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAI86B,EAC5B39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BkzB,EAAwBt7C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAgBIwgB,EACAC,EAjBEpa,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbJ,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEV1jB,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBAKxDlO,EAAI,IAAIoQ,GAWd,GAVApQ,EAAErI,GAAGxzB,EAAIs7B,EAAKC,EAAK9U,EAAG7lB,EAAI6lB,EAAG7lB,EAAIsM,EAAKwZ,EAAG9lB,EAAI8lB,EAAG9lB,EAAI46B,EACpDK,EAAEpI,GAAGzzB,GAAKymB,EAAG7lB,EAAI6lB,EAAGzmB,EAAIkN,EAAKwZ,EAAG9lB,EAAI8lB,EAAG1mB,EAAIw7B,EAC3CK,EAAEqQ,GAAGlsC,GAAKymB,EAAG7lB,EAAIsM,EAAKwZ,EAAG9lB,EAAI46B,EAC7BK,EAAErI,GAAG5yB,EAAIi7B,EAAEpI,GAAGzzB,EACd67B,EAAEpI,GAAG7yB,EAAI06B,EAAKC,EAAK9U,EAAGzmB,EAAIymB,EAAGzmB,EAAIkN,EAAKwZ,EAAG1mB,EAAI0mB,EAAG1mB,EAAIw7B,EACpDK,EAAEqQ,GAAGtrC,EAAI6lB,EAAGzmB,EAAIkN,EAAKwZ,EAAG1mB,EAAIw7B,EAC5BK,EAAErI,GAAG2O,EAAItG,EAAEqQ,GAAGlsC,EACd67B,EAAEpI,GAAG0O,EAAItG,EAAEqQ,GAAGtrC,EACdi7B,EAAEqQ,GAAG/J,EAAIj1B,EAAKsuB,EAEVj9B,KAAKkqC,cAAgB,EAAK,EACtB8I,EAAK5wC,EAAKM,QACbqB,WAAW,EAAG4yB,EAAI,EAAGxO,GACxB6qB,EAAG9uC,WAAW,EAAGwyB,EAAI,EAAGxO,GAExB2oB,EAAgBmC,EAAGtyC,SACnBowC,EAAe,EAEf,IAAMvT,EAAIn7B,EAAKyD,IAAIy3B,EAAEuQ,QAAQmF,IAE7Btc,EAAGvyB,OAAO44B,EAAIQ,GACdL,GAAMvuB,EAAKvM,EAAKgD,cAAc8iB,EAAIqV,GAElC5G,EAAG3yB,OAAOg5B,EAAIO,GACdJ,GAAMF,EAAK76B,EAAKgD,cAAc+iB,EAAIoV,OAC7B,CACL,IAAMyV,GAAAA,EAAK5wC,EAAKM,QACbqB,WAAW,EAAG4yB,EAAI,EAAGxO,GACxB6qB,EAAG9uC,WAAW,EAAGwyB,EAAI,EAAGxO,GAExB,IAAMgrB,EAAK/V,EAAKD,EAAKl9B,KAAKivC,iBAE1B4B,EAAgBmC,EAAGtyC,SACnBowC,EAAexvC,EAAKwE,IAAIotC,GAExB,IAAMpkC,EAAI,IAAI60B,GAAKqP,EAAGvxC,EAAGuxC,EAAG3wC,EAAG6wC,GAE3BxwB,EAAU,IAAIihB,GAClB,GAAIrG,EAAEqQ,GAAG/J,EAAI,EACXlhB,EAAUihB,GAAK99B,IAAIy3B,EAAEsQ,QAAQ9+B,QACxB,CACL,IAAMmsC,EAAW74C,EAAKyD,IAAIy3B,EAAEuQ,QAAQmF,IACpCtwB,EAAQtf,IAAI63C,EAASx5C,EAAGw5C,EAAS54C,EAAG,GAGhCk7B,EAAIn7B,EAAKO,IAAI+f,EAAQjhB,EAAGihB,EAAQrgB,GAEtCq0B,EAAGvyB,OAAO44B,EAAIQ,GACdL,GAAMvuB,GAAMvM,EAAKgD,cAAc8iB,EAAIqV,GAAK7a,EAAQkhB,GAEhDjN,EAAG3yB,OAAOg5B,EAAIO,GACdJ,GAAMF,GAAM76B,EAAKgD,cAAc+iB,EAAIoV,GAAK7a,EAAQkhB,GAQlD,OALA5jC,KAAKikB,QAAQjG,WAAW3M,EAAIqlB,EAC5B12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAIslB,EAC5B32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB0T,GAAiB5nC,EAASE,YAAc2nC,GAAgB7nC,EAASa,aApcnEixC,EAAI9W,KAAG,aAucf8W,EAxcD,CAA+Bn3B,GCDzB2lB,GAAW,CACfuF,aAAc,EACdH,eAAiB,EACjBC,WAAa,EACbpF,YAAc,EACdC,aAAe,IASjByR,GAAA,SAAApX,GA4CE,SAAYoX,EAAA9jC,EAAoByM,EAAcC,EAAc+oB,EAAeuE,GAA3E,IAsDCz/B,EAAA3R,KApDC,OAA8B2R,aAAgBupC,GAI9C9jC,EAAMxW,EAAQwW,EAAKmyB,KACnB53B,EAAAmyB,YAAM1sB,EAAKyM,EAAOC,IAAO9jB,MAjBNm7C,KAAS/4C,EAAKM,OAClBiP,EAAIypC,KAASh5C,EAAKM,OAiBjCmhB,EAAQlS,EAAKsS,QACbH,EAAQnS,EAAKuS,QAEbvS,EAAKyE,OAAS8kC,EAAWjX,KAEzBtyB,EAAKk4B,eAAiBznC,EAAKQ,MAAMiqC,EAAShpB,EAAMN,cAAcspB,GAAUz1B,EAAI0yB,cAAgB1nC,EAAKM,QACjGiP,EAAKo4B,eAAiB3nC,EAAKQ,MAAMiqC,EAAS/oB,EAAMP,cAAcspB,GAAUz1B,EAAI4yB,cAAgB5nC,EAAKM,QAEjGiP,EAAK0/B,cAAgBjvC,EAAKQ,MAAMwuC,EAAOvtB,EAAML,eAAe4tB,GAAQh6B,EAAIk6B,YAAcl6B,EAAIikC,WAAaj5C,EAAKO,IAAI,EAAK,IACrHgP,EAAK4/B,cAAgBnvC,EAAKkD,aAAa,EAAKqM,EAAK0/B,eAEjD1/B,EAAK+L,OAAS,EACd/L,EAAKijB,UAAY,EACjBjjB,EAAK4+B,YAAc,EACnB5+B,EAAKw9B,eAAiB,EACtBx9B,EAAK2pC,aAAe,EACpB3pC,EAAK4pC,gBAAkB,EAEvB5pC,EAAK29B,iBAAmBl4B,EAAIu3B,eAC5Bh9B,EAAK49B,aAAen4B,EAAIw3B,WACxBj9B,EAAK89B,cAAgBr4B,EAAI03B,YAEzBn9B,EAAKu4B,cAAgB9yB,EAAIoyB,YACzB73B,EAAKw4B,eAAiB/yB,EAAIqyB,aAE1B93B,EAAK04B,OAAS,EACd14B,EAAKy4B,QAAU,KA/BN,IAAI8Q,EAAW9jC,EAAKyM,EAAOC,EAAO+oB,EAAQuE,GA4fvD,OA3iBgCxxC,EAAKs7C,EAAApX,GAqGnCoX,EAAAz7C,UAAA6C,WAAA,WACE,MAAO,CACL6Z,KAAMnc,KAAKoW,OACXyN,MAAO7jB,KAAKikB,QACZH,MAAO9jB,KAAKkkB,QACZC,iBAAkBnkB,KAAK+iB,mBAEvB+rB,YAAa9uC,KAAKyvC,cAClBd,eAAgB3uC,KAAKsvC,iBACrBV,WAAY5uC,KAAKuvC,aACjB/F,YAAaxpC,KAAKkqC,cAClBT,aAAczpC,KAAKmqC,eAEnBL,aAAc9pC,KAAK6pC,eACnBG,aAAchqC,KAAK+pC,eACnBuH,WAAYtxC,KAAKqxC,gBAKd6J,EAAA34C,aAAP,SAAoBC,EAAWkZ,EAAY9C,GAKzC,OAJApW,EAAIrC,EAAA,GAAOqC,IACNqhB,MAAQjL,EAAQsE,EAAM1a,EAAKqhB,MAAOnI,GACvClZ,EAAKshB,MAAQlL,EAAQsE,EAAM1a,EAAKshB,MAAOpI,GACzB,IAAIw/B,EAAW14C,IAK/B04C,EAAWz7C,UAAA+qC,YAAX,SAAYpzB,GAONA,EAAIuyB,QACN3pC,KAAK6pC,eAAevmC,QAAQtD,KAAKikB,QAAQV,cAAcnM,EAAIuyB,UAClDvyB,EAAI0yB,cACb9pC,KAAK6pC,eAAevmC,QAAQ8T,EAAI0yB,cAG9B1yB,EAAIwyB,QACN5pC,KAAK+pC,eAAezmC,QAAQtD,KAAKkkB,QAAQX,cAAcnM,EAAIwyB,UAClDxyB,EAAI4yB,cACbhqC,KAAK+pC,eAAezmC,QAAQ8T,EAAI4yB,cAG9B5yB,EAAIk6B,aACNtxC,KAAKqxC,cAAc/tC,QAAQ8T,EAAIk6B,YAC/BtxC,KAAKuxC,cAAcjuC,QAAQlB,EAAKkD,aAAa,EAAK8R,EAAIk6B,eAO1D4J,EAAAz7C,UAAAgrC,gBAAA,WACE,OAAOzqC,KAAK6pC,gBAMdqR,EAAAz7C,UAAAirC,gBAAA,WACE,OAAO1qC,KAAK+pC,gBAMdmR,EAAAz7C,UAAAoyC,cAAA,WACE,OAAO7xC,KAAKqxC,eAMd6J,EAAAz7C,UAAAqyC,oBAAA,WACE,IAAMle,EAAK5zB,KAAKikB,QACV4P,EAAK7zB,KAAKkkB,QAEVmF,EAAKuK,EAAGxS,cAAcphB,KAAK6pC,gBAC3BvgB,EAAKuK,EAAGzS,cAAcphB,KAAK+pC,gBAC3B7qC,EAAIkD,EAAKgC,IAAIklB,EAAID,GACjB+nB,EAAOxd,EAAGvQ,eAAerjB,KAAKqxC,eAGpC,OADoBjvC,EAAK8C,IAAIhG,EAAGkyC,IAOlC8J,EAAAz7C,UAAAmwC,cAAA,WACE,IAAMjoB,EAAK3nB,KAAKikB,QAAQ7F,kBAExB,OADWpe,KAAKkkB,QAAQ9F,kBACZuJ,GAMduzB,EAAAz7C,UAAAowC,eAAA,WACE,OAAO7vC,KAAKyvC,eAMdyL,EAAWz7C,UAAAqvC,YAAX,SAAY5uB,GACVlgB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKyvC,cAAgBvvB,GAMvBg7B,EAAaz7C,UAAAswC,cAAb,SAAcjU,GACZ97B,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKuvC,aAAezT,GAMtBof,EAAAz7C,UAAAuwC,cAAA,WACE,OAAOhwC,KAAKuvC,cAMd2L,EAAiBz7C,UAAAwwC,kBAAjB,SAAkBztB,GAChBxiB,KAAKikB,QAAQhL,UAAS,GACtBjZ,KAAKkkB,QAAQjL,UAAS,GACtBjZ,KAAKsvC,iBAAmB9sB,GAG1B04B,EAAAz7C,UAAAywC,kBAAA,WACE,OAAOlwC,KAAKsvC,kBAMd4L,EAAcz7C,UAAAqwC,eAAd,SAAelhB,GACb,OAAOA,EAAS5uB,KAAKmvC,gBAOvB+L,EAAoBz7C,UAAA+7C,qBAApB,SAAqB1Q,GACnB9qC,KAAKkqC,cAAgBY,GAGvBoQ,EAAAz7C,UAAAg8C,qBAAA,WACE,OAAOz7C,KAAKkqC,eAMdgR,EAAqBz7C,UAAAi8C,sBAArB,SAAsB9pB,GACpB5xB,KAAKmqC,eAAiBvY,GAGxBspB,EAAAz7C,UAAAk8C,sBAAA,WACE,OAAO37C,KAAKmqC,gBAMd+Q,EAAAz7C,UAAAyrC,WAAA,WACE,OAAOlrC,KAAKikB,QAAQ7C,cAAcphB,KAAK6pC,iBAMzCqR,EAAAz7C,UAAA0rC,WAAA,WACE,OAAOnrC,KAAKkkB,QAAQ9C,cAAcphB,KAAK+pC,iBAMzCmR,EAAgBz7C,UAAA2rC,iBAAhB,SAAiBxc,GACf,OAAOxsB,EAAKsD,QAAQ1F,KAAK40B,UAAW50B,KAAKo7C,KAAMp7C,KAAKu7C,gBAAiBv7C,KAAKm7C,MAAM92C,IAAIuqB,IAMtFssB,EAAiBz7C,UAAA6rC,kBAAjB,SAAkB1c,GAChB,OAAOA,EAAS5uB,KAAKmvC,gBAGvB+L,EAAuBz7C,UAAA6xB,wBAAvB,SAAwBjB,GACtBrwB,KAAKurC,eAAiBvrC,KAAKikB,QAAQnG,QAAQxI,YAC3CtV,KAAKwrC,eAAiBxrC,KAAKkkB,QAAQpG,QAAQxI,YAC3CtV,KAAKyrC,WAAazrC,KAAKikB,QAAQtG,UAC/B3d,KAAK0rC,WAAa1rC,KAAKkkB,QAAQvG,UAC/B3d,KAAK2rC,QAAU3rC,KAAKikB,QAAQpG,OAC5B7d,KAAK4rC,QAAU5rC,KAAKkkB,QAAQrG,OAE5B,IAAMkf,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVlV,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC7B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC7Bi6B,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAE3BizB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC7B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAC7Bk6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAE3BmoC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAGbjV,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBACxDtsC,EAAIkD,EAAKM,OAsBf,GArBAxD,EAAE6E,WAAW,EAAG4yB,EAAI,EAAGxO,GACvBjpB,EAAEgF,WAAW,EAAGwyB,EAAI,EAAGxO,GAIrBloB,KAAKo7C,KAAOjoC,EAAIe,QAAQ23B,EAAI7rC,KAAKuxC,eACjCvxC,KAAK47C,MAAQx5C,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAKloB,KAAKo7C,MACtDp7C,KAAK67C,MAAQz5C,EAAKgD,cAAc+iB,EAAInoB,KAAKo7C,MAEzCp7C,KAAK0d,OAASqf,EAAKC,EAAKruB,EAAK3O,KAAK47C,MAAQ57C,KAAK47C,MAAQ3e,EAAKj9B,KAAK67C,MAC3D77C,KAAK67C,MAEP77C,KAAK0d,OAAS,IAChB1d,KAAK0d,OAAS,EAAM1d,KAAK0d,QAK7B1d,KAAKs7C,aAAe,EACpBt7C,KAAKqqC,OAAS,EACdrqC,KAAKoqC,QAAU,EACXpqC,KAAKkqC,cAAgB,EAAK,CAC5BlqC,KAAKm7C,KAAOhoC,EAAIe,QAAQ23B,EAAI7rC,KAAKqxC,eACjCrxC,KAAK87C,MAAQ15C,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAKloB,KAAKm7C,MACtDn7C,KAAK+7C,MAAQ35C,EAAKgD,cAAc+iB,EAAInoB,KAAKm7C,MAEzC,IAAMhP,EAAUpP,EAAKC,EAAKruB,EAAK3O,KAAK87C,MAAQ97C,KAAK87C,MAAQ7e,EAAKj9B,KAAK+7C,MAC7D/7C,KAAK+7C,MAEX,GAAI5P,EAAU,EAAK,CACjBnsC,KAAKs7C,aAAe,EAAMnP,EAE1B,IAAMr9B,EAAI1M,EAAK8C,IAAIhG,EAAGc,KAAKm7C,MAGrB/O,EAAQ,EAAM9qC,EAAKyI,GAAK/J,KAAKkqC,cAG7B8R,EAAO,EAAMh8C,KAAKs7C,aAAet7C,KAAKmqC,eAAiBiC,EAGvDC,EAAIrsC,KAAKs7C,aAAelP,EAAQA,EAGhC96B,EAAI+e,EAAK1B,GACf3uB,KAAKoqC,QAAU94B,GAAK0qC,EAAO1qC,EAAI+6B,GAC3BrsC,KAAKoqC,QAAU,IACjBpqC,KAAKoqC,QAAU,EAAMpqC,KAAKoqC,SAG5BpqC,KAAKqqC,OAASv7B,EAAIwC,EAAI+6B,EAAIrsC,KAAKoqC,QAE/BpqC,KAAKs7C,aAAenP,EAAUnsC,KAAKoqC,QAC/BpqC,KAAKs7C,aAAe,IACtBt7C,KAAKs7C,aAAe,EAAMt7C,KAAKs7C,oBAInCt7C,KAAKu7C,gBAAkB,EAczB,GAVIv7C,KAAKyvC,eACPzvC,KAAKuwC,YAAc5hC,EAAKsuB,EACpBj9B,KAAKuwC,YAAc,IACrBvwC,KAAKuwC,YAAc,EAAMvwC,KAAKuwC,eAGhCvwC,KAAKuwC,YAAc,EACnBvwC,KAAKmvC,eAAiB,GAGpB9e,EAAKtB,aAAc,CAErB/uB,KAAK40B,WAAavE,EAAKnB,QACvBlvB,KAAKu7C,iBAAmBlrB,EAAKnB,QAC7BlvB,KAAKmvC,gBAAkB9e,EAAKnB,QAE5B,IAAMqO,EAAIn7B,EAAKsD,QAAQ1F,KAAK40B,UAAW50B,KAAKo7C,KAAMp7C,KAAKu7C,gBAAiBv7C,KAAKm7C,MACvEzI,EAAK1yC,KAAK40B,UAAY50B,KAAK47C,MAAQ57C,KAAKu7C,gBAAkBv7C,KAAK87C,MAAQ97C,KAAKmvC,eAC5EwD,EAAK3yC,KAAK40B,UAAY50B,KAAK67C,MAAQ77C,KAAKu7C,gBAAkBv7C,KAAK+7C,MAAQ/7C,KAAKmvC,eAElFzR,EAAGv5B,OAAOnE,KAAKyrC,WAAYlO,GAC3B5V,GAAM3nB,KAAK2rC,QAAU+G,EAErB/U,EAAG35B,OAAOhE,KAAK0rC,WAAYnO,GAC3B1V,GAAM7nB,KAAK4rC,QAAU+G,OAGrB3yC,KAAK40B,UAAY,EACjB50B,KAAKu7C,gBAAkB,EACvBv7C,KAAKmvC,eAAiB,EAGxBnvC,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAG9BqzB,EAAwBz7C,UAAA8xB,yBAAxB,SAAyBlB,GACvB,IAAM0M,EAAK/8B,KAAKyrC,WACVzO,EAAKh9B,KAAK0rC,WACV/8B,EAAK3O,KAAK2rC,QACV1O,EAAKj9B,KAAK4rC,QAEVlO,EAAK19B,KAAKikB,QAAQlG,WAAWlb,EAC/B8kB,EAAK3nB,KAAKikB,QAAQlG,WAAWra,EAC3Bi6B,EAAK39B,KAAKkkB,QAAQnG,WAAWlb,EAC/BglB,EAAK7nB,KAAKkkB,QAAQnG,WAAWra,EAIzB8oC,EAAOpqC,EAAK8C,IAAIlF,KAAKm7C,KAAMxd,GAAMv7B,EAAK8C,IAAIlF,KAAKm7C,KAAMzd,GAAM19B,KAAK+7C,MAChEl0B,EAAK7nB,KAAK87C,MAAQn0B,EAClBjF,GAAW1iB,KAAKs7C,cACf9O,EAAOxsC,KAAKqqC,OAASrqC,KAAKoqC,QAAUpqC,KAAKu7C,iBAChDv7C,KAAKu7C,iBAAmB74B,EAExB,IAAM6a,EAAIn7B,EAAKuD,WAAW+c,EAAS1iB,KAAKm7C,MAClCzI,EAAKhwB,EAAU1iB,KAAK87C,MACpBnJ,EAAKjwB,EAAU1iB,KAAK+7C,MAE1Bre,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GAMRiP,GALN3kB,GAAMoV,EAAK0V,GAKOhrB,EAAK3nB,KAAKuvC,aACxB7sB,GAAW1iB,KAAKuwC,YAAc/D,EADlC,IAGMgB,EAAaxtC,KAAKmvC,eAClB1B,EAAapd,EAAK1B,GAAK3uB,KAAKsvC,iBAClCtvC,KAAKmvC,eAAiB7tC,EAAKY,MAAMlC,KAAKmvC,eAAiBzsB,GAClD+qB,EAAYA,GAGjB9lB,GAAMhZ,GAFN+T,EAAU1iB,KAAKmvC,eAAiB3B,GAGhC3lB,GAAMoV,EAAKva,EAKL8pB,EAAOpqC,EAAK8C,IAAIlF,KAAKo7C,KAAMzd,GAAMv7B,EAAK8C,IAAIlF,KAAKo7C,KAAM1d,GAAM19B,KAAK67C,MAChEh0B,EAAK7nB,KAAK47C,MAAQj0B,EAClBjF,GAAW1iB,KAAK0d,OAAS8uB,EAC/BxsC,KAAK40B,WAAalS,EAEZ6a,EAAIn7B,EAAKuD,WAAW+c,EAAS1iB,KAAKo7C,MAClC1I,EAAKhwB,EAAU1iB,KAAK47C,MACpBjJ,EAAKjwB,EAAU1iB,KAAK67C,MAE1Bne,EAAGv5B,OAAO44B,EAAIQ,GACd5V,GAAMhZ,EAAK+jC,EAEX/U,EAAG35B,OAAOg5B,EAAIO,GACd1V,GAAMoV,EAAK0V,EAGb3yC,KAAKikB,QAAQlG,WAAWlb,EAAES,QAAQo6B,GAClC19B,KAAKikB,QAAQlG,WAAWra,EAAIikB,EAC5B3nB,KAAKkkB,QAAQnG,WAAWlb,EAAES,QAAQq6B,GAClC39B,KAAKkkB,QAAQnG,WAAWra,EAAImkB,GAM9BqzB,EAAwBz7C,UAAA4yB,yBAAxB,SAAyBhC,GACvB,IAAMqG,EAAK12B,KAAKikB,QAAQjG,WAAW3M,EAC/B6rB,EAAKl9B,KAAKikB,QAAQjG,WAAWva,EAC3BkzB,EAAK32B,KAAKkkB,QAAQlG,WAAW3M,EAC/B8rB,EAAKn9B,KAAKkkB,QAAQlG,WAAWva,EAE3BooC,EAAK14B,EAAIxQ,IAAIu6B,GACb4O,EAAK34B,EAAIxQ,IAAIw6B,GAEbjV,EAAK/U,EAAIe,QAAQ23B,EAAIzpC,EAAKgC,IAAIpE,KAAK6pC,eAAgB7pC,KAAKurC,iBACxDpjB,EAAKhV,EAAIe,QAAQ43B,EAAI1pC,EAAKgC,IAAIpE,KAAK+pC,eAAgB/pC,KAAKwrC,iBACxDtsC,EAAIkD,EAAKM,OACfxD,EAAE6E,WAAW,EAAG4yB,EAAI,EAAGxO,GACvBjpB,EAAEgF,WAAW,EAAGwyB,EAAI,EAAGxO,GAEvB,IAUIxF,EAVEu5B,EAAK9oC,EAAIe,QAAQ23B,EAAI7rC,KAAKuxC,eAE1B2K,EAAM95C,EAAKgD,cAAchD,EAAKyB,IAAI3E,EAAGgpB,GAAK+zB,GAC1CE,EAAM/5C,EAAKgD,cAAc+iB,EAAI8zB,GAE7BntC,EAAI1M,EAAK8C,IAAIhG,EAAG+8C,GAEhB5P,EAAIrsC,KAAKyrC,WAAazrC,KAAK0rC,WAAa1rC,KAAK2rC,QAAU3rC,KAAK47C,MAC5D57C,KAAK47C,MAAQ57C,KAAK4rC,QAAU5rC,KAAK67C,MAAQ77C,KAAK67C,MAIlDn5B,EADO,GAAL2pB,GACSv9B,EAAIu9B,EAEL,EAGZ,IAAM9O,EAAIn7B,EAAKuD,WAAW+c,EAASu5B,GAC7BvJ,EAAKhwB,EAAUw5B,EACfvJ,EAAKjwB,EAAUy5B,EAYrB,OAVAzlB,EAAGvyB,OAAOnE,KAAKyrC,WAAYlO,GAC3BL,GAAMl9B,KAAK2rC,QAAU+G,EACrB/b,EAAG3yB,OAAOhE,KAAK0rC,WAAYnO,GAC3BJ,GAAMn9B,KAAK4rC,QAAU+G,EAErB3yC,KAAKikB,QAAQjG,WAAW3M,EAAE/N,QAAQozB,GAClC12B,KAAKikB,QAAQjG,WAAWva,EAAIy5B,EAC5Bl9B,KAAKkkB,QAAQlG,WAAW3M,EAAE/N,QAAQqzB,GAClC32B,KAAKkkB,QAAQlG,WAAWva,EAAI05B,EAErB77B,EAAKwE,IAAIgJ,IAAM7F,EAASE,YAviB1B+xC,EAAIjX,KAAG,cA0iBfiX,EA3iBD,CAAgCt3B,GC/E5Bw4B,GAAM,EAEJ,SAAUC,GAAW1xC,SAGnB2xC,GAFN3xC,EAAOA,GAAQ,IAEQ2xC,WAAavc,GAE9Bwc,EAAe5xC,EAAK4xC,cAAgB,SAAS95C,GAAO,OAAOA,GAC3D+5C,EAAgB7xC,EAAK6xC,eAAiB,SAASh6C,EAAMC,GAAO,OAAOD,GAEnEi6C,EAAiB9xC,EAAK8xC,gBAAkB,SAASj6C,GAAQ,OAAOA,GAChEk6C,EAAkB/xC,EAAK+xC,iBAAmB,SAASj6C,EAAKD,GAAQ,OAAOC,GAGvEk6C,EAAW,CACf5c,MAAKA,GACL7iB,KAAIA,EACJ0G,MAAKA,EACL3M,QAAOA,EACPd,MAAKA,GAIDymC,EACJz8C,EAAA,CAAAiC,KAAIA,EACJuhC,KAAIA,IACDgZ,GAGCE,IAAkBC,EAAA,IACrB5/B,EAAKnB,QAASmB,EACf4/B,EAAC5/B,EAAKjB,SAAUiB,EAChB4/B,EAAC5/B,EAAKlB,WAAYkB,EAClB4/B,EAACjX,GAAW5B,MAAO4B,GACnBiX,EAAC9T,GAAS/E,MAAO+E,GACjB8T,EAACjZ,GAAUI,MAAOJ,GAClBiZ,EAACjW,GAAa5C,MAAO4C,GACrBiW,EAAC5T,GAAYjF,MAAOiF,GACpB4T,EAACpT,GAAczF,MAAOyF,GACtBoT,EAAClQ,GAAc3I,MAAO2I,GACtBkQ,EAAC1J,GAAUnP,MAAOmP,GAClB0J,EAACzF,GAAWpT,MAAOoT,GACnByF,EAACzE,GAAWpU,MAAOoU,GACnByE,EAAC3L,GAAelN,MAAOkN,GACvB2L,EAACjE,GAAY5U,MAAO4U,GACpBiE,EAAC/N,GAAc9K,MAAO8K,GACtB+N,EAACvC,GAAUtW,MAAOsW,GAClBuC,EAAC/B,GAAU9W,MAAO8W,GAClB+B,EAAC5B,GAAWjX,MAAOiX,MAGrBl7C,KAAK+8C,OAAS,SAAStrC,GACrB,IAAMurC,EAAO,GAEPC,EAAQ,CAACxrC,GACTyrC,EAAS,GAEf,SAASC,EAAS55C,EAAO65C,GAEvB,GADA75C,EAAM85C,MAAQ95C,EAAM85C,SAAWjB,IAC1Bc,EAAO35C,EAAM85C,OAAQ,CACxBJ,EAAMrxC,KAAKrI,GACX,IACM+5C,EAAM,CACVC,SAFYP,EAAKt8C,OAASu8C,EAAMv8C,OAGhC88C,QAASJ,GAEXF,EAAO35C,EAAM85C,OAASC,EAExB,OAAOJ,EAAO35C,EAAM85C,OAUtB,SAASN,EAAOx5C,EAAOk6C,GACrB,GAAqB,iBAAVl6C,GAAgC,OAAVA,EAC/B,OAAOA,EAET,GAAgC,mBAArBA,EAAMjB,WAA2B,CAC1C,GAAIiB,IAAUk6C,EAEZ,IAAK,IAAML,KAAYT,EACrB,GAAIp5C,aAAiBo5C,EAASS,GAC5B,OAAOD,EAAS55C,EAAO65C,GAI7B75C,EApBJ,SAAmBd,GAEjB,IAAID,GADJC,EAAM85C,EAAa95C,IACJH,aAEf,OADOk6C,EAAch6C,EAAMC,GAiBjBi7C,CAAUn6C,GAEpB,GAAIhE,MAAMsV,QAAQtR,GAAQ,CAExB,IADA,IAAMo6C,EAAW,GACR38C,EAAM,EAAGA,EAAMuC,EAAM7C,OAAQM,IACpC28C,EAAS38C,GAAO+7C,EAAOx5C,EAAMvC,IAE/BuC,EAAQo6C,MAEH,CACCA,EAAW,GAEjB,IAAK,IAAM38C,KAAOuC,EACZA,EAAM7D,eAAesB,KACvB28C,EAAS38C,GAAO+7C,EAAOx5C,EAAMvC,KAGjCuC,EAAQo6C,EAEV,OAAOp6C,EAGT,KAAO05C,EAAMv8C,QAAQ,CACnB,IAAM+B,EAAMw6C,EAAMtxC,QACZiyC,EAAMb,EAAOt6C,EAAKA,GACxBu6C,EAAKpxC,KAAKgyC,GAGZ,OAAOZ,GAGTh9C,KAAK69C,SAAW,SAASb,GACvB,IAAME,EAAS,GAYf,SAASY,EAAYC,EAAKv7C,EAAMw7C,GAC9B,IAAMC,EAXR,SAAyBz7C,EAAMu7C,GAI7B,OAHKA,GAAQA,EAAIx7C,eACfw7C,EAAMlB,EAAmBr6C,EAAK2Z,OAEzB4hC,GAAOA,EAAIx7C,aAOG27C,CAAgB17C,EAAMu7C,GAC3C,GAAKE,EAAL,CAIA,IAAIx7C,EAAMw7C,EADVz7C,EAAOi6C,EAAej6C,GACOw7C,EAAKG,GAElC,OADA17C,EAAMi6C,EAAgBj6C,EAAKD,IAS7B,SAAS27C,EAAWJ,EAAKT,EAAKU,GAC5B,IAAKV,EAAIC,SACP,OAAOQ,GAAOA,EAAIx7C,cAAgBu7C,EAAYC,EAAKT,EAAKU,GAE1DD,EAAMnB,EAAaU,EAAIE,UAAYO,EACnC,IAAMlwC,EAAQyvC,EAAIC,SAClB,IAAKL,EAAOrvC,GAAQ,CAClB,IACMpL,EAAMq7C,EAAYC,EADXf,EAAKnvC,GACiBmwC,GACnCd,EAAOrvC,GAASpL,EAElB,OAAOy6C,EAAOrvC,GAKhB,OAFayuC,EAAU/5C,aAAay6C,EAAK,GAAI,KAAMmB,IAMvD,IAAMC,GAAa,IAAI/B,GAEvBA,GAAWU,OAASqB,GAAWrB,OAC/BV,GAAWwB,SAAWO,GAAWP,SCnKjC5kB,GAAQsG,QAAQ2J,GAAYjF,KAAMiF,GAAYjF,MAE9C,SAA6B3J,EAAoB7T,EAAgBpL,EAAmBgL,EAAgBK,EAAgBnL,EAAmB+K,GAGrI+3B,GAAe/jB,EAAUjf,EAASvC,WAA2B2N,EAAKlL,EAASzC,WAA2B4N,MAGjG,IAAM23B,GAAiB,SAAU/jB,EAAoBgkB,EAAsB73B,EAAgB83B,EAAsB73B,GACtH4T,EAASrE,WAAa,EAEtB,IAAM5M,EAAK9U,EAAUL,QAAQuS,EAAK63B,EAAQnV,KACpC7f,EAAK/U,EAAUL,QAAQwS,EAAK63B,EAAQpV,KAEpCqV,EAAUp8C,EAAK2C,gBAAgBukB,EAAID,GAGnC+f,EAFKkV,EAAQjoC,SACRkoC,EAAQloC,SAEfmoC,EAAUpV,EAASA,IAIvB9O,EAASne,KAAO0Y,EAAYA,aAAC2B,UAC7B8D,EAASnZ,WAAW7d,QAAQg7C,EAAQnV,KACpC7O,EAASxE,YAAY3yB,UACrBm3B,EAASrE,WAAa,EACtBqE,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,EAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,WC/BtDc,GAAQsG,QAAQsE,GAAUI,KAAMiF,GAAYjF,MAG5C,SAA2B3J,EAAoB7T,EAAgBpL,EAAmBgL,EAAgBK,EAAgBnL,EAAmB+K,GAInI,IAAMyE,EAAS1P,EAASvC,WAClBkS,EAASzP,EAASzC,WAExB2lC,GAAkBnkB,EAAUvP,EAAQtE,EAAKuE,EAAQtE,MATnDuS,GAAQsG,QAAQsG,GAAW5B,KAAMiF,GAAYjF,MAY7C,SAA4B3J,EAAoB7T,EAAgBpL,EAAmBgL,EAAgBK,EAAgBnL,EAAmB+K,GAIpI,IAAMo4B,EAAQrjC,EAASvC,WACjBoC,EAAO,IAAI2oB,GACjB6a,EAAM/X,aAAazrB,EAAMmL,GAEzB,IAAM0E,EAAS7P,EACT8P,EAASzP,EAASzC,WAExB2lC,GAAkBnkB,EAAUvP,EAAQtE,EAAKuE,EAAQtE,MAK5C,IAAM+3B,GAAoB,SAAUnkB,EAAoBqkB,EAAkBl4B,EAAgB83B,EAAsB73B,GACrH4T,EAASrE,WAAa,EAGtB,IAAM2oB,EAAIrqC,EAAUD,SAASmS,EAAKlS,EAAUL,QAAQwS,EAAK63B,EAAQpV,MAE3Dv6B,EAAI+vC,EAAMxa,UACVt1B,EAAI8vC,EAAMva,UACVoB,EAAIpjC,EAAKgC,IAAIyK,EAAGD,GAGhB69B,EAAIrqC,EAAK8C,IAAIsgC,EAAGpjC,EAAKgC,IAAIyK,EAAG+vC,IAC5B/7C,EAAIT,EAAK8C,IAAIsgC,EAAGpjC,EAAKgC,IAAIw6C,EAAGhwC,IAE5Bw6B,EAASuV,EAAMtoC,SAAWkoC,EAAQloC,SAGxC,GAAIxT,GAAK,EAAK,CACZ,IAAMg8C,EAAIz8C,EAAKQ,MAAMgM,GACfkwC,EAAI18C,EAAKgC,IAAIw6C,EAAGC,GAEtB,GADWz8C,EAAK8C,IAAI45C,EAAGA,GACd1V,EAASA,EAChB,OAIF,GAAIuV,EAAMpa,aAAc,CACtB,IAAMwa,EAAKJ,EAAMta,UACX2a,EAAKpwC,EACLm5B,EAAK3lC,EAAKgC,IAAI46C,EAAID,GAIxB,GAHW38C,EAAK8C,IAAI6iC,EAAI3lC,EAAKgC,IAAI46C,EAAIJ,IAG5B,EACP,OAeJ,OAXAtkB,EAASne,KAAO0Y,EAAYA,aAAC2B,UAC7B8D,EAASxE,YAAY3yB,UACrBm3B,EAASnZ,WAAW7d,QAAQu7C,GAC5BvkB,EAASrE,WAAa,EACtBqE,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,OAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,UAKtD,GAAIsU,GAAK,EAAK,CACZ,IAAMwS,EAAI78C,EAAKQ,MAAMiM,GACfqwC,EAAI98C,EAAKgC,IAAIw6C,EAAGK,GAEtB,GADW78C,EAAK8C,IAAIg6C,EAAGA,GACd9V,EAASA,EAChB,OAIF,GAAIuV,EAAMna,aAAc,CACtB,IAAM2a,EAAKR,EAAMra,UACX8a,EAAKvwC,EACLm5B,EAAK5lC,EAAKgC,IAAI+6C,EAAIC,GAIxB,GAHWh9C,EAAK8C,IAAI8iC,EAAI5lC,EAAKgC,IAAIw6C,EAAGQ,IAG3B,EACP,OAeJ,OAXA9kB,EAASne,KAAO0Y,EAAYA,aAAC2B,UAC7B8D,EAASxE,YAAY3yB,UACrBm3B,EAASnZ,WAAW7d,QAAQ27C,GAC5B3kB,EAASrE,WAAa,EACtBqE,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,OAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,UAKtD,IAAMknB,EAAMj9C,EAAK8C,IAAIsgC,EAAGA,GAElBjI,EAAIn7B,EAAKsD,QAAQ+mC,EAAI4S,EAAKzwC,EAAG/L,EAAIw8C,EAAKxwC,GACtC3P,EAAIkD,EAAKgC,IAAIw6C,EAAGrhB,GAEtB,KADWn7B,EAAK8C,IAAIhG,EAAGA,GACdkqC,EAASA,GAAlB,CAIA,IAAM5oC,EAAI4B,EAAKO,KAAK6iC,EAAEnjC,EAAGmjC,EAAE/jC,GACvBW,EAAK8C,IAAI1E,EAAG4B,EAAKgC,IAAIw6C,EAAGhwC,IAAM,GAChCpO,EAAE6C,QAAQ7C,EAAEiB,GAAIjB,EAAE6B,GAEpB7B,EAAEiE,YAEF61B,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BmM,EAASxE,YAAct1B,EACvB85B,EAASnZ,WAAW7d,QAAQsL,GAC5B0rB,EAASrE,WAAa,EACtBqE,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACsD,OACpDkC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,EAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,WC9HtD,SAASmnB,GAAkBC,EAAqBrlC,EAAgBslC,EAAqBrlC,EAAgBpZ,GAUnG,IATA,IAAM0+C,EAASF,EAAMl4B,QACfq4B,EAASF,EAAMn4B,QACfs4B,EAAMJ,EAAMxY,UACZ6Y,EAAML,EAAMl3B,WACZw3B,EAAML,EAAMn3B,WACZ1T,EAAKJ,EAAUW,OAAOiF,EAAKD,GAE7BqO,EAAY,EACZu3B,GAAiB13C,EAAAA,EACZ7H,EAAI,EAAGA,EAAIk/C,IAAUl/C,EAAG,CAO/B,IALA,IAAMC,EAAI2S,EAAIe,QAAQS,EAAGD,EAAGirC,EAAIp/C,IAC1BwjC,EAAKxvB,EAAUL,QAAQS,EAAIirC,EAAIr/C,IAGjCw/C,EAAK33C,EAAAA,EACAqI,EAAI,EAAGA,EAAIivC,IAAUjvC,EAAG,CAC/B,IAAMuvC,EAAM59C,EAAK8C,IAAI1E,EAAGq/C,EAAIpvC,IAAMrO,EAAK8C,IAAI1E,EAAGujC,GAC1Cic,EAAMD,IACRA,EAAKC,GAILD,EAAKD,IACPA,EAAgBC,EAChBx3B,EAAYhoB,GAKhBQ,EAAO++C,cAAgBA,EACvB/+C,EAAOwnB,UAAYA,EAjDrB0Q,GAAQsG,QAAQsH,GAAa5C,KAAM4C,GAAa5C,MAEhD,SAAwB3J,EAAoB7T,EAAgBpL,EAAmBgL,EAAgBK,EAAgBnL,EAAmB+K,GAGhI25B,GAAgB3lB,EAAUjf,EAASvC,WAA4B2N,EAAKlL,EAASzC,WAA4B4N,MAuF3G,IAAMo5B,GAAgB,CACpBA,cAAe,EACfv3B,UAAW,GAaA03B,GAAkB,SAAU3lB,EAAoB4lB,EAAqBz5B,EAAgB05B,EAAqBz5B,GACrH4T,EAASrE,WAAa,EACtB,IAAMhK,EAAci0B,EAAM7pC,SAAW8pC,EAAM9pC,SAE3CipC,GAAkBY,EAAOz5B,EAAK05B,EAAOz5B,EAAKo5B,IAC1C,IAAMnB,EAAQmB,GAAcv3B,UACtB63B,EAAcN,GAAcA,cAClC,KAAIM,EAAcn0B,GAAlB,CAGAqzB,GAAkBa,EAAOz5B,EAAKw5B,EAAOz5B,EAAKq5B,IAC1C,IAAMO,EAAQP,GAAcv3B,UACtB+3B,EAAcR,GAAcA,cAClC,KAAIQ,EAAcr0B,GAAlB,CAGA,IAAIszB,EACAC,EACAtlC,EACAC,EACAomC,EACAC,EAGAF,EAAcF,EAFJ,GAAMn3C,EAASE,YAG3Bo2C,EAAQY,EACRX,EAAQU,EACRhmC,EAAMwM,EACNvM,EAAMsM,EACN85B,EAAQF,EACR/lB,EAASne,KAAO0Y,EAAYA,aAAC7G,QAC7BwyB,EAAO,IAEPjB,EAAQW,EACRV,EAAQW,EACRjmC,EAAMuM,EACNtM,EAAMuM,EACN65B,EAAQ5B,EACRrkB,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BqyB,EAAO,GAGT,IAAMC,EAAe,CAAE,IAAI9qB,GAAc,IAAIA,KAjG/C,SAA0BtkB,EAAiBkuC,EAAqBrlC,EAAgBqmC,EAAef,EAAqBrlC,GAelH,IAdA,IAAMumC,EAAWnB,EAAMxY,UAEjB2Y,EAASF,EAAMn4B,QACfs5B,EAAYnB,EAAMn3B,WAClBu4B,EAAWpB,EAAMzY,UAKjB8Z,EAAU1tC,EAAImB,SAAS6F,EAAIzF,EAAGvB,EAAIe,QAAQgG,EAAIxF,EAAGgsC,EAASH,KAG5D1yC,EAAQ,EACRizC,EAAS14C,EAAAA,EACJ7H,EAAI,EAAGA,EAAIm/C,IAAUn/C,EAAG,CAC/B,IAAM2E,EAAM9C,EAAK8C,IAAI27C,EAASD,EAASrgD,IACnC2E,EAAM47C,IACRA,EAAS57C,EACT2I,EAAQtN,GAKZ,IAAMknC,EAAK55B,EACL65B,EAAKD,EAAK,EAAIiY,EAASjY,EAAK,EAAI,EAEtCp2B,EAAE,GAAGxO,EAAI0R,EAAUL,QAAQiG,EAAKwmC,EAAUlZ,IAC1Cp2B,EAAE,GAAGvF,GAAGkrB,GAAG3Q,OAASk6B,EACpBlvC,EAAE,GAAGvF,GAAGkrB,GAAG1Q,OAASmhB,EACpBp2B,EAAE,GAAGvF,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACsD,OACtC/mB,EAAE,GAAGvF,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,SAEtC9mB,EAAE,GAAGxO,EAAI0R,EAAUL,QAAQiG,EAAKwmC,EAAUjZ,IAC1Cr2B,EAAE,GAAGvF,GAAGkrB,GAAG3Q,OAASk6B,EACpBlvC,EAAE,GAAGvF,GAAGkrB,GAAG1Q,OAASohB,EACpBr2B,EAAE,GAAGvF,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACsD,OACtC/mB,EAAE,GAAGvF,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,SA6DtC4oB,CAAiBN,EAAclB,EAAOrlC,EAAKqmC,EAAOf,EAAOrlC,GAEzD,IAAMslC,EAASF,EAAMl4B,QACf25B,EAAYzB,EAAMl3B,WAElB44B,EAAMV,EACNW,EAAMX,EAAQ,EAAId,EAASc,EAAQ,EAAI,EAEzCY,EAAMH,EAAUC,GAChBG,EAAMJ,EAAUE,GAEdG,EAAej/C,EAAKgC,IAAIg9C,EAAKD,GACnCE,EAAa58C,YAEb,IAAMqxB,EAAc1zB,EAAKiD,aAAag8C,EAAc,GAC9CzqB,EAAax0B,EAAKsD,QAAQ,GAAKy7C,EAAK,GAAKC,GAEzCvjB,EAAU1qB,EAAIe,QAAQgG,EAAIxF,EAAG2sC,GAC7B54C,EAASrG,EAAKiD,aAAaw4B,EAAS,GAE1CsjB,EAAM5sC,EAAUL,QAAQgG,EAAKinC,GAC7BC,EAAM7sC,EAAUL,QAAQgG,EAAKknC,GAG7B,IAAME,EAAcl/C,EAAK8C,IAAIuD,EAAQ04C,GAG/BI,GAAen/C,EAAK8C,IAAI24B,EAASsjB,GAAOl1B,EACxCu1B,EAAcp/C,EAAK8C,IAAI24B,EAASujB,GAAOn1B,EAGvCw1B,EAAc,CAAE,IAAI9rB,GAAc,IAAIA,IACtC+rB,EAAc,CAAE,IAAI/rB,GAAc,IAAIA,IAM5C,KAFKmB,GAAkB2qB,EAAahB,EAAcr+C,EAAKyD,IAAIg4B,GAAU0jB,EAAaN,GAEzE,GAKJnqB,GAAkB4qB,EAAaD,EAAa5jB,EAAS2jB,EAAaN,GAE9D,GAAT,CAKA5mB,EAASxE,YAAcA,EACvBwE,EAASnZ,WAAayV,EAGtB,IADA,IAAIX,EAAa,EACR11B,EAAI,EAAGA,EAAImhD,EAAYhhD,SAAiCH,EAAG,CAGlE,GAFmB6B,EAAK8C,IAAIuD,EAAQi5C,EAAYnhD,GAAGsC,GAAKy+C,GAEtCr1B,EAAa,CAC7B,IAAMuP,EAAKlB,EAASvE,OAAOE,GAG3B,GAFAuF,EAAGra,WAAW7d,QAAQiR,EAAUD,SAAS6F,EAAKunC,EAAYnhD,GAAGsC,IAC7D24B,EAAG1vB,GAAK41C,EAAYnhD,GAAGuL,GACnB00C,EAAM,CAER,IAAMxpB,EAAKwE,EAAG1vB,GAAGkrB,GACX3Q,EAAS2Q,EAAG3Q,OACZC,EAAS0Q,EAAG1Q,OACZ4Q,EAAQF,EAAGE,MACXC,EAAQH,EAAGG,MACjBH,EAAG3Q,OAASC,EACZ0Q,EAAG1Q,OAASD,EACZ2Q,EAAGE,MAAQC,EACXH,EAAGG,MAAQD,IAEXjB,GAINqE,EAASrE,WAAaA,MCnOxBgD,GAAQsG,QAAQsH,GAAa5C,KAAMiF,GAAYjF,MAE/C,SAA8B3J,EAAoB7T,EAAgBpL,EAAmBgL,EAAgBK,EAAgBnL,EAAmB+K,GAGtIq7B,GAAqBrnB,EAAUjf,EAASvC,WAA4B2N,EAAKlL,EAASzC,WAA2B4N,MAGxG,ICgBFk7B,GAOAC,GDvBQF,GAAuB,SAAUrnB,EAAoBwnB,EAAwBr7B,EAAgB83B,EAAsB73B,GAC9H4T,EAASrE,WAAa,EActB,IAXA,IAAM5kB,EAAIkD,EAAUL,QAAQwS,EAAK63B,EAAQpV,KACnC4Y,EAASxtC,EAAUD,SAASmS,EAAKpV,GAGnC2wC,EAAc,EACdhwB,GAAc5pB,EAAAA,EACZghC,EAAS0Y,EAASzrC,SAAWkoC,EAAQloC,SACrC4rC,EAAcH,EAASz6B,QACvBP,EAAWg7B,EAASz5B,WACpBiH,EAAUwyB,EAAS/a,UAEhBxmC,EAAI,EAAGA,EAAI0hD,IAAe1hD,EAAG,CACpC,IAAMD,EAAI8B,EAAK8C,IAAIoqB,EAAQ/uB,GAAI6B,EAAKgC,IAAI29C,EAAQj7B,EAASvmB,KAEzD,GAAID,EAAI8oC,EAEN,OAGE9oC,EAAI0xB,IACNA,EAAa1xB,EACb0hD,EAAczhD,GAKlB,IAAM2hD,EAAaF,EACbG,EAAaD,EAAa,EAAID,EAAcC,EAAa,EAAI,EAC7Dne,EAAKjd,EAASo7B,GACdle,EAAKld,EAASq7B,GAGpB,GAAInwB,EAAa1wB,EAAKC,QAYpB,OAXA+4B,EAASrE,WAAa,EACtBqE,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BmM,EAASxE,YAAYxyB,QAAQgsB,EAAQ0yB,IACrC1nB,EAASnZ,WAAWxd,WAAW,GAAKogC,EAAI,GAAKC,GAC7C1J,EAASvE,OAAO,GAAG5U,WAAao9B,EAAQpV,IAGxC7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,OAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,UAKtD,IAAMiqB,EAAKhgD,EAAK8C,IAAI9C,EAAKgC,IAAI29C,EAAQhe,GAAK3hC,EAAKgC,IAAI4/B,EAAID,IACjDse,EAAKjgD,EAAK8C,IAAI9C,EAAKgC,IAAI29C,EAAQ/d,GAAK5hC,EAAKgC,IAAI2/B,EAAIC,IACvD,GAAIoe,GAAM,EAAK,CACb,GAAIhgD,EAAK2C,gBAAgBg9C,EAAQhe,GAAMqF,EAASA,EAC9C,OAGF9O,EAASrE,WAAa,EACtBqE,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BmM,EAASxE,YAAYnyB,WAAW,EAAGo+C,GAAS,EAAGhe,GAC/CzJ,EAASxE,YAAYrxB,YACrB61B,EAASnZ,WAAa4iB,EACtBzJ,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,EAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,cAC/C,GAAIkqB,GAAM,EAAK,CACpB,GAAIjgD,EAAK2C,gBAAgBg9C,EAAQ/d,GAAMoF,EAASA,EAC9C,OAGF9O,EAASrE,WAAa,EACtBqE,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BmM,EAASxE,YAAYnyB,WAAW,EAAGo+C,GAAS,EAAG/d,GAC/C1J,EAASxE,YAAYrxB,YACrB61B,EAASnZ,WAAW7d,QAAQ0gC,GAC5B1J,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,EAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,aAC/C,CACL,IAAMmqB,EAAalgD,EAAK2D,IAAIg+B,EAAIC,GAEhC,GADmB5hC,EAAK8C,IAAI68C,EAAQzyB,EAAQ4yB,IAAe9/C,EAAK8C,IAAIo9C,EAAYhzB,EAAQ4yB,IACvE9Y,EACf,OAGF9O,EAASrE,WAAa,EACtBqE,EAASne,KAAO0Y,EAAYA,aAAC1G,QAC7BmM,EAASxE,YAAYxyB,QAAQgsB,EAAQ4yB,IACrC5nB,EAASnZ,WAAW7d,QAAQg/C,GAC5BhoB,EAASvE,OAAO,GAAG5U,WAAW7d,QAAQi7C,EAAQpV,KAG9C7O,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG3Q,OAAS,EAClCiU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACpDmC,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAG1Q,OAAS,EAClCgU,EAASvE,OAAO,GAAGjqB,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,WC9GxDc,GAAQsG,QAAQsE,GAAUI,KAAM4C,GAAa5C,MAG7C,SAA4B3J,EAAoB7T,EAAgBiN,EAAarN,EAAgBK,EAAgBiN,EAAarN,GAIxHi8B,GAAmBjoB,EAAU5G,EAAG5a,WAAyB2N,EAAKkN,EAAG7a,WAA4B4N,MAN/FuS,GAAQsG,QAAQsG,GAAW5B,KAAM4C,GAAa5C,MAS9C,SAA6B3J,EAAoB7T,EAAgBiN,EAAarN,EAAgBK,EAAgBiN,EAAarN,GAIzH,IAAMo4B,EAAQhrB,EAAG5a,WACXoC,EAAO,IAAI2oB,GACjB6a,EAAM/X,aAAazrB,EAAMmL,GAEzBk8B,GAAmBjoB,EAAUpf,EAAMuL,EAAKkN,EAAG7a,WAA4B4N,MAGzE,SAAKk7B,GACHA,EAAAA,EAAA,WAAA,GAAA,YACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UAHF,CAAKA,KAAAA,GAIJ,KAGD,SAAKC,GACJA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,SAAA,GAAA,WAHD,CAAKA,KAAAA,GAIJ,KAKD,IAAAW,GAAA,aASAC,GAAA,WACEziD,KAAA8mB,SAAmB,GACnB9mB,KAAAsvB,QAAkB,GAClBtvB,KAAKoQ,MAAW,GAMlBsyC,GAAA,WAKE1iD,KAAAyI,OAAerG,EAAKM,OACpB1C,KAAA2iD,YAAoBvgD,EAAKM,OAEzB1C,KAAA4iD,YAAoBxgD,EAAKM,QAKrBmgD,GAAW,IAAIL,GACfM,GAAc,IAAIN,GAClBO,GAAY,IAAIN,GAChBO,GAAK,IAAIN,GAMFH,GAAqB,SAAUjoB,EAAoBqkB,EAAkBl4B,EAAgBw8B,EAAwBv8B,GAcxH,IAAM/R,EAAKJ,EAAUW,OAAOuR,EAAKC,GAE3Bw8B,EAAY3uC,EAAUL,QAAQS,EAAIsuC,EAASnc,YAE3Cqc,EAAKxE,EAAMta,UACXN,EAAK4a,EAAMxa,UACXH,EAAK2a,EAAMva,UACXgf,EAAKzE,EAAMra,UAEXO,EAAa8Z,EAAMpa,aACnBO,EAAa6Z,EAAMna,aAEnB+b,EAAQn+C,EAAKgC,IAAI4/B,EAAID,GAC3Bwc,EAAM97C,YACN,IAOI4+C,EACAC,EAoBAC,EA5BE1C,EAAUz+C,EAAKO,IAAI49C,EAAMl+C,GAAIk+C,EAAM9+C,GACnC+hD,EAAUphD,EAAK8C,IAAI27C,EAASz+C,EAAKgC,IAAI8+C,EAAWnf,IAClD0f,EAAU,EACVC,EAAU,EACVC,GAAU,EACVC,GAAU,EAMd,GAAI/e,EAAY,CACd,IAAMgf,EAAQzhD,EAAKgC,IAAI2/B,EAAIof,GAC3BU,EAAMp/C,YACN4+C,EAAUjhD,EAAKO,IAAIkhD,EAAMxhD,GAAIwhD,EAAMpiD,GACnCkiD,EAAUvhD,EAAKgD,cAAcy+C,EAAOtD,IAAU,EAC9CkD,EAAUrhD,EAAK8C,IAAIm+C,EAASH,GAAa9gD,EAAK8C,IAAIm+C,EAASF,GAI7D,GAAIre,EAAY,CACd,IAAMgf,EAAQ1hD,EAAKgC,IAAIg/C,EAAIpf,GAC3B8f,EAAMr/C,YACN6+C,EAAUlhD,EAAKO,IAAImhD,EAAMzhD,GAAIyhD,EAAMriD,GACnCmiD,EAAUxhD,EAAKgD,cAAcm7C,EAAOuD,GAAS,EAC7CJ,EAAUthD,EAAK8C,IAAIo+C,EAASJ,GAAa9gD,EAAK8C,IAAIo+C,EAAStf,GAI7D,IAAMv7B,EAASrG,EAAKM,OACdqhD,EAAa3hD,EAAKM,OAClBshD,EAAa5hD,EAAKM,OAGpBmiC,GAAcC,EACZ6e,GAAWC,GACbL,EAAQE,GAAW,GAAOD,GAAW,GAAOE,GAAW,IAErDj7C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQ+/C,GACnBW,EAAW1gD,QAAQggD,KAEnB76C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAWpgD,QAAQ,EAAGi9C,IAEf8C,GACTJ,EAAQE,GAAW,GAAQD,GAAW,GAAOE,GAAW,IAEtDj7C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQ+/C,GACnBW,EAAW1gD,QAAQu9C,KAEnBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAG0/C,GACtBU,EAAWpgD,QAAQ,EAAGi9C,IAEf+C,GACTL,EAAQG,GAAW,GAAQD,GAAW,GAAOD,GAAW,IAEtD/6C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQu9C,GACnBmD,EAAW1gD,QAAQggD,KAEnB76C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAWpgD,QAAQ,EAAGy/C,KAGxBE,EAAQE,GAAW,GAAOD,GAAW,GAAOE,GAAW,IAErDj7C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQu9C,GACnBmD,EAAW1gD,QAAQu9C,KAEnBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAG0/C,GACtBU,EAAWpgD,QAAQ,EAAGy/C,IAGjBxe,EACL8e,GACFJ,EAAQE,GAAW,GAAOD,GAAW,IAEnC/6C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQ+/C,GACnBW,EAAWpgD,QAAQ,EAAGi9C,KAEtBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWzgD,QAAQu9C,GACnBmD,EAAWpgD,QAAQ,EAAGi9C,KAGxB0C,EAAQE,GAAW,GAAOD,GAAW,IAEnC/6C,EAAOnF,QAAQu9C,GACfkD,EAAWzgD,QAAQu9C,GACnBmD,EAAWpgD,QAAQ,EAAGi9C,KAEtBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWzgD,QAAQu9C,GACnBmD,EAAWpgD,QAAQ,EAAGy/C,IAGjBve,EACL8e,GACFL,EAAQC,GAAW,GAAOE,GAAW,IAEnCj7C,EAAOnF,QAAQu9C,GACfkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAW1gD,QAAQggD,KAEnB76C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAW1gD,QAAQu9C,KAGrB0C,EAAQC,GAAW,GAAOE,GAAW,IAEnCj7C,EAAOnF,QAAQu9C,GACfkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAW1gD,QAAQu9C,KAEnBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWngD,QAAQ,EAAG0/C,GACtBU,EAAW1gD,QAAQu9C,KAIvB0C,EAAQC,GAAW,IAEjB/6C,EAAOnF,QAAQu9C,GACfkD,EAAWngD,QAAQ,EAAGi9C,GACtBmD,EAAWpgD,QAAQ,EAAGi9C,KAEtBp4C,EAAO7E,QAAQ,EAAGi9C,GAClBkD,EAAWzgD,QAAQu9C,GACnBmD,EAAW1gD,QAAQu9C,IAKvBkC,GAAU3yC,MAAQ6yC,EAAS57B,QAC3B,IAAK,IAAI9mB,EAAI,EAAGA,EAAI0iD,EAAS57B,UAAW9mB,EACtCwiD,GAAUj8B,SAASvmB,GAAKgU,EAAUL,QAAQS,EAAIsuC,EAAS56B,WAAW9nB,IAClEwiD,GAAUzzB,QAAQ/uB,GAAK4S,EAAIe,QAAQS,EAAGD,EAAGuuC,EAASlc,UAAUxmC,IAG9D,IAAM6oC,EAAS,EAAMngC,EAASi7B,cAE9B5J,EAASrE,WAAa,EAGpB4sB,GAAS1mC,KAAOylC,GAAWqC,QAC3BpB,GAASh1C,MAAQ01C,EAAQ,EAAI,EAC7BV,GAAS7wB,WAAa5pB,EAAAA,EAEtB,IAAS7H,EAAI,EAAGA,EAAIwiD,GAAU3yC,QAAS7P,EAAG,EAClCD,EAAI8B,EAAK8C,IAAIuD,EAAQrG,EAAKgC,IAAI2+C,GAAUj8B,SAASvmB,GAAIwjC,KACnD8e,GAAS7wB,aACf6wB,GAAS7wB,WAAa1xB,GAO5B,GAAIuiD,GAAS1mC,MAAQylC,GAAW71B,aAI5B82B,GAAS7wB,WAAaoX,GAA1B,CAKE0Z,GAAY3mC,KAAOylC,GAAW71B,UAC9B+2B,GAAYj1C,OAAS,EACrBi1C,GAAY9wB,YAAc5pB,EAAAA,EAE1B,IAAM2qC,EAAO3wC,EAAKO,KAAK8F,EAAOpG,EAAGoG,EAAOhH,GAExC,IAASlB,EAAI,EAAGA,EAAIwiD,GAAU3yC,QAAS7P,EAAG,CACxC,IAIMD,EAJAE,EAAI4B,EAAKyD,IAAIk9C,GAAUzzB,QAAQ/uB,IAE/B0sB,EAAK7qB,EAAK8C,IAAI1E,EAAG4B,EAAKgC,IAAI2+C,GAAUj8B,SAASvmB,GAAIwjC,IACjDjX,EAAK1qB,EAAK8C,IAAI1E,EAAG4B,EAAKgC,IAAI2+C,GAAUj8B,SAASvmB,GAAIyjC,IAGvD,IAFM1jC,EAAIgB,EAAKU,IAAIirB,EAAIH,IAEfsc,EAAQ,CAEd0Z,GAAY3mC,KAAOylC,GAAWsC,QAC9BpB,GAAYj1C,MAAQtN,EACpBuiD,GAAY9wB,WAAa1xB,EACzB,MAIF,GAAI8B,EAAK8C,IAAI1E,EAAGuyC,IAAS,GACvB,GAAI3wC,EAAK8C,IAAI9C,EAAKgC,IAAI5D,EAAGwjD,GAAav7C,IAAWQ,EAASa,YACxD,cAGF,GAAI1H,EAAK8C,IAAI9C,EAAKgC,IAAI5D,EAAGujD,GAAat7C,IAAWQ,EAASa,YACxD,SAIAxJ,EAAIwiD,GAAY9wB,aAClB8wB,GAAY3mC,KAAOylC,GAAWsC,QAC9BpB,GAAYj1C,MAAQtN,EACpBuiD,GAAY9wB,WAAa1xB,GAK/B,KAAIwiD,GAAY3mC,MAAQylC,GAAW71B,WAAa+2B,GAAY9wB,WAAaoX,GAAzE,CAKA,IAGI+a,EAEFA,EADErB,GAAY3mC,MAAQylC,GAAW71B,UACnB82B,GACLC,GAAY9wB,WAND,IAM8B6wB,GAAS7wB,WALvC,KAMN8wB,GAEAD,GAGhB,IAAMrb,EAAK,CAAE,IAAI7R,GAAc,IAAIA,IAEnC,GAAIwuB,EAAYhoC,MAAQylC,GAAWqC,QAAS,CAC1C3pB,EAASne,KAAO0Y,EAAYA,aAAC1G,QAI7B,IAAI5F,EAAY,EACZC,EAAYpmB,EAAK8C,IAAIuD,EAAQs6C,GAAUzzB,QAAQ,IACnD,IAAS/uB,EAAI,EAAGA,EAAIwiD,GAAU3yC,QAAS7P,EAAG,CACxC,IAAMgD,EAAQnB,EAAK8C,IAAIuD,EAAQs6C,GAAUzzB,QAAQ/uB,IAC7CgD,EAAQilB,IACVA,EAAYjlB,EACZglB,EAAYhoB,GAIhB,IAAMknC,EAAKlf,EACLmf,EAAKD,EAAK,EAAIsb,GAAU3yC,MAAQq3B,EAAK,EAAI,EAE/CD,EAAG,GAAG3kC,EAAIkgD,GAAUj8B,SAAS2gB,GAC7BD,EAAG,GAAG17B,GAAGkrB,GAAG3Q,OAAS,EACrBmhB,EAAG,GAAG17B,GAAGkrB,GAAG1Q,OAASmhB,EACrBD,EAAG,GAAG17B,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACsD,OACvCoP,EAAG,GAAG17B,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,SAEvCqP,EAAG,GAAG3kC,EAAIkgD,GAAUj8B,SAAS4gB,GAC7BF,EAAG,GAAG17B,GAAGkrB,GAAG3Q,OAAS,EACrBmhB,EAAG,GAAG17B,GAAGkrB,GAAG1Q,OAASohB,EACrBF,EAAG,GAAG17B,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACsD,OACvCoP,EAAG,GAAG17B,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACqD,SAEnCorB,GACFP,GAAGvb,GAAK,EACRub,GAAGtb,GAAK,EACRsb,GAAGjf,GAAKA,EACRif,GAAGhf,GAAKA,EACRgf,GAAGv6C,OAAOnF,QAAQu9C,KAElBmC,GAAGvb,GAAK,EACRub,GAAGtb,GAAK,EACRsb,GAAGjf,GAAKC,EACRgf,GAAGhf,GAAKD,EACRif,GAAGv6C,OAAO7E,QAAQ,EAAGi9C,SAGvBvmB,EAASne,KAAO0Y,EAAYA,aAAC7G,QAE7BwZ,EAAG,GAAG3kC,EAAIkhC,EACVyD,EAAG,GAAG17B,GAAGkrB,GAAG3Q,OAAS,EACrBmhB,EAAG,GAAG17B,GAAGkrB,GAAG1Q,OAAS69B,EAAYt2C,MACjC25B,EAAG,GAAG17B,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACvCqP,EAAG,GAAG17B,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACsD,OAEvCoP,EAAG,GAAG3kC,EAAImhC,EACVwD,EAAG,GAAG17B,GAAGkrB,GAAG3Q,OAAS,EACrBmhB,EAAG,GAAG17B,GAAGkrB,GAAG1Q,OAAS69B,EAAYt2C,MACjC25B,EAAG,GAAG17B,GAAGkrB,GAAGE,MAAQpC,EAAkBA,mBAACqD,SACvCqP,EAAG,GAAG17B,GAAGkrB,GAAGG,MAAQrC,EAAkBA,mBAACsD,OAEvC4qB,GAAGvb,GAAK0c,EAAYt2C,MACpBm1C,GAAGtb,GAAKsb,GAAGvb,GAAK,EAAIsb,GAAU3yC,MAAQ4yC,GAAGvb,GAAK,EAAI,EAClDub,GAAGjf,GAAKgf,GAAUj8B,SAASk8B,GAAGvb,IAC9Bub,GAAGhf,GAAK+e,GAAUj8B,SAASk8B,GAAGtb,IAC9Bsb,GAAGv6C,OAAOnF,QAAQy/C,GAAUzzB,QAAQ0zB,GAAGvb,KAGzCub,GAAGL,YAAYt/C,OAAO2/C,GAAGv6C,OAAOpG,GAAI2gD,GAAGv6C,OAAOhH,GAC9CuhD,GAAGJ,YAAYh/C,QAAQ,EAAGo/C,GAAGL,aAC7BK,GAAGzB,YAAcn/C,EAAK8C,IAAI89C,GAAGL,YAAaK,GAAGjf,IAC7Cif,GAAGxB,YAAcp/C,EAAK8C,IAAI89C,GAAGJ,YAAaI,GAAGhf,IAG7C,IAAMyd,EAAc,CAAE,IAAI9rB,GAAc,IAAIA,IACtC+rB,EAAc,CAAE,IAAI/rB,GAAc,IAAIA,IAO5C,KAFKmB,GAAkB2qB,EAAaja,EAAIwb,GAAGL,YAAaK,GAAGzB,YAAayB,GAAGvb,IAElEx+B,EAASS,mBAKbotB,GAAkB4qB,EAAaD,EAAauB,GAAGJ,YAAaI,GAAGxB,YAAawB,GAAGtb,IAE3Ez+B,EAASS,mBAAlB,CAKIy6C,EAAYhoC,MAAQylC,GAAWqC,SACjC3pB,EAASxE,YAAc1zB,EAAKQ,MAAMogD,GAAGv6C,QACrC6xB,EAASnZ,WAAa/e,EAAKQ,MAAMogD,GAAGjf,MAEpCzJ,EAASxE,YAAc1zB,EAAKQ,MAAMqgD,EAASlc,UAAUic,GAAGvb,KACxDnN,EAASnZ,WAAa/e,EAAKQ,MAAMqgD,EAAS56B,WAAW26B,GAAGvb,MAG1D,IAAIxR,EAAa,EACjB,IAAS11B,EAAI,EAAGA,EAAI0I,EAASS,oBAAqBnJ,EAAG,CAGnD,GAFmB6B,EAAK8C,IAAI89C,GAAGv6C,OAAQrG,EAAKgC,IAAIs9C,EAAYnhD,GAAGsC,EAAGmgD,GAAGjf,MAEnDqF,EAAQ,CACxB,IAAM5N,EAAKlB,EAASvE,OAAOE,GAEvBkuB,EAAYhoC,MAAQylC,GAAWqC,SACjCzoB,EAAGra,WAAa5M,EAAUD,SAASK,EAAI+sC,EAAYnhD,GAAGsC,GACtD24B,EAAG1vB,GAAK41C,EAAYnhD,GAAGuL,KAEvB0vB,EAAGra,WAAaugC,EAAYnhD,GAAGsC,EAC/B24B,EAAG1vB,GAAGkrB,GAAGE,MAAQwqB,EAAYnhD,GAAGuL,GAAGkrB,GAAGG,MACtCqE,EAAG1vB,GAAGkrB,GAAGG,MAAQuqB,EAAYnhD,GAAGuL,GAAGkrB,GAAGE,MACtCsE,EAAG1vB,GAAGkrB,GAAG3Q,OAASq7B,EAAYnhD,GAAGuL,GAAGkrB,GAAG1Q,OACvCkV,EAAG1vB,GAAGkrB,GAAG1Q,OAASo7B,EAAYnhD,GAAGuL,GAAGkrB,GAAG3Q,UAGvC4P,GAINqE,EAASrE,WAAaA,MC9bX30B,GAAOD,EAYP+iD,GAAW,CACtBnE,gBAAeA,GACfh3C,SAAQA,EACRoM,MAAKA,EACLwgB,SAAQA,GACRtP,SAAQA,EACRqF,aAAYA,EACZvf,YAAWA,EACXkY,MAAKA"}